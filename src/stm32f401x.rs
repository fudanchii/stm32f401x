/* automatically generated by rust-bindgen */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage, Align>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    storage: Storage,
    align: [Align; 0],
}

impl<Storage, Align> __BindgenBitfieldUnit<Storage, Align>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn new(storage: Storage) -> Self {
        Self { storage, align: [] }
    }

    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());

        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];

        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };

        let mask = 1 << bit_index;

        byte & mask == mask
    }

    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());

        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];

        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };

        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }

    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());

        let mut val = 0;

        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }

        val
    }

    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());

        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
#[repr(C)]
pub struct __BindgenUnionField<T>(::core::marker::PhantomData<T>);
impl<T> __BindgenUnionField<T> {
    #[inline]
    pub fn new() -> Self {
        __BindgenUnionField(::core::marker::PhantomData)
    }
    #[inline]
    pub unsafe fn as_ref(&self) -> &T {
        ::core::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_mut(&mut self) -> &mut T {
        ::core::mem::transmute(self)
    }
}
impl<T> ::core::default::Default for __BindgenUnionField<T> {
    #[inline]
    fn default() -> Self {
        Self::new()
    }
}
impl<T> ::core::clone::Clone for __BindgenUnionField<T> {
    #[inline]
    fn clone(&self) -> Self {
        Self::new()
    }
}
impl<T> ::core::marker::Copy for __BindgenUnionField<T> {}
impl<T> ::core::fmt::Debug for __BindgenUnionField<T> {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        fmt.write_str("__BindgenUnionField")
    }
}
impl<T> ::core::hash::Hash for __BindgenUnionField<T> {
    fn hash<H: ::core::hash::Hasher>(&self, _state: &mut H) {}
}
impl<T> ::core::cmp::PartialEq for __BindgenUnionField<T> {
    fn eq(&self, _other: &__BindgenUnionField<T>) -> bool {
        true
    }
}
impl<T> ::core::cmp::Eq for __BindgenUnionField<T> {}
pub const __CM4_REV: u32 = 1;
pub const __MPU_PRESENT: u32 = 1;
pub const __NVIC_PRIO_BITS: u32 = 4;
pub const __Vendor_SysTickConfig: u32 = 0;
pub const __FPU_PRESENT: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 28;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const __CM4_CMSIS_VERSION_MAIN: u32 = 4;
pub const __CM4_CMSIS_VERSION_SUB: u32 = 30;
pub const __CM4_CMSIS_VERSION: u32 = 262174;
pub const __CORTEX_M: u32 = 4;
pub const __FPU_USED: u32 = 0;
pub const APSR_N_Pos: u32 = 31;
pub const APSR_N_Msk: u32 = 2147483648;
pub const APSR_Z_Pos: u32 = 30;
pub const APSR_Z_Msk: u32 = 1073741824;
pub const APSR_C_Pos: u32 = 29;
pub const APSR_C_Msk: u32 = 536870912;
pub const APSR_V_Pos: u32 = 28;
pub const APSR_V_Msk: u32 = 268435456;
pub const APSR_Q_Pos: u32 = 27;
pub const APSR_Q_Msk: u32 = 134217728;
pub const APSR_GE_Pos: u32 = 16;
pub const APSR_GE_Msk: u32 = 983040;
pub const IPSR_ISR_Pos: u32 = 0;
pub const IPSR_ISR_Msk: u32 = 511;
pub const xPSR_N_Pos: u32 = 31;
pub const xPSR_N_Msk: u32 = 2147483648;
pub const xPSR_Z_Pos: u32 = 30;
pub const xPSR_Z_Msk: u32 = 1073741824;
pub const xPSR_C_Pos: u32 = 29;
pub const xPSR_C_Msk: u32 = 536870912;
pub const xPSR_V_Pos: u32 = 28;
pub const xPSR_V_Msk: u32 = 268435456;
pub const xPSR_Q_Pos: u32 = 27;
pub const xPSR_Q_Msk: u32 = 134217728;
pub const xPSR_IT_Pos: u32 = 25;
pub const xPSR_IT_Msk: u32 = 100663296;
pub const xPSR_T_Pos: u32 = 24;
pub const xPSR_T_Msk: u32 = 16777216;
pub const xPSR_GE_Pos: u32 = 16;
pub const xPSR_GE_Msk: u32 = 983040;
pub const xPSR_ISR_Pos: u32 = 0;
pub const xPSR_ISR_Msk: u32 = 511;
pub const CONTROL_FPCA_Pos: u32 = 2;
pub const CONTROL_FPCA_Msk: u32 = 4;
pub const CONTROL_SPSEL_Pos: u32 = 1;
pub const CONTROL_SPSEL_Msk: u32 = 2;
pub const CONTROL_nPRIV_Pos: u32 = 0;
pub const CONTROL_nPRIV_Msk: u32 = 1;
pub const NVIC_STIR_INTID_Pos: u32 = 0;
pub const NVIC_STIR_INTID_Msk: u32 = 511;
pub const SCB_CPUID_IMPLEMENTER_Pos: u32 = 24;
pub const SCB_CPUID_IMPLEMENTER_Msk: u32 = 4278190080;
pub const SCB_CPUID_VARIANT_Pos: u32 = 20;
pub const SCB_CPUID_VARIANT_Msk: u32 = 15728640;
pub const SCB_CPUID_ARCHITECTURE_Pos: u32 = 16;
pub const SCB_CPUID_ARCHITECTURE_Msk: u32 = 983040;
pub const SCB_CPUID_PARTNO_Pos: u32 = 4;
pub const SCB_CPUID_PARTNO_Msk: u32 = 65520;
pub const SCB_CPUID_REVISION_Pos: u32 = 0;
pub const SCB_CPUID_REVISION_Msk: u32 = 15;
pub const SCB_ICSR_NMIPENDSET_Pos: u32 = 31;
pub const SCB_ICSR_NMIPENDSET_Msk: u32 = 2147483648;
pub const SCB_ICSR_PENDSVSET_Pos: u32 = 28;
pub const SCB_ICSR_PENDSVSET_Msk: u32 = 268435456;
pub const SCB_ICSR_PENDSVCLR_Pos: u32 = 27;
pub const SCB_ICSR_PENDSVCLR_Msk: u32 = 134217728;
pub const SCB_ICSR_PENDSTSET_Pos: u32 = 26;
pub const SCB_ICSR_PENDSTSET_Msk: u32 = 67108864;
pub const SCB_ICSR_PENDSTCLR_Pos: u32 = 25;
pub const SCB_ICSR_PENDSTCLR_Msk: u32 = 33554432;
pub const SCB_ICSR_ISRPREEMPT_Pos: u32 = 23;
pub const SCB_ICSR_ISRPREEMPT_Msk: u32 = 8388608;
pub const SCB_ICSR_ISRPENDING_Pos: u32 = 22;
pub const SCB_ICSR_ISRPENDING_Msk: u32 = 4194304;
pub const SCB_ICSR_VECTPENDING_Pos: u32 = 12;
pub const SCB_ICSR_VECTPENDING_Msk: u32 = 2093056;
pub const SCB_ICSR_RETTOBASE_Pos: u32 = 11;
pub const SCB_ICSR_RETTOBASE_Msk: u32 = 2048;
pub const SCB_ICSR_VECTACTIVE_Pos: u32 = 0;
pub const SCB_ICSR_VECTACTIVE_Msk: u32 = 511;
pub const SCB_VTOR_TBLOFF_Pos: u32 = 7;
pub const SCB_VTOR_TBLOFF_Msk: u32 = 4294967168;
pub const SCB_AIRCR_VECTKEY_Pos: u32 = 16;
pub const SCB_AIRCR_VECTKEY_Msk: u32 = 4294901760;
pub const SCB_AIRCR_VECTKEYSTAT_Pos: u32 = 16;
pub const SCB_AIRCR_VECTKEYSTAT_Msk: u32 = 4294901760;
pub const SCB_AIRCR_ENDIANESS_Pos: u32 = 15;
pub const SCB_AIRCR_ENDIANESS_Msk: u32 = 32768;
pub const SCB_AIRCR_PRIGROUP_Pos: u32 = 8;
pub const SCB_AIRCR_PRIGROUP_Msk: u32 = 1792;
pub const SCB_AIRCR_SYSRESETREQ_Pos: u32 = 2;
pub const SCB_AIRCR_SYSRESETREQ_Msk: u32 = 4;
pub const SCB_AIRCR_VECTCLRACTIVE_Pos: u32 = 1;
pub const SCB_AIRCR_VECTCLRACTIVE_Msk: u32 = 2;
pub const SCB_AIRCR_VECTRESET_Pos: u32 = 0;
pub const SCB_AIRCR_VECTRESET_Msk: u32 = 1;
pub const SCB_SCR_SEVONPEND_Pos: u32 = 4;
pub const SCB_SCR_SEVONPEND_Msk: u32 = 16;
pub const SCB_SCR_SLEEPDEEP_Pos: u32 = 2;
pub const SCB_SCR_SLEEPDEEP_Msk: u32 = 4;
pub const SCB_SCR_SLEEPONEXIT_Pos: u32 = 1;
pub const SCB_SCR_SLEEPONEXIT_Msk: u32 = 2;
pub const SCB_CCR_STKALIGN_Pos: u32 = 9;
pub const SCB_CCR_STKALIGN_Msk: u32 = 512;
pub const SCB_CCR_BFHFNMIGN_Pos: u32 = 8;
pub const SCB_CCR_BFHFNMIGN_Msk: u32 = 256;
pub const SCB_CCR_DIV_0_TRP_Pos: u32 = 4;
pub const SCB_CCR_DIV_0_TRP_Msk: u32 = 16;
pub const SCB_CCR_UNALIGN_TRP_Pos: u32 = 3;
pub const SCB_CCR_UNALIGN_TRP_Msk: u32 = 8;
pub const SCB_CCR_USERSETMPEND_Pos: u32 = 1;
pub const SCB_CCR_USERSETMPEND_Msk: u32 = 2;
pub const SCB_CCR_NONBASETHRDENA_Pos: u32 = 0;
pub const SCB_CCR_NONBASETHRDENA_Msk: u32 = 1;
pub const SCB_SHCSR_USGFAULTENA_Pos: u32 = 18;
pub const SCB_SHCSR_USGFAULTENA_Msk: u32 = 262144;
pub const SCB_SHCSR_BUSFAULTENA_Pos: u32 = 17;
pub const SCB_SHCSR_BUSFAULTENA_Msk: u32 = 131072;
pub const SCB_SHCSR_MEMFAULTENA_Pos: u32 = 16;
pub const SCB_SHCSR_MEMFAULTENA_Msk: u32 = 65536;
pub const SCB_SHCSR_SVCALLPENDED_Pos: u32 = 15;
pub const SCB_SHCSR_SVCALLPENDED_Msk: u32 = 32768;
pub const SCB_SHCSR_BUSFAULTPENDED_Pos: u32 = 14;
pub const SCB_SHCSR_BUSFAULTPENDED_Msk: u32 = 16384;
pub const SCB_SHCSR_MEMFAULTPENDED_Pos: u32 = 13;
pub const SCB_SHCSR_MEMFAULTPENDED_Msk: u32 = 8192;
pub const SCB_SHCSR_USGFAULTPENDED_Pos: u32 = 12;
pub const SCB_SHCSR_USGFAULTPENDED_Msk: u32 = 4096;
pub const SCB_SHCSR_SYSTICKACT_Pos: u32 = 11;
pub const SCB_SHCSR_SYSTICKACT_Msk: u32 = 2048;
pub const SCB_SHCSR_PENDSVACT_Pos: u32 = 10;
pub const SCB_SHCSR_PENDSVACT_Msk: u32 = 1024;
pub const SCB_SHCSR_MONITORACT_Pos: u32 = 8;
pub const SCB_SHCSR_MONITORACT_Msk: u32 = 256;
pub const SCB_SHCSR_SVCALLACT_Pos: u32 = 7;
pub const SCB_SHCSR_SVCALLACT_Msk: u32 = 128;
pub const SCB_SHCSR_USGFAULTACT_Pos: u32 = 3;
pub const SCB_SHCSR_USGFAULTACT_Msk: u32 = 8;
pub const SCB_SHCSR_BUSFAULTACT_Pos: u32 = 1;
pub const SCB_SHCSR_BUSFAULTACT_Msk: u32 = 2;
pub const SCB_SHCSR_MEMFAULTACT_Pos: u32 = 0;
pub const SCB_SHCSR_MEMFAULTACT_Msk: u32 = 1;
pub const SCB_CFSR_USGFAULTSR_Pos: u32 = 16;
pub const SCB_CFSR_USGFAULTSR_Msk: u32 = 4294901760;
pub const SCB_CFSR_BUSFAULTSR_Pos: u32 = 8;
pub const SCB_CFSR_BUSFAULTSR_Msk: u32 = 65280;
pub const SCB_CFSR_MEMFAULTSR_Pos: u32 = 0;
pub const SCB_CFSR_MEMFAULTSR_Msk: u32 = 255;
pub const SCB_HFSR_DEBUGEVT_Pos: u32 = 31;
pub const SCB_HFSR_DEBUGEVT_Msk: u32 = 2147483648;
pub const SCB_HFSR_FORCED_Pos: u32 = 30;
pub const SCB_HFSR_FORCED_Msk: u32 = 1073741824;
pub const SCB_HFSR_VECTTBL_Pos: u32 = 1;
pub const SCB_HFSR_VECTTBL_Msk: u32 = 2;
pub const SCB_DFSR_EXTERNAL_Pos: u32 = 4;
pub const SCB_DFSR_EXTERNAL_Msk: u32 = 16;
pub const SCB_DFSR_VCATCH_Pos: u32 = 3;
pub const SCB_DFSR_VCATCH_Msk: u32 = 8;
pub const SCB_DFSR_DWTTRAP_Pos: u32 = 2;
pub const SCB_DFSR_DWTTRAP_Msk: u32 = 4;
pub const SCB_DFSR_BKPT_Pos: u32 = 1;
pub const SCB_DFSR_BKPT_Msk: u32 = 2;
pub const SCB_DFSR_HALTED_Pos: u32 = 0;
pub const SCB_DFSR_HALTED_Msk: u32 = 1;
pub const SCnSCB_ICTR_INTLINESNUM_Pos: u32 = 0;
pub const SCnSCB_ICTR_INTLINESNUM_Msk: u32 = 15;
pub const SCnSCB_ACTLR_DISOOFP_Pos: u32 = 9;
pub const SCnSCB_ACTLR_DISOOFP_Msk: u32 = 512;
pub const SCnSCB_ACTLR_DISFPCA_Pos: u32 = 8;
pub const SCnSCB_ACTLR_DISFPCA_Msk: u32 = 256;
pub const SCnSCB_ACTLR_DISFOLD_Pos: u32 = 2;
pub const SCnSCB_ACTLR_DISFOLD_Msk: u32 = 4;
pub const SCnSCB_ACTLR_DISDEFWBUF_Pos: u32 = 1;
pub const SCnSCB_ACTLR_DISDEFWBUF_Msk: u32 = 2;
pub const SCnSCB_ACTLR_DISMCYCINT_Pos: u32 = 0;
pub const SCnSCB_ACTLR_DISMCYCINT_Msk: u32 = 1;
pub const SysTick_CTRL_COUNTFLAG_Pos: u32 = 16;
pub const SysTick_CTRL_COUNTFLAG_Msk: u32 = 65536;
pub const SysTick_CTRL_CLKSOURCE_Pos: u32 = 2;
pub const SysTick_CTRL_CLKSOURCE_Msk: u32 = 4;
pub const SysTick_CTRL_TICKINT_Pos: u32 = 1;
pub const SysTick_CTRL_TICKINT_Msk: u32 = 2;
pub const SysTick_CTRL_ENABLE_Pos: u32 = 0;
pub const SysTick_CTRL_ENABLE_Msk: u32 = 1;
pub const SysTick_LOAD_RELOAD_Pos: u32 = 0;
pub const SysTick_LOAD_RELOAD_Msk: u32 = 16777215;
pub const SysTick_VAL_CURRENT_Pos: u32 = 0;
pub const SysTick_VAL_CURRENT_Msk: u32 = 16777215;
pub const SysTick_CALIB_NOREF_Pos: u32 = 31;
pub const SysTick_CALIB_NOREF_Msk: u32 = 2147483648;
pub const SysTick_CALIB_SKEW_Pos: u32 = 30;
pub const SysTick_CALIB_SKEW_Msk: u32 = 1073741824;
pub const SysTick_CALIB_TENMS_Pos: u32 = 0;
pub const SysTick_CALIB_TENMS_Msk: u32 = 16777215;
pub const ITM_TPR_PRIVMASK_Pos: u32 = 0;
pub const ITM_TPR_PRIVMASK_Msk: u32 = 15;
pub const ITM_TCR_BUSY_Pos: u32 = 23;
pub const ITM_TCR_BUSY_Msk: u32 = 8388608;
pub const ITM_TCR_TraceBusID_Pos: u32 = 16;
pub const ITM_TCR_TraceBusID_Msk: u32 = 8323072;
pub const ITM_TCR_GTSFREQ_Pos: u32 = 10;
pub const ITM_TCR_GTSFREQ_Msk: u32 = 3072;
pub const ITM_TCR_TSPrescale_Pos: u32 = 8;
pub const ITM_TCR_TSPrescale_Msk: u32 = 768;
pub const ITM_TCR_SWOENA_Pos: u32 = 4;
pub const ITM_TCR_SWOENA_Msk: u32 = 16;
pub const ITM_TCR_DWTENA_Pos: u32 = 3;
pub const ITM_TCR_DWTENA_Msk: u32 = 8;
pub const ITM_TCR_SYNCENA_Pos: u32 = 2;
pub const ITM_TCR_SYNCENA_Msk: u32 = 4;
pub const ITM_TCR_TSENA_Pos: u32 = 1;
pub const ITM_TCR_TSENA_Msk: u32 = 2;
pub const ITM_TCR_ITMENA_Pos: u32 = 0;
pub const ITM_TCR_ITMENA_Msk: u32 = 1;
pub const ITM_IWR_ATVALIDM_Pos: u32 = 0;
pub const ITM_IWR_ATVALIDM_Msk: u32 = 1;
pub const ITM_IRR_ATREADYM_Pos: u32 = 0;
pub const ITM_IRR_ATREADYM_Msk: u32 = 1;
pub const ITM_IMCR_INTEGRATION_Pos: u32 = 0;
pub const ITM_IMCR_INTEGRATION_Msk: u32 = 1;
pub const ITM_LSR_ByteAcc_Pos: u32 = 2;
pub const ITM_LSR_ByteAcc_Msk: u32 = 4;
pub const ITM_LSR_Access_Pos: u32 = 1;
pub const ITM_LSR_Access_Msk: u32 = 2;
pub const ITM_LSR_Present_Pos: u32 = 0;
pub const ITM_LSR_Present_Msk: u32 = 1;
pub const DWT_CTRL_NUMCOMP_Pos: u32 = 28;
pub const DWT_CTRL_NUMCOMP_Msk: u32 = 4026531840;
pub const DWT_CTRL_NOTRCPKT_Pos: u32 = 27;
pub const DWT_CTRL_NOTRCPKT_Msk: u32 = 134217728;
pub const DWT_CTRL_NOEXTTRIG_Pos: u32 = 26;
pub const DWT_CTRL_NOEXTTRIG_Msk: u32 = 67108864;
pub const DWT_CTRL_NOCYCCNT_Pos: u32 = 25;
pub const DWT_CTRL_NOCYCCNT_Msk: u32 = 33554432;
pub const DWT_CTRL_NOPRFCNT_Pos: u32 = 24;
pub const DWT_CTRL_NOPRFCNT_Msk: u32 = 16777216;
pub const DWT_CTRL_CYCEVTENA_Pos: u32 = 22;
pub const DWT_CTRL_CYCEVTENA_Msk: u32 = 4194304;
pub const DWT_CTRL_FOLDEVTENA_Pos: u32 = 21;
pub const DWT_CTRL_FOLDEVTENA_Msk: u32 = 2097152;
pub const DWT_CTRL_LSUEVTENA_Pos: u32 = 20;
pub const DWT_CTRL_LSUEVTENA_Msk: u32 = 1048576;
pub const DWT_CTRL_SLEEPEVTENA_Pos: u32 = 19;
pub const DWT_CTRL_SLEEPEVTENA_Msk: u32 = 524288;
pub const DWT_CTRL_EXCEVTENA_Pos: u32 = 18;
pub const DWT_CTRL_EXCEVTENA_Msk: u32 = 262144;
pub const DWT_CTRL_CPIEVTENA_Pos: u32 = 17;
pub const DWT_CTRL_CPIEVTENA_Msk: u32 = 131072;
pub const DWT_CTRL_EXCTRCENA_Pos: u32 = 16;
pub const DWT_CTRL_EXCTRCENA_Msk: u32 = 65536;
pub const DWT_CTRL_PCSAMPLENA_Pos: u32 = 12;
pub const DWT_CTRL_PCSAMPLENA_Msk: u32 = 4096;
pub const DWT_CTRL_SYNCTAP_Pos: u32 = 10;
pub const DWT_CTRL_SYNCTAP_Msk: u32 = 3072;
pub const DWT_CTRL_CYCTAP_Pos: u32 = 9;
pub const DWT_CTRL_CYCTAP_Msk: u32 = 512;
pub const DWT_CTRL_POSTINIT_Pos: u32 = 5;
pub const DWT_CTRL_POSTINIT_Msk: u32 = 480;
pub const DWT_CTRL_POSTPRESET_Pos: u32 = 1;
pub const DWT_CTRL_POSTPRESET_Msk: u32 = 30;
pub const DWT_CTRL_CYCCNTENA_Pos: u32 = 0;
pub const DWT_CTRL_CYCCNTENA_Msk: u32 = 1;
pub const DWT_CPICNT_CPICNT_Pos: u32 = 0;
pub const DWT_CPICNT_CPICNT_Msk: u32 = 255;
pub const DWT_EXCCNT_EXCCNT_Pos: u32 = 0;
pub const DWT_EXCCNT_EXCCNT_Msk: u32 = 255;
pub const DWT_SLEEPCNT_SLEEPCNT_Pos: u32 = 0;
pub const DWT_SLEEPCNT_SLEEPCNT_Msk: u32 = 255;
pub const DWT_LSUCNT_LSUCNT_Pos: u32 = 0;
pub const DWT_LSUCNT_LSUCNT_Msk: u32 = 255;
pub const DWT_FOLDCNT_FOLDCNT_Pos: u32 = 0;
pub const DWT_FOLDCNT_FOLDCNT_Msk: u32 = 255;
pub const DWT_MASK_MASK_Pos: u32 = 0;
pub const DWT_MASK_MASK_Msk: u32 = 31;
pub const DWT_FUNCTION_MATCHED_Pos: u32 = 24;
pub const DWT_FUNCTION_MATCHED_Msk: u32 = 16777216;
pub const DWT_FUNCTION_DATAVADDR1_Pos: u32 = 16;
pub const DWT_FUNCTION_DATAVADDR1_Msk: u32 = 983040;
pub const DWT_FUNCTION_DATAVADDR0_Pos: u32 = 12;
pub const DWT_FUNCTION_DATAVADDR0_Msk: u32 = 61440;
pub const DWT_FUNCTION_DATAVSIZE_Pos: u32 = 10;
pub const DWT_FUNCTION_DATAVSIZE_Msk: u32 = 3072;
pub const DWT_FUNCTION_LNK1ENA_Pos: u32 = 9;
pub const DWT_FUNCTION_LNK1ENA_Msk: u32 = 512;
pub const DWT_FUNCTION_DATAVMATCH_Pos: u32 = 8;
pub const DWT_FUNCTION_DATAVMATCH_Msk: u32 = 256;
pub const DWT_FUNCTION_CYCMATCH_Pos: u32 = 7;
pub const DWT_FUNCTION_CYCMATCH_Msk: u32 = 128;
pub const DWT_FUNCTION_EMITRANGE_Pos: u32 = 5;
pub const DWT_FUNCTION_EMITRANGE_Msk: u32 = 32;
pub const DWT_FUNCTION_FUNCTION_Pos: u32 = 0;
pub const DWT_FUNCTION_FUNCTION_Msk: u32 = 15;
pub const TPI_ACPR_PRESCALER_Pos: u32 = 0;
pub const TPI_ACPR_PRESCALER_Msk: u32 = 8191;
pub const TPI_SPPR_TXMODE_Pos: u32 = 0;
pub const TPI_SPPR_TXMODE_Msk: u32 = 3;
pub const TPI_FFSR_FtNonStop_Pos: u32 = 3;
pub const TPI_FFSR_FtNonStop_Msk: u32 = 8;
pub const TPI_FFSR_TCPresent_Pos: u32 = 2;
pub const TPI_FFSR_TCPresent_Msk: u32 = 4;
pub const TPI_FFSR_FtStopped_Pos: u32 = 1;
pub const TPI_FFSR_FtStopped_Msk: u32 = 2;
pub const TPI_FFSR_FlInProg_Pos: u32 = 0;
pub const TPI_FFSR_FlInProg_Msk: u32 = 1;
pub const TPI_FFCR_TrigIn_Pos: u32 = 8;
pub const TPI_FFCR_TrigIn_Msk: u32 = 256;
pub const TPI_FFCR_EnFCont_Pos: u32 = 1;
pub const TPI_FFCR_EnFCont_Msk: u32 = 2;
pub const TPI_TRIGGER_TRIGGER_Pos: u32 = 0;
pub const TPI_TRIGGER_TRIGGER_Msk: u32 = 1;
pub const TPI_FIFO0_ITM_ATVALID_Pos: u32 = 29;
pub const TPI_FIFO0_ITM_ATVALID_Msk: u32 = 1610612736;
pub const TPI_FIFO0_ITM_bytecount_Pos: u32 = 27;
pub const TPI_FIFO0_ITM_bytecount_Msk: u32 = 402653184;
pub const TPI_FIFO0_ETM_ATVALID_Pos: u32 = 26;
pub const TPI_FIFO0_ETM_ATVALID_Msk: u32 = 201326592;
pub const TPI_FIFO0_ETM_bytecount_Pos: u32 = 24;
pub const TPI_FIFO0_ETM_bytecount_Msk: u32 = 50331648;
pub const TPI_FIFO0_ETM2_Pos: u32 = 16;
pub const TPI_FIFO0_ETM2_Msk: u32 = 16711680;
pub const TPI_FIFO0_ETM1_Pos: u32 = 8;
pub const TPI_FIFO0_ETM1_Msk: u32 = 65280;
pub const TPI_FIFO0_ETM0_Pos: u32 = 0;
pub const TPI_FIFO0_ETM0_Msk: u32 = 255;
pub const TPI_ITATBCTR2_ATREADY_Pos: u32 = 0;
pub const TPI_ITATBCTR2_ATREADY_Msk: u32 = 1;
pub const TPI_FIFO1_ITM_ATVALID_Pos: u32 = 29;
pub const TPI_FIFO1_ITM_ATVALID_Msk: u32 = 1610612736;
pub const TPI_FIFO1_ITM_bytecount_Pos: u32 = 27;
pub const TPI_FIFO1_ITM_bytecount_Msk: u32 = 402653184;
pub const TPI_FIFO1_ETM_ATVALID_Pos: u32 = 26;
pub const TPI_FIFO1_ETM_ATVALID_Msk: u32 = 201326592;
pub const TPI_FIFO1_ETM_bytecount_Pos: u32 = 24;
pub const TPI_FIFO1_ETM_bytecount_Msk: u32 = 50331648;
pub const TPI_FIFO1_ITM2_Pos: u32 = 16;
pub const TPI_FIFO1_ITM2_Msk: u32 = 16711680;
pub const TPI_FIFO1_ITM1_Pos: u32 = 8;
pub const TPI_FIFO1_ITM1_Msk: u32 = 65280;
pub const TPI_FIFO1_ITM0_Pos: u32 = 0;
pub const TPI_FIFO1_ITM0_Msk: u32 = 255;
pub const TPI_ITATBCTR0_ATREADY_Pos: u32 = 0;
pub const TPI_ITATBCTR0_ATREADY_Msk: u32 = 1;
pub const TPI_ITCTRL_Mode_Pos: u32 = 0;
pub const TPI_ITCTRL_Mode_Msk: u32 = 1;
pub const TPI_DEVID_NRZVALID_Pos: u32 = 11;
pub const TPI_DEVID_NRZVALID_Msk: u32 = 2048;
pub const TPI_DEVID_MANCVALID_Pos: u32 = 10;
pub const TPI_DEVID_MANCVALID_Msk: u32 = 1024;
pub const TPI_DEVID_PTINVALID_Pos: u32 = 9;
pub const TPI_DEVID_PTINVALID_Msk: u32 = 512;
pub const TPI_DEVID_MinBufSz_Pos: u32 = 6;
pub const TPI_DEVID_MinBufSz_Msk: u32 = 448;
pub const TPI_DEVID_AsynClkIn_Pos: u32 = 5;
pub const TPI_DEVID_AsynClkIn_Msk: u32 = 32;
pub const TPI_DEVID_NrTraceInput_Pos: u32 = 0;
pub const TPI_DEVID_NrTraceInput_Msk: u32 = 31;
pub const TPI_DEVTYPE_MajorType_Pos: u32 = 4;
pub const TPI_DEVTYPE_MajorType_Msk: u32 = 240;
pub const TPI_DEVTYPE_SubType_Pos: u32 = 0;
pub const TPI_DEVTYPE_SubType_Msk: u32 = 15;
pub const MPU_TYPE_IREGION_Pos: u32 = 16;
pub const MPU_TYPE_IREGION_Msk: u32 = 16711680;
pub const MPU_TYPE_DREGION_Pos: u32 = 8;
pub const MPU_TYPE_DREGION_Msk: u32 = 65280;
pub const MPU_TYPE_SEPARATE_Pos: u32 = 0;
pub const MPU_TYPE_SEPARATE_Msk: u32 = 1;
pub const MPU_CTRL_PRIVDEFENA_Pos: u32 = 2;
pub const MPU_CTRL_PRIVDEFENA_Msk: u32 = 4;
pub const MPU_CTRL_HFNMIENA_Pos: u32 = 1;
pub const MPU_CTRL_HFNMIENA_Msk: u32 = 2;
pub const MPU_CTRL_ENABLE_Pos: u32 = 0;
pub const MPU_CTRL_ENABLE_Msk: u32 = 1;
pub const MPU_RNR_REGION_Pos: u32 = 0;
pub const MPU_RNR_REGION_Msk: u32 = 255;
pub const MPU_RBAR_ADDR_Pos: u32 = 5;
pub const MPU_RBAR_ADDR_Msk: u32 = 4294967264;
pub const MPU_RBAR_VALID_Pos: u32 = 4;
pub const MPU_RBAR_VALID_Msk: u32 = 16;
pub const MPU_RBAR_REGION_Pos: u32 = 0;
pub const MPU_RBAR_REGION_Msk: u32 = 15;
pub const MPU_RASR_ATTRS_Pos: u32 = 16;
pub const MPU_RASR_ATTRS_Msk: u32 = 4294901760;
pub const MPU_RASR_XN_Pos: u32 = 28;
pub const MPU_RASR_XN_Msk: u32 = 268435456;
pub const MPU_RASR_AP_Pos: u32 = 24;
pub const MPU_RASR_AP_Msk: u32 = 117440512;
pub const MPU_RASR_TEX_Pos: u32 = 19;
pub const MPU_RASR_TEX_Msk: u32 = 3670016;
pub const MPU_RASR_S_Pos: u32 = 18;
pub const MPU_RASR_S_Msk: u32 = 262144;
pub const MPU_RASR_C_Pos: u32 = 17;
pub const MPU_RASR_C_Msk: u32 = 131072;
pub const MPU_RASR_B_Pos: u32 = 16;
pub const MPU_RASR_B_Msk: u32 = 65536;
pub const MPU_RASR_SRD_Pos: u32 = 8;
pub const MPU_RASR_SRD_Msk: u32 = 65280;
pub const MPU_RASR_SIZE_Pos: u32 = 1;
pub const MPU_RASR_SIZE_Msk: u32 = 62;
pub const MPU_RASR_ENABLE_Pos: u32 = 0;
pub const MPU_RASR_ENABLE_Msk: u32 = 1;
pub const FPU_FPCCR_ASPEN_Pos: u32 = 31;
pub const FPU_FPCCR_ASPEN_Msk: u32 = 2147483648;
pub const FPU_FPCCR_LSPEN_Pos: u32 = 30;
pub const FPU_FPCCR_LSPEN_Msk: u32 = 1073741824;
pub const FPU_FPCCR_MONRDY_Pos: u32 = 8;
pub const FPU_FPCCR_MONRDY_Msk: u32 = 256;
pub const FPU_FPCCR_BFRDY_Pos: u32 = 6;
pub const FPU_FPCCR_BFRDY_Msk: u32 = 64;
pub const FPU_FPCCR_MMRDY_Pos: u32 = 5;
pub const FPU_FPCCR_MMRDY_Msk: u32 = 32;
pub const FPU_FPCCR_HFRDY_Pos: u32 = 4;
pub const FPU_FPCCR_HFRDY_Msk: u32 = 16;
pub const FPU_FPCCR_THREAD_Pos: u32 = 3;
pub const FPU_FPCCR_THREAD_Msk: u32 = 8;
pub const FPU_FPCCR_USER_Pos: u32 = 1;
pub const FPU_FPCCR_USER_Msk: u32 = 2;
pub const FPU_FPCCR_LSPACT_Pos: u32 = 0;
pub const FPU_FPCCR_LSPACT_Msk: u32 = 1;
pub const FPU_FPCAR_ADDRESS_Pos: u32 = 3;
pub const FPU_FPCAR_ADDRESS_Msk: u32 = 4294967288;
pub const FPU_FPDSCR_AHP_Pos: u32 = 26;
pub const FPU_FPDSCR_AHP_Msk: u32 = 67108864;
pub const FPU_FPDSCR_DN_Pos: u32 = 25;
pub const FPU_FPDSCR_DN_Msk: u32 = 33554432;
pub const FPU_FPDSCR_FZ_Pos: u32 = 24;
pub const FPU_FPDSCR_FZ_Msk: u32 = 16777216;
pub const FPU_FPDSCR_RMode_Pos: u32 = 22;
pub const FPU_FPDSCR_RMode_Msk: u32 = 12582912;
pub const FPU_MVFR0_FP_rounding_modes_Pos: u32 = 28;
pub const FPU_MVFR0_FP_rounding_modes_Msk: u32 = 4026531840;
pub const FPU_MVFR0_Short_vectors_Pos: u32 = 24;
pub const FPU_MVFR0_Short_vectors_Msk: u32 = 251658240;
pub const FPU_MVFR0_Square_root_Pos: u32 = 20;
pub const FPU_MVFR0_Square_root_Msk: u32 = 15728640;
pub const FPU_MVFR0_Divide_Pos: u32 = 16;
pub const FPU_MVFR0_Divide_Msk: u32 = 983040;
pub const FPU_MVFR0_FP_excep_trapping_Pos: u32 = 12;
pub const FPU_MVFR0_FP_excep_trapping_Msk: u32 = 61440;
pub const FPU_MVFR0_Double_precision_Pos: u32 = 8;
pub const FPU_MVFR0_Double_precision_Msk: u32 = 3840;
pub const FPU_MVFR0_Single_precision_Pos: u32 = 4;
pub const FPU_MVFR0_Single_precision_Msk: u32 = 240;
pub const FPU_MVFR0_A_SIMD_registers_Pos: u32 = 0;
pub const FPU_MVFR0_A_SIMD_registers_Msk: u32 = 15;
pub const FPU_MVFR1_FP_fused_MAC_Pos: u32 = 28;
pub const FPU_MVFR1_FP_fused_MAC_Msk: u32 = 4026531840;
pub const FPU_MVFR1_FP_HPFP_Pos: u32 = 24;
pub const FPU_MVFR1_FP_HPFP_Msk: u32 = 251658240;
pub const FPU_MVFR1_D_NaN_mode_Pos: u32 = 4;
pub const FPU_MVFR1_D_NaN_mode_Msk: u32 = 240;
pub const FPU_MVFR1_FtZ_mode_Pos: u32 = 0;
pub const FPU_MVFR1_FtZ_mode_Msk: u32 = 15;
pub const CoreDebug_DHCSR_DBGKEY_Pos: u32 = 16;
pub const CoreDebug_DHCSR_DBGKEY_Msk: u32 = 4294901760;
pub const CoreDebug_DHCSR_S_RESET_ST_Pos: u32 = 25;
pub const CoreDebug_DHCSR_S_RESET_ST_Msk: u32 = 33554432;
pub const CoreDebug_DHCSR_S_RETIRE_ST_Pos: u32 = 24;
pub const CoreDebug_DHCSR_S_RETIRE_ST_Msk: u32 = 16777216;
pub const CoreDebug_DHCSR_S_LOCKUP_Pos: u32 = 19;
pub const CoreDebug_DHCSR_S_LOCKUP_Msk: u32 = 524288;
pub const CoreDebug_DHCSR_S_SLEEP_Pos: u32 = 18;
pub const CoreDebug_DHCSR_S_SLEEP_Msk: u32 = 262144;
pub const CoreDebug_DHCSR_S_HALT_Pos: u32 = 17;
pub const CoreDebug_DHCSR_S_HALT_Msk: u32 = 131072;
pub const CoreDebug_DHCSR_S_REGRDY_Pos: u32 = 16;
pub const CoreDebug_DHCSR_S_REGRDY_Msk: u32 = 65536;
pub const CoreDebug_DHCSR_C_SNAPSTALL_Pos: u32 = 5;
pub const CoreDebug_DHCSR_C_SNAPSTALL_Msk: u32 = 32;
pub const CoreDebug_DHCSR_C_MASKINTS_Pos: u32 = 3;
pub const CoreDebug_DHCSR_C_MASKINTS_Msk: u32 = 8;
pub const CoreDebug_DHCSR_C_STEP_Pos: u32 = 2;
pub const CoreDebug_DHCSR_C_STEP_Msk: u32 = 4;
pub const CoreDebug_DHCSR_C_HALT_Pos: u32 = 1;
pub const CoreDebug_DHCSR_C_HALT_Msk: u32 = 2;
pub const CoreDebug_DHCSR_C_DEBUGEN_Pos: u32 = 0;
pub const CoreDebug_DHCSR_C_DEBUGEN_Msk: u32 = 1;
pub const CoreDebug_DCRSR_REGWnR_Pos: u32 = 16;
pub const CoreDebug_DCRSR_REGWnR_Msk: u32 = 65536;
pub const CoreDebug_DCRSR_REGSEL_Pos: u32 = 0;
pub const CoreDebug_DCRSR_REGSEL_Msk: u32 = 31;
pub const CoreDebug_DEMCR_TRCENA_Pos: u32 = 24;
pub const CoreDebug_DEMCR_TRCENA_Msk: u32 = 16777216;
pub const CoreDebug_DEMCR_MON_REQ_Pos: u32 = 19;
pub const CoreDebug_DEMCR_MON_REQ_Msk: u32 = 524288;
pub const CoreDebug_DEMCR_MON_STEP_Pos: u32 = 18;
pub const CoreDebug_DEMCR_MON_STEP_Msk: u32 = 262144;
pub const CoreDebug_DEMCR_MON_PEND_Pos: u32 = 17;
pub const CoreDebug_DEMCR_MON_PEND_Msk: u32 = 131072;
pub const CoreDebug_DEMCR_MON_EN_Pos: u32 = 16;
pub const CoreDebug_DEMCR_MON_EN_Msk: u32 = 65536;
pub const CoreDebug_DEMCR_VC_HARDERR_Pos: u32 = 10;
pub const CoreDebug_DEMCR_VC_HARDERR_Msk: u32 = 1024;
pub const CoreDebug_DEMCR_VC_INTERR_Pos: u32 = 9;
pub const CoreDebug_DEMCR_VC_INTERR_Msk: u32 = 512;
pub const CoreDebug_DEMCR_VC_BUSERR_Pos: u32 = 8;
pub const CoreDebug_DEMCR_VC_BUSERR_Msk: u32 = 256;
pub const CoreDebug_DEMCR_VC_STATERR_Pos: u32 = 7;
pub const CoreDebug_DEMCR_VC_STATERR_Msk: u32 = 128;
pub const CoreDebug_DEMCR_VC_CHKERR_Pos: u32 = 6;
pub const CoreDebug_DEMCR_VC_CHKERR_Msk: u32 = 64;
pub const CoreDebug_DEMCR_VC_NOCPERR_Pos: u32 = 5;
pub const CoreDebug_DEMCR_VC_NOCPERR_Msk: u32 = 32;
pub const CoreDebug_DEMCR_VC_MMERR_Pos: u32 = 4;
pub const CoreDebug_DEMCR_VC_MMERR_Msk: u32 = 16;
pub const CoreDebug_DEMCR_VC_CORERESET_Pos: u32 = 0;
pub const CoreDebug_DEMCR_VC_CORERESET_Msk: u32 = 1;
pub const SCS_BASE: u32 = 3758153728;
pub const ITM_BASE: u32 = 3758096384;
pub const DWT_BASE: u32 = 3758100480;
pub const TPI_BASE: u32 = 3758358528;
pub const CoreDebug_BASE: u32 = 3758157296;
pub const SysTick_BASE: u32 = 3758153744;
pub const NVIC_BASE: u32 = 3758153984;
pub const SCB_BASE: u32 = 3758157056;
pub const MPU_BASE: u32 = 3758157200;
pub const FPU_BASE: u32 = 3758157616;
pub const ITM_RXBUFFER_EMPTY: u32 = 1520786085;
pub const FLASH_BASE: u32 = 134217728;
pub const SRAM1_BASE: u32 = 536870912;
pub const PERIPH_BASE: u32 = 1073741824;
pub const BKPSRAM_BASE: u32 = 1073889280;
pub const SRAM1_BB_BASE: u32 = 570425344;
pub const PERIPH_BB_BASE: u32 = 1107296256;
pub const BKPSRAM_BB_BASE: u32 = 1112014848;
pub const FLASH_END: u32 = 134742015;
pub const FLASH_OTP_BASE: u32 = 536836096;
pub const FLASH_OTP_END: u32 = 536836623;
pub const SRAM_BASE: u32 = 536870912;
pub const SRAM_BB_BASE: u32 = 570425344;
pub const APB1PERIPH_BASE: u32 = 1073741824;
pub const APB2PERIPH_BASE: u32 = 1073807360;
pub const AHB1PERIPH_BASE: u32 = 1073872896;
pub const AHB2PERIPH_BASE: u32 = 1342177280;
pub const TIM2_BASE: u32 = 1073741824;
pub const TIM3_BASE: u32 = 1073742848;
pub const TIM4_BASE: u32 = 1073743872;
pub const TIM5_BASE: u32 = 1073744896;
pub const RTC_BASE: u32 = 1073752064;
pub const WWDG_BASE: u32 = 1073753088;
pub const IWDG_BASE: u32 = 1073754112;
pub const I2S2ext_BASE: u32 = 1073755136;
pub const SPI2_BASE: u32 = 1073756160;
pub const SPI3_BASE: u32 = 1073757184;
pub const I2S3ext_BASE: u32 = 1073758208;
pub const USART2_BASE: u32 = 1073759232;
pub const I2C1_BASE: u32 = 1073763328;
pub const I2C2_BASE: u32 = 1073764352;
pub const I2C3_BASE: u32 = 1073765376;
pub const PWR_BASE: u32 = 1073770496;
pub const TIM1_BASE: u32 = 1073807360;
pub const USART1_BASE: u32 = 1073811456;
pub const USART6_BASE: u32 = 1073812480;
pub const ADC1_BASE: u32 = 1073815552;
pub const ADC1_COMMON_BASE: u32 = 1073816320;
pub const ADC_BASE: u32 = 1073816320;
pub const SDIO_BASE: u32 = 1073818624;
pub const SPI1_BASE: u32 = 1073819648;
pub const SPI4_BASE: u32 = 1073820672;
pub const SYSCFG_BASE: u32 = 1073821696;
pub const EXTI_BASE: u32 = 1073822720;
pub const TIM9_BASE: u32 = 1073823744;
pub const TIM10_BASE: u32 = 1073824768;
pub const TIM11_BASE: u32 = 1073825792;
pub const GPIOA_BASE: u32 = 1073872896;
pub const GPIOB_BASE: u32 = 1073873920;
pub const GPIOC_BASE: u32 = 1073874944;
pub const GPIOD_BASE: u32 = 1073875968;
pub const GPIOE_BASE: u32 = 1073876992;
pub const GPIOH_BASE: u32 = 1073880064;
pub const CRC_BASE: u32 = 1073885184;
pub const RCC_BASE: u32 = 1073887232;
pub const FLASH_R_BASE: u32 = 1073888256;
pub const DMA1_BASE: u32 = 1073897472;
pub const DMA1_Stream0_BASE: u32 = 1073897488;
pub const DMA1_Stream1_BASE: u32 = 1073897512;
pub const DMA1_Stream2_BASE: u32 = 1073897536;
pub const DMA1_Stream3_BASE: u32 = 1073897560;
pub const DMA1_Stream4_BASE: u32 = 1073897584;
pub const DMA1_Stream5_BASE: u32 = 1073897608;
pub const DMA1_Stream6_BASE: u32 = 1073897632;
pub const DMA1_Stream7_BASE: u32 = 1073897656;
pub const DMA2_BASE: u32 = 1073898496;
pub const DMA2_Stream0_BASE: u32 = 1073898512;
pub const DMA2_Stream1_BASE: u32 = 1073898536;
pub const DMA2_Stream2_BASE: u32 = 1073898560;
pub const DMA2_Stream3_BASE: u32 = 1073898584;
pub const DMA2_Stream4_BASE: u32 = 1073898608;
pub const DMA2_Stream5_BASE: u32 = 1073898632;
pub const DMA2_Stream6_BASE: u32 = 1073898656;
pub const DMA2_Stream7_BASE: u32 = 1073898680;
pub const DBGMCU_BASE: u32 = 3758366720;
pub const USB_OTG_FS_PERIPH_BASE: u32 = 1342177280;
pub const USB_OTG_GLOBAL_BASE: u32 = 0;
pub const USB_OTG_DEVICE_BASE: u32 = 2048;
pub const USB_OTG_IN_ENDPOINT_BASE: u32 = 2304;
pub const USB_OTG_OUT_ENDPOINT_BASE: u32 = 2816;
pub const USB_OTG_EP_REG_SIZE: u32 = 32;
pub const USB_OTG_HOST_BASE: u32 = 1024;
pub const USB_OTG_HOST_PORT_BASE: u32 = 1088;
pub const USB_OTG_HOST_CHANNEL_BASE: u32 = 1280;
pub const USB_OTG_HOST_CHANNEL_SIZE: u32 = 32;
pub const USB_OTG_PCGCCTL_BASE: u32 = 3584;
pub const USB_OTG_FIFO_BASE: u32 = 4096;
pub const USB_OTG_FIFO_SIZE: u32 = 4096;
pub const UID_BASE: u32 = 536836624;
pub const FLASHSIZE_BASE: u32 = 536836642;
pub const PACKAGE_BASE: u32 = 536837104;
pub const ADC_SR_AWD_Pos: u32 = 0;
pub const ADC_SR_AWD_Msk: u32 = 1;
pub const ADC_SR_AWD: u32 = 1;
pub const ADC_SR_EOC_Pos: u32 = 1;
pub const ADC_SR_EOC_Msk: u32 = 2;
pub const ADC_SR_EOC: u32 = 2;
pub const ADC_SR_JEOC_Pos: u32 = 2;
pub const ADC_SR_JEOC_Msk: u32 = 4;
pub const ADC_SR_JEOC: u32 = 4;
pub const ADC_SR_JSTRT_Pos: u32 = 3;
pub const ADC_SR_JSTRT_Msk: u32 = 8;
pub const ADC_SR_JSTRT: u32 = 8;
pub const ADC_SR_STRT_Pos: u32 = 4;
pub const ADC_SR_STRT_Msk: u32 = 16;
pub const ADC_SR_STRT: u32 = 16;
pub const ADC_SR_OVR_Pos: u32 = 5;
pub const ADC_SR_OVR_Msk: u32 = 32;
pub const ADC_SR_OVR: u32 = 32;
pub const ADC_CR1_AWDCH_Pos: u32 = 0;
pub const ADC_CR1_AWDCH_Msk: u32 = 31;
pub const ADC_CR1_AWDCH: u32 = 31;
pub const ADC_CR1_AWDCH_0: u32 = 1;
pub const ADC_CR1_AWDCH_1: u32 = 2;
pub const ADC_CR1_AWDCH_2: u32 = 4;
pub const ADC_CR1_AWDCH_3: u32 = 8;
pub const ADC_CR1_AWDCH_4: u32 = 16;
pub const ADC_CR1_EOCIE_Pos: u32 = 5;
pub const ADC_CR1_EOCIE_Msk: u32 = 32;
pub const ADC_CR1_EOCIE: u32 = 32;
pub const ADC_CR1_AWDIE_Pos: u32 = 6;
pub const ADC_CR1_AWDIE_Msk: u32 = 64;
pub const ADC_CR1_AWDIE: u32 = 64;
pub const ADC_CR1_JEOCIE_Pos: u32 = 7;
pub const ADC_CR1_JEOCIE_Msk: u32 = 128;
pub const ADC_CR1_JEOCIE: u32 = 128;
pub const ADC_CR1_SCAN_Pos: u32 = 8;
pub const ADC_CR1_SCAN_Msk: u32 = 256;
pub const ADC_CR1_SCAN: u32 = 256;
pub const ADC_CR1_AWDSGL_Pos: u32 = 9;
pub const ADC_CR1_AWDSGL_Msk: u32 = 512;
pub const ADC_CR1_AWDSGL: u32 = 512;
pub const ADC_CR1_JAUTO_Pos: u32 = 10;
pub const ADC_CR1_JAUTO_Msk: u32 = 1024;
pub const ADC_CR1_JAUTO: u32 = 1024;
pub const ADC_CR1_DISCEN_Pos: u32 = 11;
pub const ADC_CR1_DISCEN_Msk: u32 = 2048;
pub const ADC_CR1_DISCEN: u32 = 2048;
pub const ADC_CR1_JDISCEN_Pos: u32 = 12;
pub const ADC_CR1_JDISCEN_Msk: u32 = 4096;
pub const ADC_CR1_JDISCEN: u32 = 4096;
pub const ADC_CR1_DISCNUM_Pos: u32 = 13;
pub const ADC_CR1_DISCNUM_Msk: u32 = 57344;
pub const ADC_CR1_DISCNUM: u32 = 57344;
pub const ADC_CR1_DISCNUM_0: u32 = 8192;
pub const ADC_CR1_DISCNUM_1: u32 = 16384;
pub const ADC_CR1_DISCNUM_2: u32 = 32768;
pub const ADC_CR1_JAWDEN_Pos: u32 = 22;
pub const ADC_CR1_JAWDEN_Msk: u32 = 4194304;
pub const ADC_CR1_JAWDEN: u32 = 4194304;
pub const ADC_CR1_AWDEN_Pos: u32 = 23;
pub const ADC_CR1_AWDEN_Msk: u32 = 8388608;
pub const ADC_CR1_AWDEN: u32 = 8388608;
pub const ADC_CR1_RES_Pos: u32 = 24;
pub const ADC_CR1_RES_Msk: u32 = 50331648;
pub const ADC_CR1_RES: u32 = 50331648;
pub const ADC_CR1_RES_0: u32 = 16777216;
pub const ADC_CR1_RES_1: u32 = 33554432;
pub const ADC_CR1_OVRIE_Pos: u32 = 26;
pub const ADC_CR1_OVRIE_Msk: u32 = 67108864;
pub const ADC_CR1_OVRIE: u32 = 67108864;
pub const ADC_CR2_ADON_Pos: u32 = 0;
pub const ADC_CR2_ADON_Msk: u32 = 1;
pub const ADC_CR2_ADON: u32 = 1;
pub const ADC_CR2_CONT_Pos: u32 = 1;
pub const ADC_CR2_CONT_Msk: u32 = 2;
pub const ADC_CR2_CONT: u32 = 2;
pub const ADC_CR2_DMA_Pos: u32 = 8;
pub const ADC_CR2_DMA_Msk: u32 = 256;
pub const ADC_CR2_DMA: u32 = 256;
pub const ADC_CR2_DDS_Pos: u32 = 9;
pub const ADC_CR2_DDS_Msk: u32 = 512;
pub const ADC_CR2_DDS: u32 = 512;
pub const ADC_CR2_EOCS_Pos: u32 = 10;
pub const ADC_CR2_EOCS_Msk: u32 = 1024;
pub const ADC_CR2_EOCS: u32 = 1024;
pub const ADC_CR2_ALIGN_Pos: u32 = 11;
pub const ADC_CR2_ALIGN_Msk: u32 = 2048;
pub const ADC_CR2_ALIGN: u32 = 2048;
pub const ADC_CR2_JEXTSEL_Pos: u32 = 16;
pub const ADC_CR2_JEXTSEL_Msk: u32 = 983040;
pub const ADC_CR2_JEXTSEL: u32 = 983040;
pub const ADC_CR2_JEXTSEL_0: u32 = 65536;
pub const ADC_CR2_JEXTSEL_1: u32 = 131072;
pub const ADC_CR2_JEXTSEL_2: u32 = 262144;
pub const ADC_CR2_JEXTSEL_3: u32 = 524288;
pub const ADC_CR2_JEXTEN_Pos: u32 = 20;
pub const ADC_CR2_JEXTEN_Msk: u32 = 3145728;
pub const ADC_CR2_JEXTEN: u32 = 3145728;
pub const ADC_CR2_JEXTEN_0: u32 = 1048576;
pub const ADC_CR2_JEXTEN_1: u32 = 2097152;
pub const ADC_CR2_JSWSTART_Pos: u32 = 22;
pub const ADC_CR2_JSWSTART_Msk: u32 = 4194304;
pub const ADC_CR2_JSWSTART: u32 = 4194304;
pub const ADC_CR2_EXTSEL_Pos: u32 = 24;
pub const ADC_CR2_EXTSEL_Msk: u32 = 251658240;
pub const ADC_CR2_EXTSEL: u32 = 251658240;
pub const ADC_CR2_EXTSEL_0: u32 = 16777216;
pub const ADC_CR2_EXTSEL_1: u32 = 33554432;
pub const ADC_CR2_EXTSEL_2: u32 = 67108864;
pub const ADC_CR2_EXTSEL_3: u32 = 134217728;
pub const ADC_CR2_EXTEN_Pos: u32 = 28;
pub const ADC_CR2_EXTEN_Msk: u32 = 805306368;
pub const ADC_CR2_EXTEN: u32 = 805306368;
pub const ADC_CR2_EXTEN_0: u32 = 268435456;
pub const ADC_CR2_EXTEN_1: u32 = 536870912;
pub const ADC_CR2_SWSTART_Pos: u32 = 30;
pub const ADC_CR2_SWSTART_Msk: u32 = 1073741824;
pub const ADC_CR2_SWSTART: u32 = 1073741824;
pub const ADC_SMPR1_SMP10_Pos: u32 = 0;
pub const ADC_SMPR1_SMP10_Msk: u32 = 7;
pub const ADC_SMPR1_SMP10: u32 = 7;
pub const ADC_SMPR1_SMP10_0: u32 = 1;
pub const ADC_SMPR1_SMP10_1: u32 = 2;
pub const ADC_SMPR1_SMP10_2: u32 = 4;
pub const ADC_SMPR1_SMP11_Pos: u32 = 3;
pub const ADC_SMPR1_SMP11_Msk: u32 = 56;
pub const ADC_SMPR1_SMP11: u32 = 56;
pub const ADC_SMPR1_SMP11_0: u32 = 8;
pub const ADC_SMPR1_SMP11_1: u32 = 16;
pub const ADC_SMPR1_SMP11_2: u32 = 32;
pub const ADC_SMPR1_SMP12_Pos: u32 = 6;
pub const ADC_SMPR1_SMP12_Msk: u32 = 448;
pub const ADC_SMPR1_SMP12: u32 = 448;
pub const ADC_SMPR1_SMP12_0: u32 = 64;
pub const ADC_SMPR1_SMP12_1: u32 = 128;
pub const ADC_SMPR1_SMP12_2: u32 = 256;
pub const ADC_SMPR1_SMP13_Pos: u32 = 9;
pub const ADC_SMPR1_SMP13_Msk: u32 = 3584;
pub const ADC_SMPR1_SMP13: u32 = 3584;
pub const ADC_SMPR1_SMP13_0: u32 = 512;
pub const ADC_SMPR1_SMP13_1: u32 = 1024;
pub const ADC_SMPR1_SMP13_2: u32 = 2048;
pub const ADC_SMPR1_SMP14_Pos: u32 = 12;
pub const ADC_SMPR1_SMP14_Msk: u32 = 28672;
pub const ADC_SMPR1_SMP14: u32 = 28672;
pub const ADC_SMPR1_SMP14_0: u32 = 4096;
pub const ADC_SMPR1_SMP14_1: u32 = 8192;
pub const ADC_SMPR1_SMP14_2: u32 = 16384;
pub const ADC_SMPR1_SMP15_Pos: u32 = 15;
pub const ADC_SMPR1_SMP15_Msk: u32 = 229376;
pub const ADC_SMPR1_SMP15: u32 = 229376;
pub const ADC_SMPR1_SMP15_0: u32 = 32768;
pub const ADC_SMPR1_SMP15_1: u32 = 65536;
pub const ADC_SMPR1_SMP15_2: u32 = 131072;
pub const ADC_SMPR1_SMP16_Pos: u32 = 18;
pub const ADC_SMPR1_SMP16_Msk: u32 = 1835008;
pub const ADC_SMPR1_SMP16: u32 = 1835008;
pub const ADC_SMPR1_SMP16_0: u32 = 262144;
pub const ADC_SMPR1_SMP16_1: u32 = 524288;
pub const ADC_SMPR1_SMP16_2: u32 = 1048576;
pub const ADC_SMPR1_SMP17_Pos: u32 = 21;
pub const ADC_SMPR1_SMP17_Msk: u32 = 14680064;
pub const ADC_SMPR1_SMP17: u32 = 14680064;
pub const ADC_SMPR1_SMP17_0: u32 = 2097152;
pub const ADC_SMPR1_SMP17_1: u32 = 4194304;
pub const ADC_SMPR1_SMP17_2: u32 = 8388608;
pub const ADC_SMPR1_SMP18_Pos: u32 = 24;
pub const ADC_SMPR1_SMP18_Msk: u32 = 117440512;
pub const ADC_SMPR1_SMP18: u32 = 117440512;
pub const ADC_SMPR1_SMP18_0: u32 = 16777216;
pub const ADC_SMPR1_SMP18_1: u32 = 33554432;
pub const ADC_SMPR1_SMP18_2: u32 = 67108864;
pub const ADC_SMPR2_SMP0_Pos: u32 = 0;
pub const ADC_SMPR2_SMP0_Msk: u32 = 7;
pub const ADC_SMPR2_SMP0: u32 = 7;
pub const ADC_SMPR2_SMP0_0: u32 = 1;
pub const ADC_SMPR2_SMP0_1: u32 = 2;
pub const ADC_SMPR2_SMP0_2: u32 = 4;
pub const ADC_SMPR2_SMP1_Pos: u32 = 3;
pub const ADC_SMPR2_SMP1_Msk: u32 = 56;
pub const ADC_SMPR2_SMP1: u32 = 56;
pub const ADC_SMPR2_SMP1_0: u32 = 8;
pub const ADC_SMPR2_SMP1_1: u32 = 16;
pub const ADC_SMPR2_SMP1_2: u32 = 32;
pub const ADC_SMPR2_SMP2_Pos: u32 = 6;
pub const ADC_SMPR2_SMP2_Msk: u32 = 448;
pub const ADC_SMPR2_SMP2: u32 = 448;
pub const ADC_SMPR2_SMP2_0: u32 = 64;
pub const ADC_SMPR2_SMP2_1: u32 = 128;
pub const ADC_SMPR2_SMP2_2: u32 = 256;
pub const ADC_SMPR2_SMP3_Pos: u32 = 9;
pub const ADC_SMPR2_SMP3_Msk: u32 = 3584;
pub const ADC_SMPR2_SMP3: u32 = 3584;
pub const ADC_SMPR2_SMP3_0: u32 = 512;
pub const ADC_SMPR2_SMP3_1: u32 = 1024;
pub const ADC_SMPR2_SMP3_2: u32 = 2048;
pub const ADC_SMPR2_SMP4_Pos: u32 = 12;
pub const ADC_SMPR2_SMP4_Msk: u32 = 28672;
pub const ADC_SMPR2_SMP4: u32 = 28672;
pub const ADC_SMPR2_SMP4_0: u32 = 4096;
pub const ADC_SMPR2_SMP4_1: u32 = 8192;
pub const ADC_SMPR2_SMP4_2: u32 = 16384;
pub const ADC_SMPR2_SMP5_Pos: u32 = 15;
pub const ADC_SMPR2_SMP5_Msk: u32 = 229376;
pub const ADC_SMPR2_SMP5: u32 = 229376;
pub const ADC_SMPR2_SMP5_0: u32 = 32768;
pub const ADC_SMPR2_SMP5_1: u32 = 65536;
pub const ADC_SMPR2_SMP5_2: u32 = 131072;
pub const ADC_SMPR2_SMP6_Pos: u32 = 18;
pub const ADC_SMPR2_SMP6_Msk: u32 = 1835008;
pub const ADC_SMPR2_SMP6: u32 = 1835008;
pub const ADC_SMPR2_SMP6_0: u32 = 262144;
pub const ADC_SMPR2_SMP6_1: u32 = 524288;
pub const ADC_SMPR2_SMP6_2: u32 = 1048576;
pub const ADC_SMPR2_SMP7_Pos: u32 = 21;
pub const ADC_SMPR2_SMP7_Msk: u32 = 14680064;
pub const ADC_SMPR2_SMP7: u32 = 14680064;
pub const ADC_SMPR2_SMP7_0: u32 = 2097152;
pub const ADC_SMPR2_SMP7_1: u32 = 4194304;
pub const ADC_SMPR2_SMP7_2: u32 = 8388608;
pub const ADC_SMPR2_SMP8_Pos: u32 = 24;
pub const ADC_SMPR2_SMP8_Msk: u32 = 117440512;
pub const ADC_SMPR2_SMP8: u32 = 117440512;
pub const ADC_SMPR2_SMP8_0: u32 = 16777216;
pub const ADC_SMPR2_SMP8_1: u32 = 33554432;
pub const ADC_SMPR2_SMP8_2: u32 = 67108864;
pub const ADC_SMPR2_SMP9_Pos: u32 = 27;
pub const ADC_SMPR2_SMP9_Msk: u32 = 939524096;
pub const ADC_SMPR2_SMP9: u32 = 939524096;
pub const ADC_SMPR2_SMP9_0: u32 = 134217728;
pub const ADC_SMPR2_SMP9_1: u32 = 268435456;
pub const ADC_SMPR2_SMP9_2: u32 = 536870912;
pub const ADC_JOFR1_JOFFSET1_Pos: u32 = 0;
pub const ADC_JOFR1_JOFFSET1_Msk: u32 = 4095;
pub const ADC_JOFR1_JOFFSET1: u32 = 4095;
pub const ADC_JOFR2_JOFFSET2_Pos: u32 = 0;
pub const ADC_JOFR2_JOFFSET2_Msk: u32 = 4095;
pub const ADC_JOFR2_JOFFSET2: u32 = 4095;
pub const ADC_JOFR3_JOFFSET3_Pos: u32 = 0;
pub const ADC_JOFR3_JOFFSET3_Msk: u32 = 4095;
pub const ADC_JOFR3_JOFFSET3: u32 = 4095;
pub const ADC_JOFR4_JOFFSET4_Pos: u32 = 0;
pub const ADC_JOFR4_JOFFSET4_Msk: u32 = 4095;
pub const ADC_JOFR4_JOFFSET4: u32 = 4095;
pub const ADC_HTR_HT_Pos: u32 = 0;
pub const ADC_HTR_HT_Msk: u32 = 4095;
pub const ADC_HTR_HT: u32 = 4095;
pub const ADC_LTR_LT_Pos: u32 = 0;
pub const ADC_LTR_LT_Msk: u32 = 4095;
pub const ADC_LTR_LT: u32 = 4095;
pub const ADC_SQR1_SQ13_Pos: u32 = 0;
pub const ADC_SQR1_SQ13_Msk: u32 = 31;
pub const ADC_SQR1_SQ13: u32 = 31;
pub const ADC_SQR1_SQ13_0: u32 = 1;
pub const ADC_SQR1_SQ13_1: u32 = 2;
pub const ADC_SQR1_SQ13_2: u32 = 4;
pub const ADC_SQR1_SQ13_3: u32 = 8;
pub const ADC_SQR1_SQ13_4: u32 = 16;
pub const ADC_SQR1_SQ14_Pos: u32 = 5;
pub const ADC_SQR1_SQ14_Msk: u32 = 992;
pub const ADC_SQR1_SQ14: u32 = 992;
pub const ADC_SQR1_SQ14_0: u32 = 32;
pub const ADC_SQR1_SQ14_1: u32 = 64;
pub const ADC_SQR1_SQ14_2: u32 = 128;
pub const ADC_SQR1_SQ14_3: u32 = 256;
pub const ADC_SQR1_SQ14_4: u32 = 512;
pub const ADC_SQR1_SQ15_Pos: u32 = 10;
pub const ADC_SQR1_SQ15_Msk: u32 = 31744;
pub const ADC_SQR1_SQ15: u32 = 31744;
pub const ADC_SQR1_SQ15_0: u32 = 1024;
pub const ADC_SQR1_SQ15_1: u32 = 2048;
pub const ADC_SQR1_SQ15_2: u32 = 4096;
pub const ADC_SQR1_SQ15_3: u32 = 8192;
pub const ADC_SQR1_SQ15_4: u32 = 16384;
pub const ADC_SQR1_SQ16_Pos: u32 = 15;
pub const ADC_SQR1_SQ16_Msk: u32 = 1015808;
pub const ADC_SQR1_SQ16: u32 = 1015808;
pub const ADC_SQR1_SQ16_0: u32 = 32768;
pub const ADC_SQR1_SQ16_1: u32 = 65536;
pub const ADC_SQR1_SQ16_2: u32 = 131072;
pub const ADC_SQR1_SQ16_3: u32 = 262144;
pub const ADC_SQR1_SQ16_4: u32 = 524288;
pub const ADC_SQR1_L_Pos: u32 = 20;
pub const ADC_SQR1_L_Msk: u32 = 15728640;
pub const ADC_SQR1_L: u32 = 15728640;
pub const ADC_SQR1_L_0: u32 = 1048576;
pub const ADC_SQR1_L_1: u32 = 2097152;
pub const ADC_SQR1_L_2: u32 = 4194304;
pub const ADC_SQR1_L_3: u32 = 8388608;
pub const ADC_SQR2_SQ7_Pos: u32 = 0;
pub const ADC_SQR2_SQ7_Msk: u32 = 31;
pub const ADC_SQR2_SQ7: u32 = 31;
pub const ADC_SQR2_SQ7_0: u32 = 1;
pub const ADC_SQR2_SQ7_1: u32 = 2;
pub const ADC_SQR2_SQ7_2: u32 = 4;
pub const ADC_SQR2_SQ7_3: u32 = 8;
pub const ADC_SQR2_SQ7_4: u32 = 16;
pub const ADC_SQR2_SQ8_Pos: u32 = 5;
pub const ADC_SQR2_SQ8_Msk: u32 = 992;
pub const ADC_SQR2_SQ8: u32 = 992;
pub const ADC_SQR2_SQ8_0: u32 = 32;
pub const ADC_SQR2_SQ8_1: u32 = 64;
pub const ADC_SQR2_SQ8_2: u32 = 128;
pub const ADC_SQR2_SQ8_3: u32 = 256;
pub const ADC_SQR2_SQ8_4: u32 = 512;
pub const ADC_SQR2_SQ9_Pos: u32 = 10;
pub const ADC_SQR2_SQ9_Msk: u32 = 31744;
pub const ADC_SQR2_SQ9: u32 = 31744;
pub const ADC_SQR2_SQ9_0: u32 = 1024;
pub const ADC_SQR2_SQ9_1: u32 = 2048;
pub const ADC_SQR2_SQ9_2: u32 = 4096;
pub const ADC_SQR2_SQ9_3: u32 = 8192;
pub const ADC_SQR2_SQ9_4: u32 = 16384;
pub const ADC_SQR2_SQ10_Pos: u32 = 15;
pub const ADC_SQR2_SQ10_Msk: u32 = 1015808;
pub const ADC_SQR2_SQ10: u32 = 1015808;
pub const ADC_SQR2_SQ10_0: u32 = 32768;
pub const ADC_SQR2_SQ10_1: u32 = 65536;
pub const ADC_SQR2_SQ10_2: u32 = 131072;
pub const ADC_SQR2_SQ10_3: u32 = 262144;
pub const ADC_SQR2_SQ10_4: u32 = 524288;
pub const ADC_SQR2_SQ11_Pos: u32 = 20;
pub const ADC_SQR2_SQ11_Msk: u32 = 32505856;
pub const ADC_SQR2_SQ11: u32 = 32505856;
pub const ADC_SQR2_SQ11_0: u32 = 1048576;
pub const ADC_SQR2_SQ11_1: u32 = 2097152;
pub const ADC_SQR2_SQ11_2: u32 = 4194304;
pub const ADC_SQR2_SQ11_3: u32 = 8388608;
pub const ADC_SQR2_SQ11_4: u32 = 16777216;
pub const ADC_SQR2_SQ12_Pos: u32 = 25;
pub const ADC_SQR2_SQ12_Msk: u32 = 1040187392;
pub const ADC_SQR2_SQ12: u32 = 1040187392;
pub const ADC_SQR2_SQ12_0: u32 = 33554432;
pub const ADC_SQR2_SQ12_1: u32 = 67108864;
pub const ADC_SQR2_SQ12_2: u32 = 134217728;
pub const ADC_SQR2_SQ12_3: u32 = 268435456;
pub const ADC_SQR2_SQ12_4: u32 = 536870912;
pub const ADC_SQR3_SQ1_Pos: u32 = 0;
pub const ADC_SQR3_SQ1_Msk: u32 = 31;
pub const ADC_SQR3_SQ1: u32 = 31;
pub const ADC_SQR3_SQ1_0: u32 = 1;
pub const ADC_SQR3_SQ1_1: u32 = 2;
pub const ADC_SQR3_SQ1_2: u32 = 4;
pub const ADC_SQR3_SQ1_3: u32 = 8;
pub const ADC_SQR3_SQ1_4: u32 = 16;
pub const ADC_SQR3_SQ2_Pos: u32 = 5;
pub const ADC_SQR3_SQ2_Msk: u32 = 992;
pub const ADC_SQR3_SQ2: u32 = 992;
pub const ADC_SQR3_SQ2_0: u32 = 32;
pub const ADC_SQR3_SQ2_1: u32 = 64;
pub const ADC_SQR3_SQ2_2: u32 = 128;
pub const ADC_SQR3_SQ2_3: u32 = 256;
pub const ADC_SQR3_SQ2_4: u32 = 512;
pub const ADC_SQR3_SQ3_Pos: u32 = 10;
pub const ADC_SQR3_SQ3_Msk: u32 = 31744;
pub const ADC_SQR3_SQ3: u32 = 31744;
pub const ADC_SQR3_SQ3_0: u32 = 1024;
pub const ADC_SQR3_SQ3_1: u32 = 2048;
pub const ADC_SQR3_SQ3_2: u32 = 4096;
pub const ADC_SQR3_SQ3_3: u32 = 8192;
pub const ADC_SQR3_SQ3_4: u32 = 16384;
pub const ADC_SQR3_SQ4_Pos: u32 = 15;
pub const ADC_SQR3_SQ4_Msk: u32 = 1015808;
pub const ADC_SQR3_SQ4: u32 = 1015808;
pub const ADC_SQR3_SQ4_0: u32 = 32768;
pub const ADC_SQR3_SQ4_1: u32 = 65536;
pub const ADC_SQR3_SQ4_2: u32 = 131072;
pub const ADC_SQR3_SQ4_3: u32 = 262144;
pub const ADC_SQR3_SQ4_4: u32 = 524288;
pub const ADC_SQR3_SQ5_Pos: u32 = 20;
pub const ADC_SQR3_SQ5_Msk: u32 = 32505856;
pub const ADC_SQR3_SQ5: u32 = 32505856;
pub const ADC_SQR3_SQ5_0: u32 = 1048576;
pub const ADC_SQR3_SQ5_1: u32 = 2097152;
pub const ADC_SQR3_SQ5_2: u32 = 4194304;
pub const ADC_SQR3_SQ5_3: u32 = 8388608;
pub const ADC_SQR3_SQ5_4: u32 = 16777216;
pub const ADC_SQR3_SQ6_Pos: u32 = 25;
pub const ADC_SQR3_SQ6_Msk: u32 = 1040187392;
pub const ADC_SQR3_SQ6: u32 = 1040187392;
pub const ADC_SQR3_SQ6_0: u32 = 33554432;
pub const ADC_SQR3_SQ6_1: u32 = 67108864;
pub const ADC_SQR3_SQ6_2: u32 = 134217728;
pub const ADC_SQR3_SQ6_3: u32 = 268435456;
pub const ADC_SQR3_SQ6_4: u32 = 536870912;
pub const ADC_JSQR_JSQ1_Pos: u32 = 0;
pub const ADC_JSQR_JSQ1_Msk: u32 = 31;
pub const ADC_JSQR_JSQ1: u32 = 31;
pub const ADC_JSQR_JSQ1_0: u32 = 1;
pub const ADC_JSQR_JSQ1_1: u32 = 2;
pub const ADC_JSQR_JSQ1_2: u32 = 4;
pub const ADC_JSQR_JSQ1_3: u32 = 8;
pub const ADC_JSQR_JSQ1_4: u32 = 16;
pub const ADC_JSQR_JSQ2_Pos: u32 = 5;
pub const ADC_JSQR_JSQ2_Msk: u32 = 992;
pub const ADC_JSQR_JSQ2: u32 = 992;
pub const ADC_JSQR_JSQ2_0: u32 = 32;
pub const ADC_JSQR_JSQ2_1: u32 = 64;
pub const ADC_JSQR_JSQ2_2: u32 = 128;
pub const ADC_JSQR_JSQ2_3: u32 = 256;
pub const ADC_JSQR_JSQ2_4: u32 = 512;
pub const ADC_JSQR_JSQ3_Pos: u32 = 10;
pub const ADC_JSQR_JSQ3_Msk: u32 = 31744;
pub const ADC_JSQR_JSQ3: u32 = 31744;
pub const ADC_JSQR_JSQ3_0: u32 = 1024;
pub const ADC_JSQR_JSQ3_1: u32 = 2048;
pub const ADC_JSQR_JSQ3_2: u32 = 4096;
pub const ADC_JSQR_JSQ3_3: u32 = 8192;
pub const ADC_JSQR_JSQ3_4: u32 = 16384;
pub const ADC_JSQR_JSQ4_Pos: u32 = 15;
pub const ADC_JSQR_JSQ4_Msk: u32 = 1015808;
pub const ADC_JSQR_JSQ4: u32 = 1015808;
pub const ADC_JSQR_JSQ4_0: u32 = 32768;
pub const ADC_JSQR_JSQ4_1: u32 = 65536;
pub const ADC_JSQR_JSQ4_2: u32 = 131072;
pub const ADC_JSQR_JSQ4_3: u32 = 262144;
pub const ADC_JSQR_JSQ4_4: u32 = 524288;
pub const ADC_JSQR_JL_Pos: u32 = 20;
pub const ADC_JSQR_JL_Msk: u32 = 3145728;
pub const ADC_JSQR_JL: u32 = 3145728;
pub const ADC_JSQR_JL_0: u32 = 1048576;
pub const ADC_JSQR_JL_1: u32 = 2097152;
pub const ADC_JDR1_JDATA_Pos: u32 = 0;
pub const ADC_JDR1_JDATA_Msk: u32 = 65535;
pub const ADC_JDR1_JDATA: u32 = 65535;
pub const ADC_JDR2_JDATA_Pos: u32 = 0;
pub const ADC_JDR2_JDATA_Msk: u32 = 65535;
pub const ADC_JDR2_JDATA: u32 = 65535;
pub const ADC_JDR3_JDATA_Pos: u32 = 0;
pub const ADC_JDR3_JDATA_Msk: u32 = 65535;
pub const ADC_JDR3_JDATA: u32 = 65535;
pub const ADC_JDR4_JDATA_Pos: u32 = 0;
pub const ADC_JDR4_JDATA_Msk: u32 = 65535;
pub const ADC_JDR4_JDATA: u32 = 65535;
pub const ADC_DR_DATA_Pos: u32 = 0;
pub const ADC_DR_DATA_Msk: u32 = 65535;
pub const ADC_DR_DATA: u32 = 65535;
pub const ADC_DR_ADC2DATA_Pos: u32 = 16;
pub const ADC_DR_ADC2DATA_Msk: u32 = 4294901760;
pub const ADC_DR_ADC2DATA: u32 = 4294901760;
pub const ADC_CSR_AWD1_Pos: u32 = 0;
pub const ADC_CSR_AWD1_Msk: u32 = 1;
pub const ADC_CSR_AWD1: u32 = 1;
pub const ADC_CSR_EOC1_Pos: u32 = 1;
pub const ADC_CSR_EOC1_Msk: u32 = 2;
pub const ADC_CSR_EOC1: u32 = 2;
pub const ADC_CSR_JEOC1_Pos: u32 = 2;
pub const ADC_CSR_JEOC1_Msk: u32 = 4;
pub const ADC_CSR_JEOC1: u32 = 4;
pub const ADC_CSR_JSTRT1_Pos: u32 = 3;
pub const ADC_CSR_JSTRT1_Msk: u32 = 8;
pub const ADC_CSR_JSTRT1: u32 = 8;
pub const ADC_CSR_STRT1_Pos: u32 = 4;
pub const ADC_CSR_STRT1_Msk: u32 = 16;
pub const ADC_CSR_STRT1: u32 = 16;
pub const ADC_CSR_OVR1_Pos: u32 = 5;
pub const ADC_CSR_OVR1_Msk: u32 = 32;
pub const ADC_CSR_OVR1: u32 = 32;
pub const ADC_CSR_DOVR1: u32 = 32;
pub const ADC_CCR_MULTI_Pos: u32 = 0;
pub const ADC_CCR_MULTI_Msk: u32 = 31;
pub const ADC_CCR_MULTI: u32 = 31;
pub const ADC_CCR_MULTI_0: u32 = 1;
pub const ADC_CCR_MULTI_1: u32 = 2;
pub const ADC_CCR_MULTI_2: u32 = 4;
pub const ADC_CCR_MULTI_3: u32 = 8;
pub const ADC_CCR_MULTI_4: u32 = 16;
pub const ADC_CCR_DELAY_Pos: u32 = 8;
pub const ADC_CCR_DELAY_Msk: u32 = 3840;
pub const ADC_CCR_DELAY: u32 = 3840;
pub const ADC_CCR_DELAY_0: u32 = 256;
pub const ADC_CCR_DELAY_1: u32 = 512;
pub const ADC_CCR_DELAY_2: u32 = 1024;
pub const ADC_CCR_DELAY_3: u32 = 2048;
pub const ADC_CCR_DDS_Pos: u32 = 13;
pub const ADC_CCR_DDS_Msk: u32 = 8192;
pub const ADC_CCR_DDS: u32 = 8192;
pub const ADC_CCR_DMA_Pos: u32 = 14;
pub const ADC_CCR_DMA_Msk: u32 = 49152;
pub const ADC_CCR_DMA: u32 = 49152;
pub const ADC_CCR_DMA_0: u32 = 16384;
pub const ADC_CCR_DMA_1: u32 = 32768;
pub const ADC_CCR_ADCPRE_Pos: u32 = 16;
pub const ADC_CCR_ADCPRE_Msk: u32 = 196608;
pub const ADC_CCR_ADCPRE: u32 = 196608;
pub const ADC_CCR_ADCPRE_0: u32 = 65536;
pub const ADC_CCR_ADCPRE_1: u32 = 131072;
pub const ADC_CCR_VBATE_Pos: u32 = 22;
pub const ADC_CCR_VBATE_Msk: u32 = 4194304;
pub const ADC_CCR_VBATE: u32 = 4194304;
pub const ADC_CCR_TSVREFE_Pos: u32 = 23;
pub const ADC_CCR_TSVREFE_Msk: u32 = 8388608;
pub const ADC_CCR_TSVREFE: u32 = 8388608;
pub const ADC_CDR_DATA1_Pos: u32 = 0;
pub const ADC_CDR_DATA1_Msk: u32 = 65535;
pub const ADC_CDR_DATA1: u32 = 65535;
pub const ADC_CDR_DATA2_Pos: u32 = 16;
pub const ADC_CDR_DATA2_Msk: u32 = 4294901760;
pub const ADC_CDR_DATA2: u32 = 4294901760;
pub const ADC_CDR_RDATA_MST: u32 = 65535;
pub const ADC_CDR_RDATA_SLV: u32 = 4294901760;
pub const CRC_DR_DR_Pos: u32 = 0;
pub const CRC_DR_DR_Msk: u32 = 4294967295;
pub const CRC_DR_DR: u32 = 4294967295;
pub const CRC_IDR_IDR_Pos: u32 = 0;
pub const CRC_IDR_IDR_Msk: u32 = 255;
pub const CRC_IDR_IDR: u32 = 255;
pub const CRC_CR_RESET_Pos: u32 = 0;
pub const CRC_CR_RESET_Msk: u32 = 1;
pub const CRC_CR_RESET: u32 = 1;
pub const DMA_SxCR_CHSEL_Pos: u32 = 25;
pub const DMA_SxCR_CHSEL_Msk: u32 = 234881024;
pub const DMA_SxCR_CHSEL: u32 = 234881024;
pub const DMA_SxCR_CHSEL_0: u32 = 33554432;
pub const DMA_SxCR_CHSEL_1: u32 = 67108864;
pub const DMA_SxCR_CHSEL_2: u32 = 134217728;
pub const DMA_SxCR_MBURST_Pos: u32 = 23;
pub const DMA_SxCR_MBURST_Msk: u32 = 25165824;
pub const DMA_SxCR_MBURST: u32 = 25165824;
pub const DMA_SxCR_MBURST_0: u32 = 8388608;
pub const DMA_SxCR_MBURST_1: u32 = 16777216;
pub const DMA_SxCR_PBURST_Pos: u32 = 21;
pub const DMA_SxCR_PBURST_Msk: u32 = 6291456;
pub const DMA_SxCR_PBURST: u32 = 6291456;
pub const DMA_SxCR_PBURST_0: u32 = 2097152;
pub const DMA_SxCR_PBURST_1: u32 = 4194304;
pub const DMA_SxCR_CT_Pos: u32 = 19;
pub const DMA_SxCR_CT_Msk: u32 = 524288;
pub const DMA_SxCR_CT: u32 = 524288;
pub const DMA_SxCR_DBM_Pos: u32 = 18;
pub const DMA_SxCR_DBM_Msk: u32 = 262144;
pub const DMA_SxCR_DBM: u32 = 262144;
pub const DMA_SxCR_PL_Pos: u32 = 16;
pub const DMA_SxCR_PL_Msk: u32 = 196608;
pub const DMA_SxCR_PL: u32 = 196608;
pub const DMA_SxCR_PL_0: u32 = 65536;
pub const DMA_SxCR_PL_1: u32 = 131072;
pub const DMA_SxCR_PINCOS_Pos: u32 = 15;
pub const DMA_SxCR_PINCOS_Msk: u32 = 32768;
pub const DMA_SxCR_PINCOS: u32 = 32768;
pub const DMA_SxCR_MSIZE_Pos: u32 = 13;
pub const DMA_SxCR_MSIZE_Msk: u32 = 24576;
pub const DMA_SxCR_MSIZE: u32 = 24576;
pub const DMA_SxCR_MSIZE_0: u32 = 8192;
pub const DMA_SxCR_MSIZE_1: u32 = 16384;
pub const DMA_SxCR_PSIZE_Pos: u32 = 11;
pub const DMA_SxCR_PSIZE_Msk: u32 = 6144;
pub const DMA_SxCR_PSIZE: u32 = 6144;
pub const DMA_SxCR_PSIZE_0: u32 = 2048;
pub const DMA_SxCR_PSIZE_1: u32 = 4096;
pub const DMA_SxCR_MINC_Pos: u32 = 10;
pub const DMA_SxCR_MINC_Msk: u32 = 1024;
pub const DMA_SxCR_MINC: u32 = 1024;
pub const DMA_SxCR_PINC_Pos: u32 = 9;
pub const DMA_SxCR_PINC_Msk: u32 = 512;
pub const DMA_SxCR_PINC: u32 = 512;
pub const DMA_SxCR_CIRC_Pos: u32 = 8;
pub const DMA_SxCR_CIRC_Msk: u32 = 256;
pub const DMA_SxCR_CIRC: u32 = 256;
pub const DMA_SxCR_DIR_Pos: u32 = 6;
pub const DMA_SxCR_DIR_Msk: u32 = 192;
pub const DMA_SxCR_DIR: u32 = 192;
pub const DMA_SxCR_DIR_0: u32 = 64;
pub const DMA_SxCR_DIR_1: u32 = 128;
pub const DMA_SxCR_PFCTRL_Pos: u32 = 5;
pub const DMA_SxCR_PFCTRL_Msk: u32 = 32;
pub const DMA_SxCR_PFCTRL: u32 = 32;
pub const DMA_SxCR_TCIE_Pos: u32 = 4;
pub const DMA_SxCR_TCIE_Msk: u32 = 16;
pub const DMA_SxCR_TCIE: u32 = 16;
pub const DMA_SxCR_HTIE_Pos: u32 = 3;
pub const DMA_SxCR_HTIE_Msk: u32 = 8;
pub const DMA_SxCR_HTIE: u32 = 8;
pub const DMA_SxCR_TEIE_Pos: u32 = 2;
pub const DMA_SxCR_TEIE_Msk: u32 = 4;
pub const DMA_SxCR_TEIE: u32 = 4;
pub const DMA_SxCR_DMEIE_Pos: u32 = 1;
pub const DMA_SxCR_DMEIE_Msk: u32 = 2;
pub const DMA_SxCR_DMEIE: u32 = 2;
pub const DMA_SxCR_EN_Pos: u32 = 0;
pub const DMA_SxCR_EN_Msk: u32 = 1;
pub const DMA_SxCR_EN: u32 = 1;
pub const DMA_SxCR_ACK_Pos: u32 = 20;
pub const DMA_SxCR_ACK_Msk: u32 = 1048576;
pub const DMA_SxCR_ACK: u32 = 1048576;
pub const DMA_SxNDT_Pos: u32 = 0;
pub const DMA_SxNDT_Msk: u32 = 65535;
pub const DMA_SxNDT: u32 = 65535;
pub const DMA_SxNDT_0: u32 = 1;
pub const DMA_SxNDT_1: u32 = 2;
pub const DMA_SxNDT_2: u32 = 4;
pub const DMA_SxNDT_3: u32 = 8;
pub const DMA_SxNDT_4: u32 = 16;
pub const DMA_SxNDT_5: u32 = 32;
pub const DMA_SxNDT_6: u32 = 64;
pub const DMA_SxNDT_7: u32 = 128;
pub const DMA_SxNDT_8: u32 = 256;
pub const DMA_SxNDT_9: u32 = 512;
pub const DMA_SxNDT_10: u32 = 1024;
pub const DMA_SxNDT_11: u32 = 2048;
pub const DMA_SxNDT_12: u32 = 4096;
pub const DMA_SxNDT_13: u32 = 8192;
pub const DMA_SxNDT_14: u32 = 16384;
pub const DMA_SxNDT_15: u32 = 32768;
pub const DMA_SxFCR_FEIE_Pos: u32 = 7;
pub const DMA_SxFCR_FEIE_Msk: u32 = 128;
pub const DMA_SxFCR_FEIE: u32 = 128;
pub const DMA_SxFCR_FS_Pos: u32 = 3;
pub const DMA_SxFCR_FS_Msk: u32 = 56;
pub const DMA_SxFCR_FS: u32 = 56;
pub const DMA_SxFCR_FS_0: u32 = 8;
pub const DMA_SxFCR_FS_1: u32 = 16;
pub const DMA_SxFCR_FS_2: u32 = 32;
pub const DMA_SxFCR_DMDIS_Pos: u32 = 2;
pub const DMA_SxFCR_DMDIS_Msk: u32 = 4;
pub const DMA_SxFCR_DMDIS: u32 = 4;
pub const DMA_SxFCR_FTH_Pos: u32 = 0;
pub const DMA_SxFCR_FTH_Msk: u32 = 3;
pub const DMA_SxFCR_FTH: u32 = 3;
pub const DMA_SxFCR_FTH_0: u32 = 1;
pub const DMA_SxFCR_FTH_1: u32 = 2;
pub const DMA_LISR_TCIF3_Pos: u32 = 27;
pub const DMA_LISR_TCIF3_Msk: u32 = 134217728;
pub const DMA_LISR_TCIF3: u32 = 134217728;
pub const DMA_LISR_HTIF3_Pos: u32 = 26;
pub const DMA_LISR_HTIF3_Msk: u32 = 67108864;
pub const DMA_LISR_HTIF3: u32 = 67108864;
pub const DMA_LISR_TEIF3_Pos: u32 = 25;
pub const DMA_LISR_TEIF3_Msk: u32 = 33554432;
pub const DMA_LISR_TEIF3: u32 = 33554432;
pub const DMA_LISR_DMEIF3_Pos: u32 = 24;
pub const DMA_LISR_DMEIF3_Msk: u32 = 16777216;
pub const DMA_LISR_DMEIF3: u32 = 16777216;
pub const DMA_LISR_FEIF3_Pos: u32 = 22;
pub const DMA_LISR_FEIF3_Msk: u32 = 4194304;
pub const DMA_LISR_FEIF3: u32 = 4194304;
pub const DMA_LISR_TCIF2_Pos: u32 = 21;
pub const DMA_LISR_TCIF2_Msk: u32 = 2097152;
pub const DMA_LISR_TCIF2: u32 = 2097152;
pub const DMA_LISR_HTIF2_Pos: u32 = 20;
pub const DMA_LISR_HTIF2_Msk: u32 = 1048576;
pub const DMA_LISR_HTIF2: u32 = 1048576;
pub const DMA_LISR_TEIF2_Pos: u32 = 19;
pub const DMA_LISR_TEIF2_Msk: u32 = 524288;
pub const DMA_LISR_TEIF2: u32 = 524288;
pub const DMA_LISR_DMEIF2_Pos: u32 = 18;
pub const DMA_LISR_DMEIF2_Msk: u32 = 262144;
pub const DMA_LISR_DMEIF2: u32 = 262144;
pub const DMA_LISR_FEIF2_Pos: u32 = 16;
pub const DMA_LISR_FEIF2_Msk: u32 = 65536;
pub const DMA_LISR_FEIF2: u32 = 65536;
pub const DMA_LISR_TCIF1_Pos: u32 = 11;
pub const DMA_LISR_TCIF1_Msk: u32 = 2048;
pub const DMA_LISR_TCIF1: u32 = 2048;
pub const DMA_LISR_HTIF1_Pos: u32 = 10;
pub const DMA_LISR_HTIF1_Msk: u32 = 1024;
pub const DMA_LISR_HTIF1: u32 = 1024;
pub const DMA_LISR_TEIF1_Pos: u32 = 9;
pub const DMA_LISR_TEIF1_Msk: u32 = 512;
pub const DMA_LISR_TEIF1: u32 = 512;
pub const DMA_LISR_DMEIF1_Pos: u32 = 8;
pub const DMA_LISR_DMEIF1_Msk: u32 = 256;
pub const DMA_LISR_DMEIF1: u32 = 256;
pub const DMA_LISR_FEIF1_Pos: u32 = 6;
pub const DMA_LISR_FEIF1_Msk: u32 = 64;
pub const DMA_LISR_FEIF1: u32 = 64;
pub const DMA_LISR_TCIF0_Pos: u32 = 5;
pub const DMA_LISR_TCIF0_Msk: u32 = 32;
pub const DMA_LISR_TCIF0: u32 = 32;
pub const DMA_LISR_HTIF0_Pos: u32 = 4;
pub const DMA_LISR_HTIF0_Msk: u32 = 16;
pub const DMA_LISR_HTIF0: u32 = 16;
pub const DMA_LISR_TEIF0_Pos: u32 = 3;
pub const DMA_LISR_TEIF0_Msk: u32 = 8;
pub const DMA_LISR_TEIF0: u32 = 8;
pub const DMA_LISR_DMEIF0_Pos: u32 = 2;
pub const DMA_LISR_DMEIF0_Msk: u32 = 4;
pub const DMA_LISR_DMEIF0: u32 = 4;
pub const DMA_LISR_FEIF0_Pos: u32 = 0;
pub const DMA_LISR_FEIF0_Msk: u32 = 1;
pub const DMA_LISR_FEIF0: u32 = 1;
pub const DMA_HISR_TCIF7_Pos: u32 = 27;
pub const DMA_HISR_TCIF7_Msk: u32 = 134217728;
pub const DMA_HISR_TCIF7: u32 = 134217728;
pub const DMA_HISR_HTIF7_Pos: u32 = 26;
pub const DMA_HISR_HTIF7_Msk: u32 = 67108864;
pub const DMA_HISR_HTIF7: u32 = 67108864;
pub const DMA_HISR_TEIF7_Pos: u32 = 25;
pub const DMA_HISR_TEIF7_Msk: u32 = 33554432;
pub const DMA_HISR_TEIF7: u32 = 33554432;
pub const DMA_HISR_DMEIF7_Pos: u32 = 24;
pub const DMA_HISR_DMEIF7_Msk: u32 = 16777216;
pub const DMA_HISR_DMEIF7: u32 = 16777216;
pub const DMA_HISR_FEIF7_Pos: u32 = 22;
pub const DMA_HISR_FEIF7_Msk: u32 = 4194304;
pub const DMA_HISR_FEIF7: u32 = 4194304;
pub const DMA_HISR_TCIF6_Pos: u32 = 21;
pub const DMA_HISR_TCIF6_Msk: u32 = 2097152;
pub const DMA_HISR_TCIF6: u32 = 2097152;
pub const DMA_HISR_HTIF6_Pos: u32 = 20;
pub const DMA_HISR_HTIF6_Msk: u32 = 1048576;
pub const DMA_HISR_HTIF6: u32 = 1048576;
pub const DMA_HISR_TEIF6_Pos: u32 = 19;
pub const DMA_HISR_TEIF6_Msk: u32 = 524288;
pub const DMA_HISR_TEIF6: u32 = 524288;
pub const DMA_HISR_DMEIF6_Pos: u32 = 18;
pub const DMA_HISR_DMEIF6_Msk: u32 = 262144;
pub const DMA_HISR_DMEIF6: u32 = 262144;
pub const DMA_HISR_FEIF6_Pos: u32 = 16;
pub const DMA_HISR_FEIF6_Msk: u32 = 65536;
pub const DMA_HISR_FEIF6: u32 = 65536;
pub const DMA_HISR_TCIF5_Pos: u32 = 11;
pub const DMA_HISR_TCIF5_Msk: u32 = 2048;
pub const DMA_HISR_TCIF5: u32 = 2048;
pub const DMA_HISR_HTIF5_Pos: u32 = 10;
pub const DMA_HISR_HTIF5_Msk: u32 = 1024;
pub const DMA_HISR_HTIF5: u32 = 1024;
pub const DMA_HISR_TEIF5_Pos: u32 = 9;
pub const DMA_HISR_TEIF5_Msk: u32 = 512;
pub const DMA_HISR_TEIF5: u32 = 512;
pub const DMA_HISR_DMEIF5_Pos: u32 = 8;
pub const DMA_HISR_DMEIF5_Msk: u32 = 256;
pub const DMA_HISR_DMEIF5: u32 = 256;
pub const DMA_HISR_FEIF5_Pos: u32 = 6;
pub const DMA_HISR_FEIF5_Msk: u32 = 64;
pub const DMA_HISR_FEIF5: u32 = 64;
pub const DMA_HISR_TCIF4_Pos: u32 = 5;
pub const DMA_HISR_TCIF4_Msk: u32 = 32;
pub const DMA_HISR_TCIF4: u32 = 32;
pub const DMA_HISR_HTIF4_Pos: u32 = 4;
pub const DMA_HISR_HTIF4_Msk: u32 = 16;
pub const DMA_HISR_HTIF4: u32 = 16;
pub const DMA_HISR_TEIF4_Pos: u32 = 3;
pub const DMA_HISR_TEIF4_Msk: u32 = 8;
pub const DMA_HISR_TEIF4: u32 = 8;
pub const DMA_HISR_DMEIF4_Pos: u32 = 2;
pub const DMA_HISR_DMEIF4_Msk: u32 = 4;
pub const DMA_HISR_DMEIF4: u32 = 4;
pub const DMA_HISR_FEIF4_Pos: u32 = 0;
pub const DMA_HISR_FEIF4_Msk: u32 = 1;
pub const DMA_HISR_FEIF4: u32 = 1;
pub const DMA_LIFCR_CTCIF3_Pos: u32 = 27;
pub const DMA_LIFCR_CTCIF3_Msk: u32 = 134217728;
pub const DMA_LIFCR_CTCIF3: u32 = 134217728;
pub const DMA_LIFCR_CHTIF3_Pos: u32 = 26;
pub const DMA_LIFCR_CHTIF3_Msk: u32 = 67108864;
pub const DMA_LIFCR_CHTIF3: u32 = 67108864;
pub const DMA_LIFCR_CTEIF3_Pos: u32 = 25;
pub const DMA_LIFCR_CTEIF3_Msk: u32 = 33554432;
pub const DMA_LIFCR_CTEIF3: u32 = 33554432;
pub const DMA_LIFCR_CDMEIF3_Pos: u32 = 24;
pub const DMA_LIFCR_CDMEIF3_Msk: u32 = 16777216;
pub const DMA_LIFCR_CDMEIF3: u32 = 16777216;
pub const DMA_LIFCR_CFEIF3_Pos: u32 = 22;
pub const DMA_LIFCR_CFEIF3_Msk: u32 = 4194304;
pub const DMA_LIFCR_CFEIF3: u32 = 4194304;
pub const DMA_LIFCR_CTCIF2_Pos: u32 = 21;
pub const DMA_LIFCR_CTCIF2_Msk: u32 = 2097152;
pub const DMA_LIFCR_CTCIF2: u32 = 2097152;
pub const DMA_LIFCR_CHTIF2_Pos: u32 = 20;
pub const DMA_LIFCR_CHTIF2_Msk: u32 = 1048576;
pub const DMA_LIFCR_CHTIF2: u32 = 1048576;
pub const DMA_LIFCR_CTEIF2_Pos: u32 = 19;
pub const DMA_LIFCR_CTEIF2_Msk: u32 = 524288;
pub const DMA_LIFCR_CTEIF2: u32 = 524288;
pub const DMA_LIFCR_CDMEIF2_Pos: u32 = 18;
pub const DMA_LIFCR_CDMEIF2_Msk: u32 = 262144;
pub const DMA_LIFCR_CDMEIF2: u32 = 262144;
pub const DMA_LIFCR_CFEIF2_Pos: u32 = 16;
pub const DMA_LIFCR_CFEIF2_Msk: u32 = 65536;
pub const DMA_LIFCR_CFEIF2: u32 = 65536;
pub const DMA_LIFCR_CTCIF1_Pos: u32 = 11;
pub const DMA_LIFCR_CTCIF1_Msk: u32 = 2048;
pub const DMA_LIFCR_CTCIF1: u32 = 2048;
pub const DMA_LIFCR_CHTIF1_Pos: u32 = 10;
pub const DMA_LIFCR_CHTIF1_Msk: u32 = 1024;
pub const DMA_LIFCR_CHTIF1: u32 = 1024;
pub const DMA_LIFCR_CTEIF1_Pos: u32 = 9;
pub const DMA_LIFCR_CTEIF1_Msk: u32 = 512;
pub const DMA_LIFCR_CTEIF1: u32 = 512;
pub const DMA_LIFCR_CDMEIF1_Pos: u32 = 8;
pub const DMA_LIFCR_CDMEIF1_Msk: u32 = 256;
pub const DMA_LIFCR_CDMEIF1: u32 = 256;
pub const DMA_LIFCR_CFEIF1_Pos: u32 = 6;
pub const DMA_LIFCR_CFEIF1_Msk: u32 = 64;
pub const DMA_LIFCR_CFEIF1: u32 = 64;
pub const DMA_LIFCR_CTCIF0_Pos: u32 = 5;
pub const DMA_LIFCR_CTCIF0_Msk: u32 = 32;
pub const DMA_LIFCR_CTCIF0: u32 = 32;
pub const DMA_LIFCR_CHTIF0_Pos: u32 = 4;
pub const DMA_LIFCR_CHTIF0_Msk: u32 = 16;
pub const DMA_LIFCR_CHTIF0: u32 = 16;
pub const DMA_LIFCR_CTEIF0_Pos: u32 = 3;
pub const DMA_LIFCR_CTEIF0_Msk: u32 = 8;
pub const DMA_LIFCR_CTEIF0: u32 = 8;
pub const DMA_LIFCR_CDMEIF0_Pos: u32 = 2;
pub const DMA_LIFCR_CDMEIF0_Msk: u32 = 4;
pub const DMA_LIFCR_CDMEIF0: u32 = 4;
pub const DMA_LIFCR_CFEIF0_Pos: u32 = 0;
pub const DMA_LIFCR_CFEIF0_Msk: u32 = 1;
pub const DMA_LIFCR_CFEIF0: u32 = 1;
pub const DMA_HIFCR_CTCIF7_Pos: u32 = 27;
pub const DMA_HIFCR_CTCIF7_Msk: u32 = 134217728;
pub const DMA_HIFCR_CTCIF7: u32 = 134217728;
pub const DMA_HIFCR_CHTIF7_Pos: u32 = 26;
pub const DMA_HIFCR_CHTIF7_Msk: u32 = 67108864;
pub const DMA_HIFCR_CHTIF7: u32 = 67108864;
pub const DMA_HIFCR_CTEIF7_Pos: u32 = 25;
pub const DMA_HIFCR_CTEIF7_Msk: u32 = 33554432;
pub const DMA_HIFCR_CTEIF7: u32 = 33554432;
pub const DMA_HIFCR_CDMEIF7_Pos: u32 = 24;
pub const DMA_HIFCR_CDMEIF7_Msk: u32 = 16777216;
pub const DMA_HIFCR_CDMEIF7: u32 = 16777216;
pub const DMA_HIFCR_CFEIF7_Pos: u32 = 22;
pub const DMA_HIFCR_CFEIF7_Msk: u32 = 4194304;
pub const DMA_HIFCR_CFEIF7: u32 = 4194304;
pub const DMA_HIFCR_CTCIF6_Pos: u32 = 21;
pub const DMA_HIFCR_CTCIF6_Msk: u32 = 2097152;
pub const DMA_HIFCR_CTCIF6: u32 = 2097152;
pub const DMA_HIFCR_CHTIF6_Pos: u32 = 20;
pub const DMA_HIFCR_CHTIF6_Msk: u32 = 1048576;
pub const DMA_HIFCR_CHTIF6: u32 = 1048576;
pub const DMA_HIFCR_CTEIF6_Pos: u32 = 19;
pub const DMA_HIFCR_CTEIF6_Msk: u32 = 524288;
pub const DMA_HIFCR_CTEIF6: u32 = 524288;
pub const DMA_HIFCR_CDMEIF6_Pos: u32 = 18;
pub const DMA_HIFCR_CDMEIF6_Msk: u32 = 262144;
pub const DMA_HIFCR_CDMEIF6: u32 = 262144;
pub const DMA_HIFCR_CFEIF6_Pos: u32 = 16;
pub const DMA_HIFCR_CFEIF6_Msk: u32 = 65536;
pub const DMA_HIFCR_CFEIF6: u32 = 65536;
pub const DMA_HIFCR_CTCIF5_Pos: u32 = 11;
pub const DMA_HIFCR_CTCIF5_Msk: u32 = 2048;
pub const DMA_HIFCR_CTCIF5: u32 = 2048;
pub const DMA_HIFCR_CHTIF5_Pos: u32 = 10;
pub const DMA_HIFCR_CHTIF5_Msk: u32 = 1024;
pub const DMA_HIFCR_CHTIF5: u32 = 1024;
pub const DMA_HIFCR_CTEIF5_Pos: u32 = 9;
pub const DMA_HIFCR_CTEIF5_Msk: u32 = 512;
pub const DMA_HIFCR_CTEIF5: u32 = 512;
pub const DMA_HIFCR_CDMEIF5_Pos: u32 = 8;
pub const DMA_HIFCR_CDMEIF5_Msk: u32 = 256;
pub const DMA_HIFCR_CDMEIF5: u32 = 256;
pub const DMA_HIFCR_CFEIF5_Pos: u32 = 6;
pub const DMA_HIFCR_CFEIF5_Msk: u32 = 64;
pub const DMA_HIFCR_CFEIF5: u32 = 64;
pub const DMA_HIFCR_CTCIF4_Pos: u32 = 5;
pub const DMA_HIFCR_CTCIF4_Msk: u32 = 32;
pub const DMA_HIFCR_CTCIF4: u32 = 32;
pub const DMA_HIFCR_CHTIF4_Pos: u32 = 4;
pub const DMA_HIFCR_CHTIF4_Msk: u32 = 16;
pub const DMA_HIFCR_CHTIF4: u32 = 16;
pub const DMA_HIFCR_CTEIF4_Pos: u32 = 3;
pub const DMA_HIFCR_CTEIF4_Msk: u32 = 8;
pub const DMA_HIFCR_CTEIF4: u32 = 8;
pub const DMA_HIFCR_CDMEIF4_Pos: u32 = 2;
pub const DMA_HIFCR_CDMEIF4_Msk: u32 = 4;
pub const DMA_HIFCR_CDMEIF4: u32 = 4;
pub const DMA_HIFCR_CFEIF4_Pos: u32 = 0;
pub const DMA_HIFCR_CFEIF4_Msk: u32 = 1;
pub const DMA_HIFCR_CFEIF4: u32 = 1;
pub const DMA_SxPAR_PA_Pos: u32 = 0;
pub const DMA_SxPAR_PA_Msk: u32 = 4294967295;
pub const DMA_SxPAR_PA: u32 = 4294967295;
pub const DMA_SxM0AR_M0A_Pos: u32 = 0;
pub const DMA_SxM0AR_M0A_Msk: u32 = 4294967295;
pub const DMA_SxM0AR_M0A: u32 = 4294967295;
pub const DMA_SxM1AR_M1A_Pos: u32 = 0;
pub const DMA_SxM1AR_M1A_Msk: u32 = 4294967295;
pub const DMA_SxM1AR_M1A: u32 = 4294967295;
pub const EXTI_IMR_MR0_Pos: u32 = 0;
pub const EXTI_IMR_MR0_Msk: u32 = 1;
pub const EXTI_IMR_MR0: u32 = 1;
pub const EXTI_IMR_MR1_Pos: u32 = 1;
pub const EXTI_IMR_MR1_Msk: u32 = 2;
pub const EXTI_IMR_MR1: u32 = 2;
pub const EXTI_IMR_MR2_Pos: u32 = 2;
pub const EXTI_IMR_MR2_Msk: u32 = 4;
pub const EXTI_IMR_MR2: u32 = 4;
pub const EXTI_IMR_MR3_Pos: u32 = 3;
pub const EXTI_IMR_MR3_Msk: u32 = 8;
pub const EXTI_IMR_MR3: u32 = 8;
pub const EXTI_IMR_MR4_Pos: u32 = 4;
pub const EXTI_IMR_MR4_Msk: u32 = 16;
pub const EXTI_IMR_MR4: u32 = 16;
pub const EXTI_IMR_MR5_Pos: u32 = 5;
pub const EXTI_IMR_MR5_Msk: u32 = 32;
pub const EXTI_IMR_MR5: u32 = 32;
pub const EXTI_IMR_MR6_Pos: u32 = 6;
pub const EXTI_IMR_MR6_Msk: u32 = 64;
pub const EXTI_IMR_MR6: u32 = 64;
pub const EXTI_IMR_MR7_Pos: u32 = 7;
pub const EXTI_IMR_MR7_Msk: u32 = 128;
pub const EXTI_IMR_MR7: u32 = 128;
pub const EXTI_IMR_MR8_Pos: u32 = 8;
pub const EXTI_IMR_MR8_Msk: u32 = 256;
pub const EXTI_IMR_MR8: u32 = 256;
pub const EXTI_IMR_MR9_Pos: u32 = 9;
pub const EXTI_IMR_MR9_Msk: u32 = 512;
pub const EXTI_IMR_MR9: u32 = 512;
pub const EXTI_IMR_MR10_Pos: u32 = 10;
pub const EXTI_IMR_MR10_Msk: u32 = 1024;
pub const EXTI_IMR_MR10: u32 = 1024;
pub const EXTI_IMR_MR11_Pos: u32 = 11;
pub const EXTI_IMR_MR11_Msk: u32 = 2048;
pub const EXTI_IMR_MR11: u32 = 2048;
pub const EXTI_IMR_MR12_Pos: u32 = 12;
pub const EXTI_IMR_MR12_Msk: u32 = 4096;
pub const EXTI_IMR_MR12: u32 = 4096;
pub const EXTI_IMR_MR13_Pos: u32 = 13;
pub const EXTI_IMR_MR13_Msk: u32 = 8192;
pub const EXTI_IMR_MR13: u32 = 8192;
pub const EXTI_IMR_MR14_Pos: u32 = 14;
pub const EXTI_IMR_MR14_Msk: u32 = 16384;
pub const EXTI_IMR_MR14: u32 = 16384;
pub const EXTI_IMR_MR15_Pos: u32 = 15;
pub const EXTI_IMR_MR15_Msk: u32 = 32768;
pub const EXTI_IMR_MR15: u32 = 32768;
pub const EXTI_IMR_MR16_Pos: u32 = 16;
pub const EXTI_IMR_MR16_Msk: u32 = 65536;
pub const EXTI_IMR_MR16: u32 = 65536;
pub const EXTI_IMR_MR17_Pos: u32 = 17;
pub const EXTI_IMR_MR17_Msk: u32 = 131072;
pub const EXTI_IMR_MR17: u32 = 131072;
pub const EXTI_IMR_MR18_Pos: u32 = 18;
pub const EXTI_IMR_MR18_Msk: u32 = 262144;
pub const EXTI_IMR_MR18: u32 = 262144;
pub const EXTI_IMR_MR19_Pos: u32 = 19;
pub const EXTI_IMR_MR19_Msk: u32 = 524288;
pub const EXTI_IMR_MR19: u32 = 524288;
pub const EXTI_IMR_MR20_Pos: u32 = 20;
pub const EXTI_IMR_MR20_Msk: u32 = 1048576;
pub const EXTI_IMR_MR20: u32 = 1048576;
pub const EXTI_IMR_MR21_Pos: u32 = 21;
pub const EXTI_IMR_MR21_Msk: u32 = 2097152;
pub const EXTI_IMR_MR21: u32 = 2097152;
pub const EXTI_IMR_MR22_Pos: u32 = 22;
pub const EXTI_IMR_MR22_Msk: u32 = 4194304;
pub const EXTI_IMR_MR22: u32 = 4194304;
pub const EXTI_IMR_IM0: u32 = 1;
pub const EXTI_IMR_IM1: u32 = 2;
pub const EXTI_IMR_IM2: u32 = 4;
pub const EXTI_IMR_IM3: u32 = 8;
pub const EXTI_IMR_IM4: u32 = 16;
pub const EXTI_IMR_IM5: u32 = 32;
pub const EXTI_IMR_IM6: u32 = 64;
pub const EXTI_IMR_IM7: u32 = 128;
pub const EXTI_IMR_IM8: u32 = 256;
pub const EXTI_IMR_IM9: u32 = 512;
pub const EXTI_IMR_IM10: u32 = 1024;
pub const EXTI_IMR_IM11: u32 = 2048;
pub const EXTI_IMR_IM12: u32 = 4096;
pub const EXTI_IMR_IM13: u32 = 8192;
pub const EXTI_IMR_IM14: u32 = 16384;
pub const EXTI_IMR_IM15: u32 = 32768;
pub const EXTI_IMR_IM16: u32 = 65536;
pub const EXTI_IMR_IM17: u32 = 131072;
pub const EXTI_IMR_IM18: u32 = 262144;
pub const EXTI_IMR_IM19: u32 = 524288;
pub const EXTI_IMR_IM20: u32 = 1048576;
pub const EXTI_IMR_IM21: u32 = 2097152;
pub const EXTI_IMR_IM22: u32 = 4194304;
pub const EXTI_IMR_IM_Pos: u32 = 0;
pub const EXTI_IMR_IM_Msk: u32 = 8388607;
pub const EXTI_IMR_IM: u32 = 8388607;
pub const EXTI_EMR_MR0_Pos: u32 = 0;
pub const EXTI_EMR_MR0_Msk: u32 = 1;
pub const EXTI_EMR_MR0: u32 = 1;
pub const EXTI_EMR_MR1_Pos: u32 = 1;
pub const EXTI_EMR_MR1_Msk: u32 = 2;
pub const EXTI_EMR_MR1: u32 = 2;
pub const EXTI_EMR_MR2_Pos: u32 = 2;
pub const EXTI_EMR_MR2_Msk: u32 = 4;
pub const EXTI_EMR_MR2: u32 = 4;
pub const EXTI_EMR_MR3_Pos: u32 = 3;
pub const EXTI_EMR_MR3_Msk: u32 = 8;
pub const EXTI_EMR_MR3: u32 = 8;
pub const EXTI_EMR_MR4_Pos: u32 = 4;
pub const EXTI_EMR_MR4_Msk: u32 = 16;
pub const EXTI_EMR_MR4: u32 = 16;
pub const EXTI_EMR_MR5_Pos: u32 = 5;
pub const EXTI_EMR_MR5_Msk: u32 = 32;
pub const EXTI_EMR_MR5: u32 = 32;
pub const EXTI_EMR_MR6_Pos: u32 = 6;
pub const EXTI_EMR_MR6_Msk: u32 = 64;
pub const EXTI_EMR_MR6: u32 = 64;
pub const EXTI_EMR_MR7_Pos: u32 = 7;
pub const EXTI_EMR_MR7_Msk: u32 = 128;
pub const EXTI_EMR_MR7: u32 = 128;
pub const EXTI_EMR_MR8_Pos: u32 = 8;
pub const EXTI_EMR_MR8_Msk: u32 = 256;
pub const EXTI_EMR_MR8: u32 = 256;
pub const EXTI_EMR_MR9_Pos: u32 = 9;
pub const EXTI_EMR_MR9_Msk: u32 = 512;
pub const EXTI_EMR_MR9: u32 = 512;
pub const EXTI_EMR_MR10_Pos: u32 = 10;
pub const EXTI_EMR_MR10_Msk: u32 = 1024;
pub const EXTI_EMR_MR10: u32 = 1024;
pub const EXTI_EMR_MR11_Pos: u32 = 11;
pub const EXTI_EMR_MR11_Msk: u32 = 2048;
pub const EXTI_EMR_MR11: u32 = 2048;
pub const EXTI_EMR_MR12_Pos: u32 = 12;
pub const EXTI_EMR_MR12_Msk: u32 = 4096;
pub const EXTI_EMR_MR12: u32 = 4096;
pub const EXTI_EMR_MR13_Pos: u32 = 13;
pub const EXTI_EMR_MR13_Msk: u32 = 8192;
pub const EXTI_EMR_MR13: u32 = 8192;
pub const EXTI_EMR_MR14_Pos: u32 = 14;
pub const EXTI_EMR_MR14_Msk: u32 = 16384;
pub const EXTI_EMR_MR14: u32 = 16384;
pub const EXTI_EMR_MR15_Pos: u32 = 15;
pub const EXTI_EMR_MR15_Msk: u32 = 32768;
pub const EXTI_EMR_MR15: u32 = 32768;
pub const EXTI_EMR_MR16_Pos: u32 = 16;
pub const EXTI_EMR_MR16_Msk: u32 = 65536;
pub const EXTI_EMR_MR16: u32 = 65536;
pub const EXTI_EMR_MR17_Pos: u32 = 17;
pub const EXTI_EMR_MR17_Msk: u32 = 131072;
pub const EXTI_EMR_MR17: u32 = 131072;
pub const EXTI_EMR_MR18_Pos: u32 = 18;
pub const EXTI_EMR_MR18_Msk: u32 = 262144;
pub const EXTI_EMR_MR18: u32 = 262144;
pub const EXTI_EMR_MR19_Pos: u32 = 19;
pub const EXTI_EMR_MR19_Msk: u32 = 524288;
pub const EXTI_EMR_MR19: u32 = 524288;
pub const EXTI_EMR_MR20_Pos: u32 = 20;
pub const EXTI_EMR_MR20_Msk: u32 = 1048576;
pub const EXTI_EMR_MR20: u32 = 1048576;
pub const EXTI_EMR_MR21_Pos: u32 = 21;
pub const EXTI_EMR_MR21_Msk: u32 = 2097152;
pub const EXTI_EMR_MR21: u32 = 2097152;
pub const EXTI_EMR_MR22_Pos: u32 = 22;
pub const EXTI_EMR_MR22_Msk: u32 = 4194304;
pub const EXTI_EMR_MR22: u32 = 4194304;
pub const EXTI_EMR_EM0: u32 = 1;
pub const EXTI_EMR_EM1: u32 = 2;
pub const EXTI_EMR_EM2: u32 = 4;
pub const EXTI_EMR_EM3: u32 = 8;
pub const EXTI_EMR_EM4: u32 = 16;
pub const EXTI_EMR_EM5: u32 = 32;
pub const EXTI_EMR_EM6: u32 = 64;
pub const EXTI_EMR_EM7: u32 = 128;
pub const EXTI_EMR_EM8: u32 = 256;
pub const EXTI_EMR_EM9: u32 = 512;
pub const EXTI_EMR_EM10: u32 = 1024;
pub const EXTI_EMR_EM11: u32 = 2048;
pub const EXTI_EMR_EM12: u32 = 4096;
pub const EXTI_EMR_EM13: u32 = 8192;
pub const EXTI_EMR_EM14: u32 = 16384;
pub const EXTI_EMR_EM15: u32 = 32768;
pub const EXTI_EMR_EM16: u32 = 65536;
pub const EXTI_EMR_EM17: u32 = 131072;
pub const EXTI_EMR_EM18: u32 = 262144;
pub const EXTI_EMR_EM19: u32 = 524288;
pub const EXTI_EMR_EM20: u32 = 1048576;
pub const EXTI_EMR_EM21: u32 = 2097152;
pub const EXTI_EMR_EM22: u32 = 4194304;
pub const EXTI_RTSR_TR0_Pos: u32 = 0;
pub const EXTI_RTSR_TR0_Msk: u32 = 1;
pub const EXTI_RTSR_TR0: u32 = 1;
pub const EXTI_RTSR_TR1_Pos: u32 = 1;
pub const EXTI_RTSR_TR1_Msk: u32 = 2;
pub const EXTI_RTSR_TR1: u32 = 2;
pub const EXTI_RTSR_TR2_Pos: u32 = 2;
pub const EXTI_RTSR_TR2_Msk: u32 = 4;
pub const EXTI_RTSR_TR2: u32 = 4;
pub const EXTI_RTSR_TR3_Pos: u32 = 3;
pub const EXTI_RTSR_TR3_Msk: u32 = 8;
pub const EXTI_RTSR_TR3: u32 = 8;
pub const EXTI_RTSR_TR4_Pos: u32 = 4;
pub const EXTI_RTSR_TR4_Msk: u32 = 16;
pub const EXTI_RTSR_TR4: u32 = 16;
pub const EXTI_RTSR_TR5_Pos: u32 = 5;
pub const EXTI_RTSR_TR5_Msk: u32 = 32;
pub const EXTI_RTSR_TR5: u32 = 32;
pub const EXTI_RTSR_TR6_Pos: u32 = 6;
pub const EXTI_RTSR_TR6_Msk: u32 = 64;
pub const EXTI_RTSR_TR6: u32 = 64;
pub const EXTI_RTSR_TR7_Pos: u32 = 7;
pub const EXTI_RTSR_TR7_Msk: u32 = 128;
pub const EXTI_RTSR_TR7: u32 = 128;
pub const EXTI_RTSR_TR8_Pos: u32 = 8;
pub const EXTI_RTSR_TR8_Msk: u32 = 256;
pub const EXTI_RTSR_TR8: u32 = 256;
pub const EXTI_RTSR_TR9_Pos: u32 = 9;
pub const EXTI_RTSR_TR9_Msk: u32 = 512;
pub const EXTI_RTSR_TR9: u32 = 512;
pub const EXTI_RTSR_TR10_Pos: u32 = 10;
pub const EXTI_RTSR_TR10_Msk: u32 = 1024;
pub const EXTI_RTSR_TR10: u32 = 1024;
pub const EXTI_RTSR_TR11_Pos: u32 = 11;
pub const EXTI_RTSR_TR11_Msk: u32 = 2048;
pub const EXTI_RTSR_TR11: u32 = 2048;
pub const EXTI_RTSR_TR12_Pos: u32 = 12;
pub const EXTI_RTSR_TR12_Msk: u32 = 4096;
pub const EXTI_RTSR_TR12: u32 = 4096;
pub const EXTI_RTSR_TR13_Pos: u32 = 13;
pub const EXTI_RTSR_TR13_Msk: u32 = 8192;
pub const EXTI_RTSR_TR13: u32 = 8192;
pub const EXTI_RTSR_TR14_Pos: u32 = 14;
pub const EXTI_RTSR_TR14_Msk: u32 = 16384;
pub const EXTI_RTSR_TR14: u32 = 16384;
pub const EXTI_RTSR_TR15_Pos: u32 = 15;
pub const EXTI_RTSR_TR15_Msk: u32 = 32768;
pub const EXTI_RTSR_TR15: u32 = 32768;
pub const EXTI_RTSR_TR16_Pos: u32 = 16;
pub const EXTI_RTSR_TR16_Msk: u32 = 65536;
pub const EXTI_RTSR_TR16: u32 = 65536;
pub const EXTI_RTSR_TR17_Pos: u32 = 17;
pub const EXTI_RTSR_TR17_Msk: u32 = 131072;
pub const EXTI_RTSR_TR17: u32 = 131072;
pub const EXTI_RTSR_TR18_Pos: u32 = 18;
pub const EXTI_RTSR_TR18_Msk: u32 = 262144;
pub const EXTI_RTSR_TR18: u32 = 262144;
pub const EXTI_RTSR_TR19_Pos: u32 = 19;
pub const EXTI_RTSR_TR19_Msk: u32 = 524288;
pub const EXTI_RTSR_TR19: u32 = 524288;
pub const EXTI_RTSR_TR20_Pos: u32 = 20;
pub const EXTI_RTSR_TR20_Msk: u32 = 1048576;
pub const EXTI_RTSR_TR20: u32 = 1048576;
pub const EXTI_RTSR_TR21_Pos: u32 = 21;
pub const EXTI_RTSR_TR21_Msk: u32 = 2097152;
pub const EXTI_RTSR_TR21: u32 = 2097152;
pub const EXTI_RTSR_TR22_Pos: u32 = 22;
pub const EXTI_RTSR_TR22_Msk: u32 = 4194304;
pub const EXTI_RTSR_TR22: u32 = 4194304;
pub const EXTI_FTSR_TR0_Pos: u32 = 0;
pub const EXTI_FTSR_TR0_Msk: u32 = 1;
pub const EXTI_FTSR_TR0: u32 = 1;
pub const EXTI_FTSR_TR1_Pos: u32 = 1;
pub const EXTI_FTSR_TR1_Msk: u32 = 2;
pub const EXTI_FTSR_TR1: u32 = 2;
pub const EXTI_FTSR_TR2_Pos: u32 = 2;
pub const EXTI_FTSR_TR2_Msk: u32 = 4;
pub const EXTI_FTSR_TR2: u32 = 4;
pub const EXTI_FTSR_TR3_Pos: u32 = 3;
pub const EXTI_FTSR_TR3_Msk: u32 = 8;
pub const EXTI_FTSR_TR3: u32 = 8;
pub const EXTI_FTSR_TR4_Pos: u32 = 4;
pub const EXTI_FTSR_TR4_Msk: u32 = 16;
pub const EXTI_FTSR_TR4: u32 = 16;
pub const EXTI_FTSR_TR5_Pos: u32 = 5;
pub const EXTI_FTSR_TR5_Msk: u32 = 32;
pub const EXTI_FTSR_TR5: u32 = 32;
pub const EXTI_FTSR_TR6_Pos: u32 = 6;
pub const EXTI_FTSR_TR6_Msk: u32 = 64;
pub const EXTI_FTSR_TR6: u32 = 64;
pub const EXTI_FTSR_TR7_Pos: u32 = 7;
pub const EXTI_FTSR_TR7_Msk: u32 = 128;
pub const EXTI_FTSR_TR7: u32 = 128;
pub const EXTI_FTSR_TR8_Pos: u32 = 8;
pub const EXTI_FTSR_TR8_Msk: u32 = 256;
pub const EXTI_FTSR_TR8: u32 = 256;
pub const EXTI_FTSR_TR9_Pos: u32 = 9;
pub const EXTI_FTSR_TR9_Msk: u32 = 512;
pub const EXTI_FTSR_TR9: u32 = 512;
pub const EXTI_FTSR_TR10_Pos: u32 = 10;
pub const EXTI_FTSR_TR10_Msk: u32 = 1024;
pub const EXTI_FTSR_TR10: u32 = 1024;
pub const EXTI_FTSR_TR11_Pos: u32 = 11;
pub const EXTI_FTSR_TR11_Msk: u32 = 2048;
pub const EXTI_FTSR_TR11: u32 = 2048;
pub const EXTI_FTSR_TR12_Pos: u32 = 12;
pub const EXTI_FTSR_TR12_Msk: u32 = 4096;
pub const EXTI_FTSR_TR12: u32 = 4096;
pub const EXTI_FTSR_TR13_Pos: u32 = 13;
pub const EXTI_FTSR_TR13_Msk: u32 = 8192;
pub const EXTI_FTSR_TR13: u32 = 8192;
pub const EXTI_FTSR_TR14_Pos: u32 = 14;
pub const EXTI_FTSR_TR14_Msk: u32 = 16384;
pub const EXTI_FTSR_TR14: u32 = 16384;
pub const EXTI_FTSR_TR15_Pos: u32 = 15;
pub const EXTI_FTSR_TR15_Msk: u32 = 32768;
pub const EXTI_FTSR_TR15: u32 = 32768;
pub const EXTI_FTSR_TR16_Pos: u32 = 16;
pub const EXTI_FTSR_TR16_Msk: u32 = 65536;
pub const EXTI_FTSR_TR16: u32 = 65536;
pub const EXTI_FTSR_TR17_Pos: u32 = 17;
pub const EXTI_FTSR_TR17_Msk: u32 = 131072;
pub const EXTI_FTSR_TR17: u32 = 131072;
pub const EXTI_FTSR_TR18_Pos: u32 = 18;
pub const EXTI_FTSR_TR18_Msk: u32 = 262144;
pub const EXTI_FTSR_TR18: u32 = 262144;
pub const EXTI_FTSR_TR19_Pos: u32 = 19;
pub const EXTI_FTSR_TR19_Msk: u32 = 524288;
pub const EXTI_FTSR_TR19: u32 = 524288;
pub const EXTI_FTSR_TR20_Pos: u32 = 20;
pub const EXTI_FTSR_TR20_Msk: u32 = 1048576;
pub const EXTI_FTSR_TR20: u32 = 1048576;
pub const EXTI_FTSR_TR21_Pos: u32 = 21;
pub const EXTI_FTSR_TR21_Msk: u32 = 2097152;
pub const EXTI_FTSR_TR21: u32 = 2097152;
pub const EXTI_FTSR_TR22_Pos: u32 = 22;
pub const EXTI_FTSR_TR22_Msk: u32 = 4194304;
pub const EXTI_FTSR_TR22: u32 = 4194304;
pub const EXTI_SWIER_SWIER0_Pos: u32 = 0;
pub const EXTI_SWIER_SWIER0_Msk: u32 = 1;
pub const EXTI_SWIER_SWIER0: u32 = 1;
pub const EXTI_SWIER_SWIER1_Pos: u32 = 1;
pub const EXTI_SWIER_SWIER1_Msk: u32 = 2;
pub const EXTI_SWIER_SWIER1: u32 = 2;
pub const EXTI_SWIER_SWIER2_Pos: u32 = 2;
pub const EXTI_SWIER_SWIER2_Msk: u32 = 4;
pub const EXTI_SWIER_SWIER2: u32 = 4;
pub const EXTI_SWIER_SWIER3_Pos: u32 = 3;
pub const EXTI_SWIER_SWIER3_Msk: u32 = 8;
pub const EXTI_SWIER_SWIER3: u32 = 8;
pub const EXTI_SWIER_SWIER4_Pos: u32 = 4;
pub const EXTI_SWIER_SWIER4_Msk: u32 = 16;
pub const EXTI_SWIER_SWIER4: u32 = 16;
pub const EXTI_SWIER_SWIER5_Pos: u32 = 5;
pub const EXTI_SWIER_SWIER5_Msk: u32 = 32;
pub const EXTI_SWIER_SWIER5: u32 = 32;
pub const EXTI_SWIER_SWIER6_Pos: u32 = 6;
pub const EXTI_SWIER_SWIER6_Msk: u32 = 64;
pub const EXTI_SWIER_SWIER6: u32 = 64;
pub const EXTI_SWIER_SWIER7_Pos: u32 = 7;
pub const EXTI_SWIER_SWIER7_Msk: u32 = 128;
pub const EXTI_SWIER_SWIER7: u32 = 128;
pub const EXTI_SWIER_SWIER8_Pos: u32 = 8;
pub const EXTI_SWIER_SWIER8_Msk: u32 = 256;
pub const EXTI_SWIER_SWIER8: u32 = 256;
pub const EXTI_SWIER_SWIER9_Pos: u32 = 9;
pub const EXTI_SWIER_SWIER9_Msk: u32 = 512;
pub const EXTI_SWIER_SWIER9: u32 = 512;
pub const EXTI_SWIER_SWIER10_Pos: u32 = 10;
pub const EXTI_SWIER_SWIER10_Msk: u32 = 1024;
pub const EXTI_SWIER_SWIER10: u32 = 1024;
pub const EXTI_SWIER_SWIER11_Pos: u32 = 11;
pub const EXTI_SWIER_SWIER11_Msk: u32 = 2048;
pub const EXTI_SWIER_SWIER11: u32 = 2048;
pub const EXTI_SWIER_SWIER12_Pos: u32 = 12;
pub const EXTI_SWIER_SWIER12_Msk: u32 = 4096;
pub const EXTI_SWIER_SWIER12: u32 = 4096;
pub const EXTI_SWIER_SWIER13_Pos: u32 = 13;
pub const EXTI_SWIER_SWIER13_Msk: u32 = 8192;
pub const EXTI_SWIER_SWIER13: u32 = 8192;
pub const EXTI_SWIER_SWIER14_Pos: u32 = 14;
pub const EXTI_SWIER_SWIER14_Msk: u32 = 16384;
pub const EXTI_SWIER_SWIER14: u32 = 16384;
pub const EXTI_SWIER_SWIER15_Pos: u32 = 15;
pub const EXTI_SWIER_SWIER15_Msk: u32 = 32768;
pub const EXTI_SWIER_SWIER15: u32 = 32768;
pub const EXTI_SWIER_SWIER16_Pos: u32 = 16;
pub const EXTI_SWIER_SWIER16_Msk: u32 = 65536;
pub const EXTI_SWIER_SWIER16: u32 = 65536;
pub const EXTI_SWIER_SWIER17_Pos: u32 = 17;
pub const EXTI_SWIER_SWIER17_Msk: u32 = 131072;
pub const EXTI_SWIER_SWIER17: u32 = 131072;
pub const EXTI_SWIER_SWIER18_Pos: u32 = 18;
pub const EXTI_SWIER_SWIER18_Msk: u32 = 262144;
pub const EXTI_SWIER_SWIER18: u32 = 262144;
pub const EXTI_SWIER_SWIER19_Pos: u32 = 19;
pub const EXTI_SWIER_SWIER19_Msk: u32 = 524288;
pub const EXTI_SWIER_SWIER19: u32 = 524288;
pub const EXTI_SWIER_SWIER20_Pos: u32 = 20;
pub const EXTI_SWIER_SWIER20_Msk: u32 = 1048576;
pub const EXTI_SWIER_SWIER20: u32 = 1048576;
pub const EXTI_SWIER_SWIER21_Pos: u32 = 21;
pub const EXTI_SWIER_SWIER21_Msk: u32 = 2097152;
pub const EXTI_SWIER_SWIER21: u32 = 2097152;
pub const EXTI_SWIER_SWIER22_Pos: u32 = 22;
pub const EXTI_SWIER_SWIER22_Msk: u32 = 4194304;
pub const EXTI_SWIER_SWIER22: u32 = 4194304;
pub const EXTI_PR_PR0_Pos: u32 = 0;
pub const EXTI_PR_PR0_Msk: u32 = 1;
pub const EXTI_PR_PR0: u32 = 1;
pub const EXTI_PR_PR1_Pos: u32 = 1;
pub const EXTI_PR_PR1_Msk: u32 = 2;
pub const EXTI_PR_PR1: u32 = 2;
pub const EXTI_PR_PR2_Pos: u32 = 2;
pub const EXTI_PR_PR2_Msk: u32 = 4;
pub const EXTI_PR_PR2: u32 = 4;
pub const EXTI_PR_PR3_Pos: u32 = 3;
pub const EXTI_PR_PR3_Msk: u32 = 8;
pub const EXTI_PR_PR3: u32 = 8;
pub const EXTI_PR_PR4_Pos: u32 = 4;
pub const EXTI_PR_PR4_Msk: u32 = 16;
pub const EXTI_PR_PR4: u32 = 16;
pub const EXTI_PR_PR5_Pos: u32 = 5;
pub const EXTI_PR_PR5_Msk: u32 = 32;
pub const EXTI_PR_PR5: u32 = 32;
pub const EXTI_PR_PR6_Pos: u32 = 6;
pub const EXTI_PR_PR6_Msk: u32 = 64;
pub const EXTI_PR_PR6: u32 = 64;
pub const EXTI_PR_PR7_Pos: u32 = 7;
pub const EXTI_PR_PR7_Msk: u32 = 128;
pub const EXTI_PR_PR7: u32 = 128;
pub const EXTI_PR_PR8_Pos: u32 = 8;
pub const EXTI_PR_PR8_Msk: u32 = 256;
pub const EXTI_PR_PR8: u32 = 256;
pub const EXTI_PR_PR9_Pos: u32 = 9;
pub const EXTI_PR_PR9_Msk: u32 = 512;
pub const EXTI_PR_PR9: u32 = 512;
pub const EXTI_PR_PR10_Pos: u32 = 10;
pub const EXTI_PR_PR10_Msk: u32 = 1024;
pub const EXTI_PR_PR10: u32 = 1024;
pub const EXTI_PR_PR11_Pos: u32 = 11;
pub const EXTI_PR_PR11_Msk: u32 = 2048;
pub const EXTI_PR_PR11: u32 = 2048;
pub const EXTI_PR_PR12_Pos: u32 = 12;
pub const EXTI_PR_PR12_Msk: u32 = 4096;
pub const EXTI_PR_PR12: u32 = 4096;
pub const EXTI_PR_PR13_Pos: u32 = 13;
pub const EXTI_PR_PR13_Msk: u32 = 8192;
pub const EXTI_PR_PR13: u32 = 8192;
pub const EXTI_PR_PR14_Pos: u32 = 14;
pub const EXTI_PR_PR14_Msk: u32 = 16384;
pub const EXTI_PR_PR14: u32 = 16384;
pub const EXTI_PR_PR15_Pos: u32 = 15;
pub const EXTI_PR_PR15_Msk: u32 = 32768;
pub const EXTI_PR_PR15: u32 = 32768;
pub const EXTI_PR_PR16_Pos: u32 = 16;
pub const EXTI_PR_PR16_Msk: u32 = 65536;
pub const EXTI_PR_PR16: u32 = 65536;
pub const EXTI_PR_PR17_Pos: u32 = 17;
pub const EXTI_PR_PR17_Msk: u32 = 131072;
pub const EXTI_PR_PR17: u32 = 131072;
pub const EXTI_PR_PR18_Pos: u32 = 18;
pub const EXTI_PR_PR18_Msk: u32 = 262144;
pub const EXTI_PR_PR18: u32 = 262144;
pub const EXTI_PR_PR19_Pos: u32 = 19;
pub const EXTI_PR_PR19_Msk: u32 = 524288;
pub const EXTI_PR_PR19: u32 = 524288;
pub const EXTI_PR_PR20_Pos: u32 = 20;
pub const EXTI_PR_PR20_Msk: u32 = 1048576;
pub const EXTI_PR_PR20: u32 = 1048576;
pub const EXTI_PR_PR21_Pos: u32 = 21;
pub const EXTI_PR_PR21_Msk: u32 = 2097152;
pub const EXTI_PR_PR21: u32 = 2097152;
pub const EXTI_PR_PR22_Pos: u32 = 22;
pub const EXTI_PR_PR22_Msk: u32 = 4194304;
pub const EXTI_PR_PR22: u32 = 4194304;
pub const FLASH_ACR_LATENCY_Pos: u32 = 0;
pub const FLASH_ACR_LATENCY_Msk: u32 = 15;
pub const FLASH_ACR_LATENCY: u32 = 15;
pub const FLASH_ACR_LATENCY_0WS: u32 = 0;
pub const FLASH_ACR_LATENCY_1WS: u32 = 1;
pub const FLASH_ACR_LATENCY_2WS: u32 = 2;
pub const FLASH_ACR_LATENCY_3WS: u32 = 3;
pub const FLASH_ACR_LATENCY_4WS: u32 = 4;
pub const FLASH_ACR_LATENCY_5WS: u32 = 5;
pub const FLASH_ACR_LATENCY_6WS: u32 = 6;
pub const FLASH_ACR_LATENCY_7WS: u32 = 7;
pub const FLASH_ACR_PRFTEN_Pos: u32 = 8;
pub const FLASH_ACR_PRFTEN_Msk: u32 = 256;
pub const FLASH_ACR_PRFTEN: u32 = 256;
pub const FLASH_ACR_ICEN_Pos: u32 = 9;
pub const FLASH_ACR_ICEN_Msk: u32 = 512;
pub const FLASH_ACR_ICEN: u32 = 512;
pub const FLASH_ACR_DCEN_Pos: u32 = 10;
pub const FLASH_ACR_DCEN_Msk: u32 = 1024;
pub const FLASH_ACR_DCEN: u32 = 1024;
pub const FLASH_ACR_ICRST_Pos: u32 = 11;
pub const FLASH_ACR_ICRST_Msk: u32 = 2048;
pub const FLASH_ACR_ICRST: u32 = 2048;
pub const FLASH_ACR_DCRST_Pos: u32 = 12;
pub const FLASH_ACR_DCRST_Msk: u32 = 4096;
pub const FLASH_ACR_DCRST: u32 = 4096;
pub const FLASH_ACR_BYTE0_ADDRESS_Pos: u32 = 10;
pub const FLASH_ACR_BYTE0_ADDRESS_Msk: u32 = 1073888256;
pub const FLASH_ACR_BYTE0_ADDRESS: u32 = 1073888256;
pub const FLASH_ACR_BYTE2_ADDRESS_Pos: u32 = 0;
pub const FLASH_ACR_BYTE2_ADDRESS_Msk: u32 = 1073888259;
pub const FLASH_ACR_BYTE2_ADDRESS: u32 = 1073888259;
pub const FLASH_SR_EOP_Pos: u32 = 0;
pub const FLASH_SR_EOP_Msk: u32 = 1;
pub const FLASH_SR_EOP: u32 = 1;
pub const FLASH_SR_SOP_Pos: u32 = 1;
pub const FLASH_SR_SOP_Msk: u32 = 2;
pub const FLASH_SR_SOP: u32 = 2;
pub const FLASH_SR_WRPERR_Pos: u32 = 4;
pub const FLASH_SR_WRPERR_Msk: u32 = 16;
pub const FLASH_SR_WRPERR: u32 = 16;
pub const FLASH_SR_PGAERR_Pos: u32 = 5;
pub const FLASH_SR_PGAERR_Msk: u32 = 32;
pub const FLASH_SR_PGAERR: u32 = 32;
pub const FLASH_SR_PGPERR_Pos: u32 = 6;
pub const FLASH_SR_PGPERR_Msk: u32 = 64;
pub const FLASH_SR_PGPERR: u32 = 64;
pub const FLASH_SR_PGSERR_Pos: u32 = 7;
pub const FLASH_SR_PGSERR_Msk: u32 = 128;
pub const FLASH_SR_PGSERR: u32 = 128;
pub const FLASH_SR_RDERR_Pos: u32 = 8;
pub const FLASH_SR_RDERR_Msk: u32 = 256;
pub const FLASH_SR_RDERR: u32 = 256;
pub const FLASH_SR_BSY_Pos: u32 = 16;
pub const FLASH_SR_BSY_Msk: u32 = 65536;
pub const FLASH_SR_BSY: u32 = 65536;
pub const FLASH_CR_PG_Pos: u32 = 0;
pub const FLASH_CR_PG_Msk: u32 = 1;
pub const FLASH_CR_PG: u32 = 1;
pub const FLASH_CR_SER_Pos: u32 = 1;
pub const FLASH_CR_SER_Msk: u32 = 2;
pub const FLASH_CR_SER: u32 = 2;
pub const FLASH_CR_MER_Pos: u32 = 2;
pub const FLASH_CR_MER_Msk: u32 = 4;
pub const FLASH_CR_MER: u32 = 4;
pub const FLASH_CR_SNB_Pos: u32 = 3;
pub const FLASH_CR_SNB_Msk: u32 = 248;
pub const FLASH_CR_SNB: u32 = 248;
pub const FLASH_CR_SNB_0: u32 = 8;
pub const FLASH_CR_SNB_1: u32 = 16;
pub const FLASH_CR_SNB_2: u32 = 32;
pub const FLASH_CR_SNB_3: u32 = 64;
pub const FLASH_CR_SNB_4: u32 = 128;
pub const FLASH_CR_PSIZE_Pos: u32 = 8;
pub const FLASH_CR_PSIZE_Msk: u32 = 768;
pub const FLASH_CR_PSIZE: u32 = 768;
pub const FLASH_CR_PSIZE_0: u32 = 256;
pub const FLASH_CR_PSIZE_1: u32 = 512;
pub const FLASH_CR_STRT_Pos: u32 = 16;
pub const FLASH_CR_STRT_Msk: u32 = 65536;
pub const FLASH_CR_STRT: u32 = 65536;
pub const FLASH_CR_EOPIE_Pos: u32 = 24;
pub const FLASH_CR_EOPIE_Msk: u32 = 16777216;
pub const FLASH_CR_EOPIE: u32 = 16777216;
pub const FLASH_CR_LOCK_Pos: u32 = 31;
pub const FLASH_CR_LOCK_Msk: u32 = 2147483648;
pub const FLASH_CR_LOCK: u32 = 2147483648;
pub const FLASH_OPTCR_OPTLOCK_Pos: u32 = 0;
pub const FLASH_OPTCR_OPTLOCK_Msk: u32 = 1;
pub const FLASH_OPTCR_OPTLOCK: u32 = 1;
pub const FLASH_OPTCR_OPTSTRT_Pos: u32 = 1;
pub const FLASH_OPTCR_OPTSTRT_Msk: u32 = 2;
pub const FLASH_OPTCR_OPTSTRT: u32 = 2;
pub const FLASH_OPTCR_BOR_LEV_0: u32 = 4;
pub const FLASH_OPTCR_BOR_LEV_1: u32 = 8;
pub const FLASH_OPTCR_BOR_LEV_Pos: u32 = 2;
pub const FLASH_OPTCR_BOR_LEV_Msk: u32 = 12;
pub const FLASH_OPTCR_BOR_LEV: u32 = 12;
pub const FLASH_OPTCR_WDG_SW_Pos: u32 = 5;
pub const FLASH_OPTCR_WDG_SW_Msk: u32 = 32;
pub const FLASH_OPTCR_WDG_SW: u32 = 32;
pub const FLASH_OPTCR_nRST_STOP_Pos: u32 = 6;
pub const FLASH_OPTCR_nRST_STOP_Msk: u32 = 64;
pub const FLASH_OPTCR_nRST_STOP: u32 = 64;
pub const FLASH_OPTCR_nRST_STDBY_Pos: u32 = 7;
pub const FLASH_OPTCR_nRST_STDBY_Msk: u32 = 128;
pub const FLASH_OPTCR_nRST_STDBY: u32 = 128;
pub const FLASH_OPTCR_RDP_Pos: u32 = 8;
pub const FLASH_OPTCR_RDP_Msk: u32 = 65280;
pub const FLASH_OPTCR_RDP: u32 = 65280;
pub const FLASH_OPTCR_RDP_0: u32 = 256;
pub const FLASH_OPTCR_RDP_1: u32 = 512;
pub const FLASH_OPTCR_RDP_2: u32 = 1024;
pub const FLASH_OPTCR_RDP_3: u32 = 2048;
pub const FLASH_OPTCR_RDP_4: u32 = 4096;
pub const FLASH_OPTCR_RDP_5: u32 = 8192;
pub const FLASH_OPTCR_RDP_6: u32 = 16384;
pub const FLASH_OPTCR_RDP_7: u32 = 32768;
pub const FLASH_OPTCR_nWRP_Pos: u32 = 16;
pub const FLASH_OPTCR_nWRP_Msk: u32 = 268369920;
pub const FLASH_OPTCR_nWRP: u32 = 268369920;
pub const FLASH_OPTCR_nWRP_0: u32 = 65536;
pub const FLASH_OPTCR_nWRP_1: u32 = 131072;
pub const FLASH_OPTCR_nWRP_2: u32 = 262144;
pub const FLASH_OPTCR_nWRP_3: u32 = 524288;
pub const FLASH_OPTCR_nWRP_4: u32 = 1048576;
pub const FLASH_OPTCR_nWRP_5: u32 = 2097152;
pub const FLASH_OPTCR_nWRP_6: u32 = 4194304;
pub const FLASH_OPTCR_nWRP_7: u32 = 8388608;
pub const FLASH_OPTCR_nWRP_8: u32 = 16777216;
pub const FLASH_OPTCR_nWRP_9: u32 = 33554432;
pub const FLASH_OPTCR_nWRP_10: u32 = 67108864;
pub const FLASH_OPTCR_nWRP_11: u32 = 134217728;
pub const FLASH_OPTCR1_nWRP_Pos: u32 = 16;
pub const FLASH_OPTCR1_nWRP_Msk: u32 = 268369920;
pub const FLASH_OPTCR1_nWRP: u32 = 268369920;
pub const FLASH_OPTCR1_nWRP_0: u32 = 65536;
pub const FLASH_OPTCR1_nWRP_1: u32 = 131072;
pub const FLASH_OPTCR1_nWRP_2: u32 = 262144;
pub const FLASH_OPTCR1_nWRP_3: u32 = 524288;
pub const FLASH_OPTCR1_nWRP_4: u32 = 1048576;
pub const FLASH_OPTCR1_nWRP_5: u32 = 2097152;
pub const FLASH_OPTCR1_nWRP_6: u32 = 4194304;
pub const FLASH_OPTCR1_nWRP_7: u32 = 8388608;
pub const FLASH_OPTCR1_nWRP_8: u32 = 16777216;
pub const FLASH_OPTCR1_nWRP_9: u32 = 33554432;
pub const FLASH_OPTCR1_nWRP_10: u32 = 67108864;
pub const FLASH_OPTCR1_nWRP_11: u32 = 134217728;
pub const GPIO_MODER_MODE0_Pos: u32 = 0;
pub const GPIO_MODER_MODE0_Msk: u32 = 3;
pub const GPIO_MODER_MODE0: u32 = 3;
pub const GPIO_MODER_MODE0_0: u32 = 1;
pub const GPIO_MODER_MODE0_1: u32 = 2;
pub const GPIO_MODER_MODE1_Pos: u32 = 2;
pub const GPIO_MODER_MODE1_Msk: u32 = 12;
pub const GPIO_MODER_MODE1: u32 = 12;
pub const GPIO_MODER_MODE1_0: u32 = 4;
pub const GPIO_MODER_MODE1_1: u32 = 8;
pub const GPIO_MODER_MODE2_Pos: u32 = 4;
pub const GPIO_MODER_MODE2_Msk: u32 = 48;
pub const GPIO_MODER_MODE2: u32 = 48;
pub const GPIO_MODER_MODE2_0: u32 = 16;
pub const GPIO_MODER_MODE2_1: u32 = 32;
pub const GPIO_MODER_MODE3_Pos: u32 = 6;
pub const GPIO_MODER_MODE3_Msk: u32 = 192;
pub const GPIO_MODER_MODE3: u32 = 192;
pub const GPIO_MODER_MODE3_0: u32 = 64;
pub const GPIO_MODER_MODE3_1: u32 = 128;
pub const GPIO_MODER_MODE4_Pos: u32 = 8;
pub const GPIO_MODER_MODE4_Msk: u32 = 768;
pub const GPIO_MODER_MODE4: u32 = 768;
pub const GPIO_MODER_MODE4_0: u32 = 256;
pub const GPIO_MODER_MODE4_1: u32 = 512;
pub const GPIO_MODER_MODE5_Pos: u32 = 10;
pub const GPIO_MODER_MODE5_Msk: u32 = 3072;
pub const GPIO_MODER_MODE5: u32 = 3072;
pub const GPIO_MODER_MODE5_0: u32 = 1024;
pub const GPIO_MODER_MODE5_1: u32 = 2048;
pub const GPIO_MODER_MODE6_Pos: u32 = 12;
pub const GPIO_MODER_MODE6_Msk: u32 = 12288;
pub const GPIO_MODER_MODE6: u32 = 12288;
pub const GPIO_MODER_MODE6_0: u32 = 4096;
pub const GPIO_MODER_MODE6_1: u32 = 8192;
pub const GPIO_MODER_MODE7_Pos: u32 = 14;
pub const GPIO_MODER_MODE7_Msk: u32 = 49152;
pub const GPIO_MODER_MODE7: u32 = 49152;
pub const GPIO_MODER_MODE7_0: u32 = 16384;
pub const GPIO_MODER_MODE7_1: u32 = 32768;
pub const GPIO_MODER_MODE8_Pos: u32 = 16;
pub const GPIO_MODER_MODE8_Msk: u32 = 196608;
pub const GPIO_MODER_MODE8: u32 = 196608;
pub const GPIO_MODER_MODE8_0: u32 = 65536;
pub const GPIO_MODER_MODE8_1: u32 = 131072;
pub const GPIO_MODER_MODE9_Pos: u32 = 18;
pub const GPIO_MODER_MODE9_Msk: u32 = 786432;
pub const GPIO_MODER_MODE9: u32 = 786432;
pub const GPIO_MODER_MODE9_0: u32 = 262144;
pub const GPIO_MODER_MODE9_1: u32 = 524288;
pub const GPIO_MODER_MODE10_Pos: u32 = 20;
pub const GPIO_MODER_MODE10_Msk: u32 = 3145728;
pub const GPIO_MODER_MODE10: u32 = 3145728;
pub const GPIO_MODER_MODE10_0: u32 = 1048576;
pub const GPIO_MODER_MODE10_1: u32 = 2097152;
pub const GPIO_MODER_MODE11_Pos: u32 = 22;
pub const GPIO_MODER_MODE11_Msk: u32 = 12582912;
pub const GPIO_MODER_MODE11: u32 = 12582912;
pub const GPIO_MODER_MODE11_0: u32 = 4194304;
pub const GPIO_MODER_MODE11_1: u32 = 8388608;
pub const GPIO_MODER_MODE12_Pos: u32 = 24;
pub const GPIO_MODER_MODE12_Msk: u32 = 50331648;
pub const GPIO_MODER_MODE12: u32 = 50331648;
pub const GPIO_MODER_MODE12_0: u32 = 16777216;
pub const GPIO_MODER_MODE12_1: u32 = 33554432;
pub const GPIO_MODER_MODE13_Pos: u32 = 26;
pub const GPIO_MODER_MODE13_Msk: u32 = 201326592;
pub const GPIO_MODER_MODE13: u32 = 201326592;
pub const GPIO_MODER_MODE13_0: u32 = 67108864;
pub const GPIO_MODER_MODE13_1: u32 = 134217728;
pub const GPIO_MODER_MODE14_Pos: u32 = 28;
pub const GPIO_MODER_MODE14_Msk: u32 = 805306368;
pub const GPIO_MODER_MODE14: u32 = 805306368;
pub const GPIO_MODER_MODE14_0: u32 = 268435456;
pub const GPIO_MODER_MODE14_1: u32 = 536870912;
pub const GPIO_MODER_MODE15_Pos: u32 = 30;
pub const GPIO_MODER_MODE15_Msk: u32 = 3221225472;
pub const GPIO_MODER_MODE15: u32 = 3221225472;
pub const GPIO_MODER_MODE15_0: u32 = 1073741824;
pub const GPIO_MODER_MODE15_1: u32 = 2147483648;
pub const GPIO_MODER_MODER0_Pos: u32 = 0;
pub const GPIO_MODER_MODER0_Msk: u32 = 3;
pub const GPIO_MODER_MODER0: u32 = 3;
pub const GPIO_MODER_MODER0_0: u32 = 1;
pub const GPIO_MODER_MODER0_1: u32 = 2;
pub const GPIO_MODER_MODER1_Pos: u32 = 2;
pub const GPIO_MODER_MODER1_Msk: u32 = 12;
pub const GPIO_MODER_MODER1: u32 = 12;
pub const GPIO_MODER_MODER1_0: u32 = 4;
pub const GPIO_MODER_MODER1_1: u32 = 8;
pub const GPIO_MODER_MODER2_Pos: u32 = 4;
pub const GPIO_MODER_MODER2_Msk: u32 = 48;
pub const GPIO_MODER_MODER2: u32 = 48;
pub const GPIO_MODER_MODER2_0: u32 = 16;
pub const GPIO_MODER_MODER2_1: u32 = 32;
pub const GPIO_MODER_MODER3_Pos: u32 = 6;
pub const GPIO_MODER_MODER3_Msk: u32 = 192;
pub const GPIO_MODER_MODER3: u32 = 192;
pub const GPIO_MODER_MODER3_0: u32 = 64;
pub const GPIO_MODER_MODER3_1: u32 = 128;
pub const GPIO_MODER_MODER4_Pos: u32 = 8;
pub const GPIO_MODER_MODER4_Msk: u32 = 768;
pub const GPIO_MODER_MODER4: u32 = 768;
pub const GPIO_MODER_MODER4_0: u32 = 256;
pub const GPIO_MODER_MODER4_1: u32 = 512;
pub const GPIO_MODER_MODER5_Pos: u32 = 10;
pub const GPIO_MODER_MODER5_Msk: u32 = 3072;
pub const GPIO_MODER_MODER5: u32 = 3072;
pub const GPIO_MODER_MODER5_0: u32 = 1024;
pub const GPIO_MODER_MODER5_1: u32 = 2048;
pub const GPIO_MODER_MODER6_Pos: u32 = 12;
pub const GPIO_MODER_MODER6_Msk: u32 = 12288;
pub const GPIO_MODER_MODER6: u32 = 12288;
pub const GPIO_MODER_MODER6_0: u32 = 4096;
pub const GPIO_MODER_MODER6_1: u32 = 8192;
pub const GPIO_MODER_MODER7_Pos: u32 = 14;
pub const GPIO_MODER_MODER7_Msk: u32 = 49152;
pub const GPIO_MODER_MODER7: u32 = 49152;
pub const GPIO_MODER_MODER7_0: u32 = 16384;
pub const GPIO_MODER_MODER7_1: u32 = 32768;
pub const GPIO_MODER_MODER8_Pos: u32 = 16;
pub const GPIO_MODER_MODER8_Msk: u32 = 196608;
pub const GPIO_MODER_MODER8: u32 = 196608;
pub const GPIO_MODER_MODER8_0: u32 = 65536;
pub const GPIO_MODER_MODER8_1: u32 = 131072;
pub const GPIO_MODER_MODER9_Pos: u32 = 18;
pub const GPIO_MODER_MODER9_Msk: u32 = 786432;
pub const GPIO_MODER_MODER9: u32 = 786432;
pub const GPIO_MODER_MODER9_0: u32 = 262144;
pub const GPIO_MODER_MODER9_1: u32 = 524288;
pub const GPIO_MODER_MODER10_Pos: u32 = 20;
pub const GPIO_MODER_MODER10_Msk: u32 = 3145728;
pub const GPIO_MODER_MODER10: u32 = 3145728;
pub const GPIO_MODER_MODER10_0: u32 = 1048576;
pub const GPIO_MODER_MODER10_1: u32 = 2097152;
pub const GPIO_MODER_MODER11_Pos: u32 = 22;
pub const GPIO_MODER_MODER11_Msk: u32 = 12582912;
pub const GPIO_MODER_MODER11: u32 = 12582912;
pub const GPIO_MODER_MODER11_0: u32 = 4194304;
pub const GPIO_MODER_MODER11_1: u32 = 8388608;
pub const GPIO_MODER_MODER12_Pos: u32 = 24;
pub const GPIO_MODER_MODER12_Msk: u32 = 50331648;
pub const GPIO_MODER_MODER12: u32 = 50331648;
pub const GPIO_MODER_MODER12_0: u32 = 16777216;
pub const GPIO_MODER_MODER12_1: u32 = 33554432;
pub const GPIO_MODER_MODER13_Pos: u32 = 26;
pub const GPIO_MODER_MODER13_Msk: u32 = 201326592;
pub const GPIO_MODER_MODER13: u32 = 201326592;
pub const GPIO_MODER_MODER13_0: u32 = 67108864;
pub const GPIO_MODER_MODER13_1: u32 = 134217728;
pub const GPIO_MODER_MODER14_Pos: u32 = 28;
pub const GPIO_MODER_MODER14_Msk: u32 = 805306368;
pub const GPIO_MODER_MODER14: u32 = 805306368;
pub const GPIO_MODER_MODER14_0: u32 = 268435456;
pub const GPIO_MODER_MODER14_1: u32 = 536870912;
pub const GPIO_MODER_MODER15_Pos: u32 = 30;
pub const GPIO_MODER_MODER15_Msk: u32 = 3221225472;
pub const GPIO_MODER_MODER15: u32 = 3221225472;
pub const GPIO_MODER_MODER15_0: u32 = 1073741824;
pub const GPIO_MODER_MODER15_1: u32 = 2147483648;
pub const GPIO_OTYPER_OT0_Pos: u32 = 0;
pub const GPIO_OTYPER_OT0_Msk: u32 = 1;
pub const GPIO_OTYPER_OT0: u32 = 1;
pub const GPIO_OTYPER_OT1_Pos: u32 = 1;
pub const GPIO_OTYPER_OT1_Msk: u32 = 2;
pub const GPIO_OTYPER_OT1: u32 = 2;
pub const GPIO_OTYPER_OT2_Pos: u32 = 2;
pub const GPIO_OTYPER_OT2_Msk: u32 = 4;
pub const GPIO_OTYPER_OT2: u32 = 4;
pub const GPIO_OTYPER_OT3_Pos: u32 = 3;
pub const GPIO_OTYPER_OT3_Msk: u32 = 8;
pub const GPIO_OTYPER_OT3: u32 = 8;
pub const GPIO_OTYPER_OT4_Pos: u32 = 4;
pub const GPIO_OTYPER_OT4_Msk: u32 = 16;
pub const GPIO_OTYPER_OT4: u32 = 16;
pub const GPIO_OTYPER_OT5_Pos: u32 = 5;
pub const GPIO_OTYPER_OT5_Msk: u32 = 32;
pub const GPIO_OTYPER_OT5: u32 = 32;
pub const GPIO_OTYPER_OT6_Pos: u32 = 6;
pub const GPIO_OTYPER_OT6_Msk: u32 = 64;
pub const GPIO_OTYPER_OT6: u32 = 64;
pub const GPIO_OTYPER_OT7_Pos: u32 = 7;
pub const GPIO_OTYPER_OT7_Msk: u32 = 128;
pub const GPIO_OTYPER_OT7: u32 = 128;
pub const GPIO_OTYPER_OT8_Pos: u32 = 8;
pub const GPIO_OTYPER_OT8_Msk: u32 = 256;
pub const GPIO_OTYPER_OT8: u32 = 256;
pub const GPIO_OTYPER_OT9_Pos: u32 = 9;
pub const GPIO_OTYPER_OT9_Msk: u32 = 512;
pub const GPIO_OTYPER_OT9: u32 = 512;
pub const GPIO_OTYPER_OT10_Pos: u32 = 10;
pub const GPIO_OTYPER_OT10_Msk: u32 = 1024;
pub const GPIO_OTYPER_OT10: u32 = 1024;
pub const GPIO_OTYPER_OT11_Pos: u32 = 11;
pub const GPIO_OTYPER_OT11_Msk: u32 = 2048;
pub const GPIO_OTYPER_OT11: u32 = 2048;
pub const GPIO_OTYPER_OT12_Pos: u32 = 12;
pub const GPIO_OTYPER_OT12_Msk: u32 = 4096;
pub const GPIO_OTYPER_OT12: u32 = 4096;
pub const GPIO_OTYPER_OT13_Pos: u32 = 13;
pub const GPIO_OTYPER_OT13_Msk: u32 = 8192;
pub const GPIO_OTYPER_OT13: u32 = 8192;
pub const GPIO_OTYPER_OT14_Pos: u32 = 14;
pub const GPIO_OTYPER_OT14_Msk: u32 = 16384;
pub const GPIO_OTYPER_OT14: u32 = 16384;
pub const GPIO_OTYPER_OT15_Pos: u32 = 15;
pub const GPIO_OTYPER_OT15_Msk: u32 = 32768;
pub const GPIO_OTYPER_OT15: u32 = 32768;
pub const GPIO_OTYPER_OT_0: u32 = 1;
pub const GPIO_OTYPER_OT_1: u32 = 2;
pub const GPIO_OTYPER_OT_2: u32 = 4;
pub const GPIO_OTYPER_OT_3: u32 = 8;
pub const GPIO_OTYPER_OT_4: u32 = 16;
pub const GPIO_OTYPER_OT_5: u32 = 32;
pub const GPIO_OTYPER_OT_6: u32 = 64;
pub const GPIO_OTYPER_OT_7: u32 = 128;
pub const GPIO_OTYPER_OT_8: u32 = 256;
pub const GPIO_OTYPER_OT_9: u32 = 512;
pub const GPIO_OTYPER_OT_10: u32 = 1024;
pub const GPIO_OTYPER_OT_11: u32 = 2048;
pub const GPIO_OTYPER_OT_12: u32 = 4096;
pub const GPIO_OTYPER_OT_13: u32 = 8192;
pub const GPIO_OTYPER_OT_14: u32 = 16384;
pub const GPIO_OTYPER_OT_15: u32 = 32768;
pub const GPIO_OSPEEDR_OSPEED0_Pos: u32 = 0;
pub const GPIO_OSPEEDR_OSPEED0_Msk: u32 = 3;
pub const GPIO_OSPEEDR_OSPEED0: u32 = 3;
pub const GPIO_OSPEEDR_OSPEED0_0: u32 = 1;
pub const GPIO_OSPEEDR_OSPEED0_1: u32 = 2;
pub const GPIO_OSPEEDR_OSPEED1_Pos: u32 = 2;
pub const GPIO_OSPEEDR_OSPEED1_Msk: u32 = 12;
pub const GPIO_OSPEEDR_OSPEED1: u32 = 12;
pub const GPIO_OSPEEDR_OSPEED1_0: u32 = 4;
pub const GPIO_OSPEEDR_OSPEED1_1: u32 = 8;
pub const GPIO_OSPEEDR_OSPEED2_Pos: u32 = 4;
pub const GPIO_OSPEEDR_OSPEED2_Msk: u32 = 48;
pub const GPIO_OSPEEDR_OSPEED2: u32 = 48;
pub const GPIO_OSPEEDR_OSPEED2_0: u32 = 16;
pub const GPIO_OSPEEDR_OSPEED2_1: u32 = 32;
pub const GPIO_OSPEEDR_OSPEED3_Pos: u32 = 6;
pub const GPIO_OSPEEDR_OSPEED3_Msk: u32 = 192;
pub const GPIO_OSPEEDR_OSPEED3: u32 = 192;
pub const GPIO_OSPEEDR_OSPEED3_0: u32 = 64;
pub const GPIO_OSPEEDR_OSPEED3_1: u32 = 128;
pub const GPIO_OSPEEDR_OSPEED4_Pos: u32 = 8;
pub const GPIO_OSPEEDR_OSPEED4_Msk: u32 = 768;
pub const GPIO_OSPEEDR_OSPEED4: u32 = 768;
pub const GPIO_OSPEEDR_OSPEED4_0: u32 = 256;
pub const GPIO_OSPEEDR_OSPEED4_1: u32 = 512;
pub const GPIO_OSPEEDR_OSPEED5_Pos: u32 = 10;
pub const GPIO_OSPEEDR_OSPEED5_Msk: u32 = 3072;
pub const GPIO_OSPEEDR_OSPEED5: u32 = 3072;
pub const GPIO_OSPEEDR_OSPEED5_0: u32 = 1024;
pub const GPIO_OSPEEDR_OSPEED5_1: u32 = 2048;
pub const GPIO_OSPEEDR_OSPEED6_Pos: u32 = 12;
pub const GPIO_OSPEEDR_OSPEED6_Msk: u32 = 12288;
pub const GPIO_OSPEEDR_OSPEED6: u32 = 12288;
pub const GPIO_OSPEEDR_OSPEED6_0: u32 = 4096;
pub const GPIO_OSPEEDR_OSPEED6_1: u32 = 8192;
pub const GPIO_OSPEEDR_OSPEED7_Pos: u32 = 14;
pub const GPIO_OSPEEDR_OSPEED7_Msk: u32 = 49152;
pub const GPIO_OSPEEDR_OSPEED7: u32 = 49152;
pub const GPIO_OSPEEDR_OSPEED7_0: u32 = 16384;
pub const GPIO_OSPEEDR_OSPEED7_1: u32 = 32768;
pub const GPIO_OSPEEDR_OSPEED8_Pos: u32 = 16;
pub const GPIO_OSPEEDR_OSPEED8_Msk: u32 = 196608;
pub const GPIO_OSPEEDR_OSPEED8: u32 = 196608;
pub const GPIO_OSPEEDR_OSPEED8_0: u32 = 65536;
pub const GPIO_OSPEEDR_OSPEED8_1: u32 = 131072;
pub const GPIO_OSPEEDR_OSPEED9_Pos: u32 = 18;
pub const GPIO_OSPEEDR_OSPEED9_Msk: u32 = 786432;
pub const GPIO_OSPEEDR_OSPEED9: u32 = 786432;
pub const GPIO_OSPEEDR_OSPEED9_0: u32 = 262144;
pub const GPIO_OSPEEDR_OSPEED9_1: u32 = 524288;
pub const GPIO_OSPEEDR_OSPEED10_Pos: u32 = 20;
pub const GPIO_OSPEEDR_OSPEED10_Msk: u32 = 3145728;
pub const GPIO_OSPEEDR_OSPEED10: u32 = 3145728;
pub const GPIO_OSPEEDR_OSPEED10_0: u32 = 1048576;
pub const GPIO_OSPEEDR_OSPEED10_1: u32 = 2097152;
pub const GPIO_OSPEEDR_OSPEED11_Pos: u32 = 22;
pub const GPIO_OSPEEDR_OSPEED11_Msk: u32 = 12582912;
pub const GPIO_OSPEEDR_OSPEED11: u32 = 12582912;
pub const GPIO_OSPEEDR_OSPEED11_0: u32 = 4194304;
pub const GPIO_OSPEEDR_OSPEED11_1: u32 = 8388608;
pub const GPIO_OSPEEDR_OSPEED12_Pos: u32 = 24;
pub const GPIO_OSPEEDR_OSPEED12_Msk: u32 = 50331648;
pub const GPIO_OSPEEDR_OSPEED12: u32 = 50331648;
pub const GPIO_OSPEEDR_OSPEED12_0: u32 = 16777216;
pub const GPIO_OSPEEDR_OSPEED12_1: u32 = 33554432;
pub const GPIO_OSPEEDR_OSPEED13_Pos: u32 = 26;
pub const GPIO_OSPEEDR_OSPEED13_Msk: u32 = 201326592;
pub const GPIO_OSPEEDR_OSPEED13: u32 = 201326592;
pub const GPIO_OSPEEDR_OSPEED13_0: u32 = 67108864;
pub const GPIO_OSPEEDR_OSPEED13_1: u32 = 134217728;
pub const GPIO_OSPEEDR_OSPEED14_Pos: u32 = 28;
pub const GPIO_OSPEEDR_OSPEED14_Msk: u32 = 805306368;
pub const GPIO_OSPEEDR_OSPEED14: u32 = 805306368;
pub const GPIO_OSPEEDR_OSPEED14_0: u32 = 268435456;
pub const GPIO_OSPEEDR_OSPEED14_1: u32 = 536870912;
pub const GPIO_OSPEEDR_OSPEED15_Pos: u32 = 30;
pub const GPIO_OSPEEDR_OSPEED15_Msk: u32 = 3221225472;
pub const GPIO_OSPEEDR_OSPEED15: u32 = 3221225472;
pub const GPIO_OSPEEDR_OSPEED15_0: u32 = 1073741824;
pub const GPIO_OSPEEDR_OSPEED15_1: u32 = 2147483648;
pub const GPIO_OSPEEDER_OSPEEDR0: u32 = 3;
pub const GPIO_OSPEEDER_OSPEEDR0_0: u32 = 1;
pub const GPIO_OSPEEDER_OSPEEDR0_1: u32 = 2;
pub const GPIO_OSPEEDER_OSPEEDR1: u32 = 12;
pub const GPIO_OSPEEDER_OSPEEDR1_0: u32 = 4;
pub const GPIO_OSPEEDER_OSPEEDR1_1: u32 = 8;
pub const GPIO_OSPEEDER_OSPEEDR2: u32 = 48;
pub const GPIO_OSPEEDER_OSPEEDR2_0: u32 = 16;
pub const GPIO_OSPEEDER_OSPEEDR2_1: u32 = 32;
pub const GPIO_OSPEEDER_OSPEEDR3: u32 = 192;
pub const GPIO_OSPEEDER_OSPEEDR3_0: u32 = 64;
pub const GPIO_OSPEEDER_OSPEEDR3_1: u32 = 128;
pub const GPIO_OSPEEDER_OSPEEDR4: u32 = 768;
pub const GPIO_OSPEEDER_OSPEEDR4_0: u32 = 256;
pub const GPIO_OSPEEDER_OSPEEDR4_1: u32 = 512;
pub const GPIO_OSPEEDER_OSPEEDR5: u32 = 3072;
pub const GPIO_OSPEEDER_OSPEEDR5_0: u32 = 1024;
pub const GPIO_OSPEEDER_OSPEEDR5_1: u32 = 2048;
pub const GPIO_OSPEEDER_OSPEEDR6: u32 = 12288;
pub const GPIO_OSPEEDER_OSPEEDR6_0: u32 = 4096;
pub const GPIO_OSPEEDER_OSPEEDR6_1: u32 = 8192;
pub const GPIO_OSPEEDER_OSPEEDR7: u32 = 49152;
pub const GPIO_OSPEEDER_OSPEEDR7_0: u32 = 16384;
pub const GPIO_OSPEEDER_OSPEEDR7_1: u32 = 32768;
pub const GPIO_OSPEEDER_OSPEEDR8: u32 = 196608;
pub const GPIO_OSPEEDER_OSPEEDR8_0: u32 = 65536;
pub const GPIO_OSPEEDER_OSPEEDR8_1: u32 = 131072;
pub const GPIO_OSPEEDER_OSPEEDR9: u32 = 786432;
pub const GPIO_OSPEEDER_OSPEEDR9_0: u32 = 262144;
pub const GPIO_OSPEEDER_OSPEEDR9_1: u32 = 524288;
pub const GPIO_OSPEEDER_OSPEEDR10: u32 = 3145728;
pub const GPIO_OSPEEDER_OSPEEDR10_0: u32 = 1048576;
pub const GPIO_OSPEEDER_OSPEEDR10_1: u32 = 2097152;
pub const GPIO_OSPEEDER_OSPEEDR11: u32 = 12582912;
pub const GPIO_OSPEEDER_OSPEEDR11_0: u32 = 4194304;
pub const GPIO_OSPEEDER_OSPEEDR11_1: u32 = 8388608;
pub const GPIO_OSPEEDER_OSPEEDR12: u32 = 50331648;
pub const GPIO_OSPEEDER_OSPEEDR12_0: u32 = 16777216;
pub const GPIO_OSPEEDER_OSPEEDR12_1: u32 = 33554432;
pub const GPIO_OSPEEDER_OSPEEDR13: u32 = 201326592;
pub const GPIO_OSPEEDER_OSPEEDR13_0: u32 = 67108864;
pub const GPIO_OSPEEDER_OSPEEDR13_1: u32 = 134217728;
pub const GPIO_OSPEEDER_OSPEEDR14: u32 = 805306368;
pub const GPIO_OSPEEDER_OSPEEDR14_0: u32 = 268435456;
pub const GPIO_OSPEEDER_OSPEEDR14_1: u32 = 536870912;
pub const GPIO_OSPEEDER_OSPEEDR15: u32 = 3221225472;
pub const GPIO_OSPEEDER_OSPEEDR15_0: u32 = 1073741824;
pub const GPIO_OSPEEDER_OSPEEDR15_1: u32 = 2147483648;
pub const GPIO_PUPDR_PUPD0_Pos: u32 = 0;
pub const GPIO_PUPDR_PUPD0_Msk: u32 = 3;
pub const GPIO_PUPDR_PUPD0: u32 = 3;
pub const GPIO_PUPDR_PUPD0_0: u32 = 1;
pub const GPIO_PUPDR_PUPD0_1: u32 = 2;
pub const GPIO_PUPDR_PUPD1_Pos: u32 = 2;
pub const GPIO_PUPDR_PUPD1_Msk: u32 = 12;
pub const GPIO_PUPDR_PUPD1: u32 = 12;
pub const GPIO_PUPDR_PUPD1_0: u32 = 4;
pub const GPIO_PUPDR_PUPD1_1: u32 = 8;
pub const GPIO_PUPDR_PUPD2_Pos: u32 = 4;
pub const GPIO_PUPDR_PUPD2_Msk: u32 = 48;
pub const GPIO_PUPDR_PUPD2: u32 = 48;
pub const GPIO_PUPDR_PUPD2_0: u32 = 16;
pub const GPIO_PUPDR_PUPD2_1: u32 = 32;
pub const GPIO_PUPDR_PUPD3_Pos: u32 = 6;
pub const GPIO_PUPDR_PUPD3_Msk: u32 = 192;
pub const GPIO_PUPDR_PUPD3: u32 = 192;
pub const GPIO_PUPDR_PUPD3_0: u32 = 64;
pub const GPIO_PUPDR_PUPD3_1: u32 = 128;
pub const GPIO_PUPDR_PUPD4_Pos: u32 = 8;
pub const GPIO_PUPDR_PUPD4_Msk: u32 = 768;
pub const GPIO_PUPDR_PUPD4: u32 = 768;
pub const GPIO_PUPDR_PUPD4_0: u32 = 256;
pub const GPIO_PUPDR_PUPD4_1: u32 = 512;
pub const GPIO_PUPDR_PUPD5_Pos: u32 = 10;
pub const GPIO_PUPDR_PUPD5_Msk: u32 = 3072;
pub const GPIO_PUPDR_PUPD5: u32 = 3072;
pub const GPIO_PUPDR_PUPD5_0: u32 = 1024;
pub const GPIO_PUPDR_PUPD5_1: u32 = 2048;
pub const GPIO_PUPDR_PUPD6_Pos: u32 = 12;
pub const GPIO_PUPDR_PUPD6_Msk: u32 = 12288;
pub const GPIO_PUPDR_PUPD6: u32 = 12288;
pub const GPIO_PUPDR_PUPD6_0: u32 = 4096;
pub const GPIO_PUPDR_PUPD6_1: u32 = 8192;
pub const GPIO_PUPDR_PUPD7_Pos: u32 = 14;
pub const GPIO_PUPDR_PUPD7_Msk: u32 = 49152;
pub const GPIO_PUPDR_PUPD7: u32 = 49152;
pub const GPIO_PUPDR_PUPD7_0: u32 = 16384;
pub const GPIO_PUPDR_PUPD7_1: u32 = 32768;
pub const GPIO_PUPDR_PUPD8_Pos: u32 = 16;
pub const GPIO_PUPDR_PUPD8_Msk: u32 = 196608;
pub const GPIO_PUPDR_PUPD8: u32 = 196608;
pub const GPIO_PUPDR_PUPD8_0: u32 = 65536;
pub const GPIO_PUPDR_PUPD8_1: u32 = 131072;
pub const GPIO_PUPDR_PUPD9_Pos: u32 = 18;
pub const GPIO_PUPDR_PUPD9_Msk: u32 = 786432;
pub const GPIO_PUPDR_PUPD9: u32 = 786432;
pub const GPIO_PUPDR_PUPD9_0: u32 = 262144;
pub const GPIO_PUPDR_PUPD9_1: u32 = 524288;
pub const GPIO_PUPDR_PUPD10_Pos: u32 = 20;
pub const GPIO_PUPDR_PUPD10_Msk: u32 = 3145728;
pub const GPIO_PUPDR_PUPD10: u32 = 3145728;
pub const GPIO_PUPDR_PUPD10_0: u32 = 1048576;
pub const GPIO_PUPDR_PUPD10_1: u32 = 2097152;
pub const GPIO_PUPDR_PUPD11_Pos: u32 = 22;
pub const GPIO_PUPDR_PUPD11_Msk: u32 = 12582912;
pub const GPIO_PUPDR_PUPD11: u32 = 12582912;
pub const GPIO_PUPDR_PUPD11_0: u32 = 4194304;
pub const GPIO_PUPDR_PUPD11_1: u32 = 8388608;
pub const GPIO_PUPDR_PUPD12_Pos: u32 = 24;
pub const GPIO_PUPDR_PUPD12_Msk: u32 = 50331648;
pub const GPIO_PUPDR_PUPD12: u32 = 50331648;
pub const GPIO_PUPDR_PUPD12_0: u32 = 16777216;
pub const GPIO_PUPDR_PUPD12_1: u32 = 33554432;
pub const GPIO_PUPDR_PUPD13_Pos: u32 = 26;
pub const GPIO_PUPDR_PUPD13_Msk: u32 = 201326592;
pub const GPIO_PUPDR_PUPD13: u32 = 201326592;
pub const GPIO_PUPDR_PUPD13_0: u32 = 67108864;
pub const GPIO_PUPDR_PUPD13_1: u32 = 134217728;
pub const GPIO_PUPDR_PUPD14_Pos: u32 = 28;
pub const GPIO_PUPDR_PUPD14_Msk: u32 = 805306368;
pub const GPIO_PUPDR_PUPD14: u32 = 805306368;
pub const GPIO_PUPDR_PUPD14_0: u32 = 268435456;
pub const GPIO_PUPDR_PUPD14_1: u32 = 536870912;
pub const GPIO_PUPDR_PUPD15_Pos: u32 = 30;
pub const GPIO_PUPDR_PUPD15_Msk: u32 = 3221225472;
pub const GPIO_PUPDR_PUPD15: u32 = 3221225472;
pub const GPIO_PUPDR_PUPD15_0: u32 = 1073741824;
pub const GPIO_PUPDR_PUPD15_1: u32 = 2147483648;
pub const GPIO_PUPDR_PUPDR0: u32 = 3;
pub const GPIO_PUPDR_PUPDR0_0: u32 = 1;
pub const GPIO_PUPDR_PUPDR0_1: u32 = 2;
pub const GPIO_PUPDR_PUPDR1: u32 = 12;
pub const GPIO_PUPDR_PUPDR1_0: u32 = 4;
pub const GPIO_PUPDR_PUPDR1_1: u32 = 8;
pub const GPIO_PUPDR_PUPDR2: u32 = 48;
pub const GPIO_PUPDR_PUPDR2_0: u32 = 16;
pub const GPIO_PUPDR_PUPDR2_1: u32 = 32;
pub const GPIO_PUPDR_PUPDR3: u32 = 192;
pub const GPIO_PUPDR_PUPDR3_0: u32 = 64;
pub const GPIO_PUPDR_PUPDR3_1: u32 = 128;
pub const GPIO_PUPDR_PUPDR4: u32 = 768;
pub const GPIO_PUPDR_PUPDR4_0: u32 = 256;
pub const GPIO_PUPDR_PUPDR4_1: u32 = 512;
pub const GPIO_PUPDR_PUPDR5: u32 = 3072;
pub const GPIO_PUPDR_PUPDR5_0: u32 = 1024;
pub const GPIO_PUPDR_PUPDR5_1: u32 = 2048;
pub const GPIO_PUPDR_PUPDR6: u32 = 12288;
pub const GPIO_PUPDR_PUPDR6_0: u32 = 4096;
pub const GPIO_PUPDR_PUPDR6_1: u32 = 8192;
pub const GPIO_PUPDR_PUPDR7: u32 = 49152;
pub const GPIO_PUPDR_PUPDR7_0: u32 = 16384;
pub const GPIO_PUPDR_PUPDR7_1: u32 = 32768;
pub const GPIO_PUPDR_PUPDR8: u32 = 196608;
pub const GPIO_PUPDR_PUPDR8_0: u32 = 65536;
pub const GPIO_PUPDR_PUPDR8_1: u32 = 131072;
pub const GPIO_PUPDR_PUPDR9: u32 = 786432;
pub const GPIO_PUPDR_PUPDR9_0: u32 = 262144;
pub const GPIO_PUPDR_PUPDR9_1: u32 = 524288;
pub const GPIO_PUPDR_PUPDR10: u32 = 3145728;
pub const GPIO_PUPDR_PUPDR10_0: u32 = 1048576;
pub const GPIO_PUPDR_PUPDR10_1: u32 = 2097152;
pub const GPIO_PUPDR_PUPDR11: u32 = 12582912;
pub const GPIO_PUPDR_PUPDR11_0: u32 = 4194304;
pub const GPIO_PUPDR_PUPDR11_1: u32 = 8388608;
pub const GPIO_PUPDR_PUPDR12: u32 = 50331648;
pub const GPIO_PUPDR_PUPDR12_0: u32 = 16777216;
pub const GPIO_PUPDR_PUPDR12_1: u32 = 33554432;
pub const GPIO_PUPDR_PUPDR13: u32 = 201326592;
pub const GPIO_PUPDR_PUPDR13_0: u32 = 67108864;
pub const GPIO_PUPDR_PUPDR13_1: u32 = 134217728;
pub const GPIO_PUPDR_PUPDR14: u32 = 805306368;
pub const GPIO_PUPDR_PUPDR14_0: u32 = 268435456;
pub const GPIO_PUPDR_PUPDR14_1: u32 = 536870912;
pub const GPIO_PUPDR_PUPDR15: u32 = 3221225472;
pub const GPIO_PUPDR_PUPDR15_0: u32 = 1073741824;
pub const GPIO_PUPDR_PUPDR15_1: u32 = 2147483648;
pub const GPIO_IDR_ID0_Pos: u32 = 0;
pub const GPIO_IDR_ID0_Msk: u32 = 1;
pub const GPIO_IDR_ID0: u32 = 1;
pub const GPIO_IDR_ID1_Pos: u32 = 1;
pub const GPIO_IDR_ID1_Msk: u32 = 2;
pub const GPIO_IDR_ID1: u32 = 2;
pub const GPIO_IDR_ID2_Pos: u32 = 2;
pub const GPIO_IDR_ID2_Msk: u32 = 4;
pub const GPIO_IDR_ID2: u32 = 4;
pub const GPIO_IDR_ID3_Pos: u32 = 3;
pub const GPIO_IDR_ID3_Msk: u32 = 8;
pub const GPIO_IDR_ID3: u32 = 8;
pub const GPIO_IDR_ID4_Pos: u32 = 4;
pub const GPIO_IDR_ID4_Msk: u32 = 16;
pub const GPIO_IDR_ID4: u32 = 16;
pub const GPIO_IDR_ID5_Pos: u32 = 5;
pub const GPIO_IDR_ID5_Msk: u32 = 32;
pub const GPIO_IDR_ID5: u32 = 32;
pub const GPIO_IDR_ID6_Pos: u32 = 6;
pub const GPIO_IDR_ID6_Msk: u32 = 64;
pub const GPIO_IDR_ID6: u32 = 64;
pub const GPIO_IDR_ID7_Pos: u32 = 7;
pub const GPIO_IDR_ID7_Msk: u32 = 128;
pub const GPIO_IDR_ID7: u32 = 128;
pub const GPIO_IDR_ID8_Pos: u32 = 8;
pub const GPIO_IDR_ID8_Msk: u32 = 256;
pub const GPIO_IDR_ID8: u32 = 256;
pub const GPIO_IDR_ID9_Pos: u32 = 9;
pub const GPIO_IDR_ID9_Msk: u32 = 512;
pub const GPIO_IDR_ID9: u32 = 512;
pub const GPIO_IDR_ID10_Pos: u32 = 10;
pub const GPIO_IDR_ID10_Msk: u32 = 1024;
pub const GPIO_IDR_ID10: u32 = 1024;
pub const GPIO_IDR_ID11_Pos: u32 = 11;
pub const GPIO_IDR_ID11_Msk: u32 = 2048;
pub const GPIO_IDR_ID11: u32 = 2048;
pub const GPIO_IDR_ID12_Pos: u32 = 12;
pub const GPIO_IDR_ID12_Msk: u32 = 4096;
pub const GPIO_IDR_ID12: u32 = 4096;
pub const GPIO_IDR_ID13_Pos: u32 = 13;
pub const GPIO_IDR_ID13_Msk: u32 = 8192;
pub const GPIO_IDR_ID13: u32 = 8192;
pub const GPIO_IDR_ID14_Pos: u32 = 14;
pub const GPIO_IDR_ID14_Msk: u32 = 16384;
pub const GPIO_IDR_ID14: u32 = 16384;
pub const GPIO_IDR_ID15_Pos: u32 = 15;
pub const GPIO_IDR_ID15_Msk: u32 = 32768;
pub const GPIO_IDR_ID15: u32 = 32768;
pub const GPIO_IDR_IDR_0: u32 = 1;
pub const GPIO_IDR_IDR_1: u32 = 2;
pub const GPIO_IDR_IDR_2: u32 = 4;
pub const GPIO_IDR_IDR_3: u32 = 8;
pub const GPIO_IDR_IDR_4: u32 = 16;
pub const GPIO_IDR_IDR_5: u32 = 32;
pub const GPIO_IDR_IDR_6: u32 = 64;
pub const GPIO_IDR_IDR_7: u32 = 128;
pub const GPIO_IDR_IDR_8: u32 = 256;
pub const GPIO_IDR_IDR_9: u32 = 512;
pub const GPIO_IDR_IDR_10: u32 = 1024;
pub const GPIO_IDR_IDR_11: u32 = 2048;
pub const GPIO_IDR_IDR_12: u32 = 4096;
pub const GPIO_IDR_IDR_13: u32 = 8192;
pub const GPIO_IDR_IDR_14: u32 = 16384;
pub const GPIO_IDR_IDR_15: u32 = 32768;
pub const GPIO_ODR_OD0_Pos: u32 = 0;
pub const GPIO_ODR_OD0_Msk: u32 = 1;
pub const GPIO_ODR_OD0: u32 = 1;
pub const GPIO_ODR_OD1_Pos: u32 = 1;
pub const GPIO_ODR_OD1_Msk: u32 = 2;
pub const GPIO_ODR_OD1: u32 = 2;
pub const GPIO_ODR_OD2_Pos: u32 = 2;
pub const GPIO_ODR_OD2_Msk: u32 = 4;
pub const GPIO_ODR_OD2: u32 = 4;
pub const GPIO_ODR_OD3_Pos: u32 = 3;
pub const GPIO_ODR_OD3_Msk: u32 = 8;
pub const GPIO_ODR_OD3: u32 = 8;
pub const GPIO_ODR_OD4_Pos: u32 = 4;
pub const GPIO_ODR_OD4_Msk: u32 = 16;
pub const GPIO_ODR_OD4: u32 = 16;
pub const GPIO_ODR_OD5_Pos: u32 = 5;
pub const GPIO_ODR_OD5_Msk: u32 = 32;
pub const GPIO_ODR_OD5: u32 = 32;
pub const GPIO_ODR_OD6_Pos: u32 = 6;
pub const GPIO_ODR_OD6_Msk: u32 = 64;
pub const GPIO_ODR_OD6: u32 = 64;
pub const GPIO_ODR_OD7_Pos: u32 = 7;
pub const GPIO_ODR_OD7_Msk: u32 = 128;
pub const GPIO_ODR_OD7: u32 = 128;
pub const GPIO_ODR_OD8_Pos: u32 = 8;
pub const GPIO_ODR_OD8_Msk: u32 = 256;
pub const GPIO_ODR_OD8: u32 = 256;
pub const GPIO_ODR_OD9_Pos: u32 = 9;
pub const GPIO_ODR_OD9_Msk: u32 = 512;
pub const GPIO_ODR_OD9: u32 = 512;
pub const GPIO_ODR_OD10_Pos: u32 = 10;
pub const GPIO_ODR_OD10_Msk: u32 = 1024;
pub const GPIO_ODR_OD10: u32 = 1024;
pub const GPIO_ODR_OD11_Pos: u32 = 11;
pub const GPIO_ODR_OD11_Msk: u32 = 2048;
pub const GPIO_ODR_OD11: u32 = 2048;
pub const GPIO_ODR_OD12_Pos: u32 = 12;
pub const GPIO_ODR_OD12_Msk: u32 = 4096;
pub const GPIO_ODR_OD12: u32 = 4096;
pub const GPIO_ODR_OD13_Pos: u32 = 13;
pub const GPIO_ODR_OD13_Msk: u32 = 8192;
pub const GPIO_ODR_OD13: u32 = 8192;
pub const GPIO_ODR_OD14_Pos: u32 = 14;
pub const GPIO_ODR_OD14_Msk: u32 = 16384;
pub const GPIO_ODR_OD14: u32 = 16384;
pub const GPIO_ODR_OD15_Pos: u32 = 15;
pub const GPIO_ODR_OD15_Msk: u32 = 32768;
pub const GPIO_ODR_OD15: u32 = 32768;
pub const GPIO_ODR_ODR_0: u32 = 1;
pub const GPIO_ODR_ODR_1: u32 = 2;
pub const GPIO_ODR_ODR_2: u32 = 4;
pub const GPIO_ODR_ODR_3: u32 = 8;
pub const GPIO_ODR_ODR_4: u32 = 16;
pub const GPIO_ODR_ODR_5: u32 = 32;
pub const GPIO_ODR_ODR_6: u32 = 64;
pub const GPIO_ODR_ODR_7: u32 = 128;
pub const GPIO_ODR_ODR_8: u32 = 256;
pub const GPIO_ODR_ODR_9: u32 = 512;
pub const GPIO_ODR_ODR_10: u32 = 1024;
pub const GPIO_ODR_ODR_11: u32 = 2048;
pub const GPIO_ODR_ODR_12: u32 = 4096;
pub const GPIO_ODR_ODR_13: u32 = 8192;
pub const GPIO_ODR_ODR_14: u32 = 16384;
pub const GPIO_ODR_ODR_15: u32 = 32768;
pub const GPIO_BSRR_BS0_Pos: u32 = 0;
pub const GPIO_BSRR_BS0_Msk: u32 = 1;
pub const GPIO_BSRR_BS0: u32 = 1;
pub const GPIO_BSRR_BS1_Pos: u32 = 1;
pub const GPIO_BSRR_BS1_Msk: u32 = 2;
pub const GPIO_BSRR_BS1: u32 = 2;
pub const GPIO_BSRR_BS2_Pos: u32 = 2;
pub const GPIO_BSRR_BS2_Msk: u32 = 4;
pub const GPIO_BSRR_BS2: u32 = 4;
pub const GPIO_BSRR_BS3_Pos: u32 = 3;
pub const GPIO_BSRR_BS3_Msk: u32 = 8;
pub const GPIO_BSRR_BS3: u32 = 8;
pub const GPIO_BSRR_BS4_Pos: u32 = 4;
pub const GPIO_BSRR_BS4_Msk: u32 = 16;
pub const GPIO_BSRR_BS4: u32 = 16;
pub const GPIO_BSRR_BS5_Pos: u32 = 5;
pub const GPIO_BSRR_BS5_Msk: u32 = 32;
pub const GPIO_BSRR_BS5: u32 = 32;
pub const GPIO_BSRR_BS6_Pos: u32 = 6;
pub const GPIO_BSRR_BS6_Msk: u32 = 64;
pub const GPIO_BSRR_BS6: u32 = 64;
pub const GPIO_BSRR_BS7_Pos: u32 = 7;
pub const GPIO_BSRR_BS7_Msk: u32 = 128;
pub const GPIO_BSRR_BS7: u32 = 128;
pub const GPIO_BSRR_BS8_Pos: u32 = 8;
pub const GPIO_BSRR_BS8_Msk: u32 = 256;
pub const GPIO_BSRR_BS8: u32 = 256;
pub const GPIO_BSRR_BS9_Pos: u32 = 9;
pub const GPIO_BSRR_BS9_Msk: u32 = 512;
pub const GPIO_BSRR_BS9: u32 = 512;
pub const GPIO_BSRR_BS10_Pos: u32 = 10;
pub const GPIO_BSRR_BS10_Msk: u32 = 1024;
pub const GPIO_BSRR_BS10: u32 = 1024;
pub const GPIO_BSRR_BS11_Pos: u32 = 11;
pub const GPIO_BSRR_BS11_Msk: u32 = 2048;
pub const GPIO_BSRR_BS11: u32 = 2048;
pub const GPIO_BSRR_BS12_Pos: u32 = 12;
pub const GPIO_BSRR_BS12_Msk: u32 = 4096;
pub const GPIO_BSRR_BS12: u32 = 4096;
pub const GPIO_BSRR_BS13_Pos: u32 = 13;
pub const GPIO_BSRR_BS13_Msk: u32 = 8192;
pub const GPIO_BSRR_BS13: u32 = 8192;
pub const GPIO_BSRR_BS14_Pos: u32 = 14;
pub const GPIO_BSRR_BS14_Msk: u32 = 16384;
pub const GPIO_BSRR_BS14: u32 = 16384;
pub const GPIO_BSRR_BS15_Pos: u32 = 15;
pub const GPIO_BSRR_BS15_Msk: u32 = 32768;
pub const GPIO_BSRR_BS15: u32 = 32768;
pub const GPIO_BSRR_BR0_Pos: u32 = 16;
pub const GPIO_BSRR_BR0_Msk: u32 = 65536;
pub const GPIO_BSRR_BR0: u32 = 65536;
pub const GPIO_BSRR_BR1_Pos: u32 = 17;
pub const GPIO_BSRR_BR1_Msk: u32 = 131072;
pub const GPIO_BSRR_BR1: u32 = 131072;
pub const GPIO_BSRR_BR2_Pos: u32 = 18;
pub const GPIO_BSRR_BR2_Msk: u32 = 262144;
pub const GPIO_BSRR_BR2: u32 = 262144;
pub const GPIO_BSRR_BR3_Pos: u32 = 19;
pub const GPIO_BSRR_BR3_Msk: u32 = 524288;
pub const GPIO_BSRR_BR3: u32 = 524288;
pub const GPIO_BSRR_BR4_Pos: u32 = 20;
pub const GPIO_BSRR_BR4_Msk: u32 = 1048576;
pub const GPIO_BSRR_BR4: u32 = 1048576;
pub const GPIO_BSRR_BR5_Pos: u32 = 21;
pub const GPIO_BSRR_BR5_Msk: u32 = 2097152;
pub const GPIO_BSRR_BR5: u32 = 2097152;
pub const GPIO_BSRR_BR6_Pos: u32 = 22;
pub const GPIO_BSRR_BR6_Msk: u32 = 4194304;
pub const GPIO_BSRR_BR6: u32 = 4194304;
pub const GPIO_BSRR_BR7_Pos: u32 = 23;
pub const GPIO_BSRR_BR7_Msk: u32 = 8388608;
pub const GPIO_BSRR_BR7: u32 = 8388608;
pub const GPIO_BSRR_BR8_Pos: u32 = 24;
pub const GPIO_BSRR_BR8_Msk: u32 = 16777216;
pub const GPIO_BSRR_BR8: u32 = 16777216;
pub const GPIO_BSRR_BR9_Pos: u32 = 25;
pub const GPIO_BSRR_BR9_Msk: u32 = 33554432;
pub const GPIO_BSRR_BR9: u32 = 33554432;
pub const GPIO_BSRR_BR10_Pos: u32 = 26;
pub const GPIO_BSRR_BR10_Msk: u32 = 67108864;
pub const GPIO_BSRR_BR10: u32 = 67108864;
pub const GPIO_BSRR_BR11_Pos: u32 = 27;
pub const GPIO_BSRR_BR11_Msk: u32 = 134217728;
pub const GPIO_BSRR_BR11: u32 = 134217728;
pub const GPIO_BSRR_BR12_Pos: u32 = 28;
pub const GPIO_BSRR_BR12_Msk: u32 = 268435456;
pub const GPIO_BSRR_BR12: u32 = 268435456;
pub const GPIO_BSRR_BR13_Pos: u32 = 29;
pub const GPIO_BSRR_BR13_Msk: u32 = 536870912;
pub const GPIO_BSRR_BR13: u32 = 536870912;
pub const GPIO_BSRR_BR14_Pos: u32 = 30;
pub const GPIO_BSRR_BR14_Msk: u32 = 1073741824;
pub const GPIO_BSRR_BR14: u32 = 1073741824;
pub const GPIO_BSRR_BR15_Pos: u32 = 31;
pub const GPIO_BSRR_BR15_Msk: u32 = 2147483648;
pub const GPIO_BSRR_BR15: u32 = 2147483648;
pub const GPIO_BSRR_BS_0: u32 = 1;
pub const GPIO_BSRR_BS_1: u32 = 2;
pub const GPIO_BSRR_BS_2: u32 = 4;
pub const GPIO_BSRR_BS_3: u32 = 8;
pub const GPIO_BSRR_BS_4: u32 = 16;
pub const GPIO_BSRR_BS_5: u32 = 32;
pub const GPIO_BSRR_BS_6: u32 = 64;
pub const GPIO_BSRR_BS_7: u32 = 128;
pub const GPIO_BSRR_BS_8: u32 = 256;
pub const GPIO_BSRR_BS_9: u32 = 512;
pub const GPIO_BSRR_BS_10: u32 = 1024;
pub const GPIO_BSRR_BS_11: u32 = 2048;
pub const GPIO_BSRR_BS_12: u32 = 4096;
pub const GPIO_BSRR_BS_13: u32 = 8192;
pub const GPIO_BSRR_BS_14: u32 = 16384;
pub const GPIO_BSRR_BS_15: u32 = 32768;
pub const GPIO_BSRR_BR_0: u32 = 65536;
pub const GPIO_BSRR_BR_1: u32 = 131072;
pub const GPIO_BSRR_BR_2: u32 = 262144;
pub const GPIO_BSRR_BR_3: u32 = 524288;
pub const GPIO_BSRR_BR_4: u32 = 1048576;
pub const GPIO_BSRR_BR_5: u32 = 2097152;
pub const GPIO_BSRR_BR_6: u32 = 4194304;
pub const GPIO_BSRR_BR_7: u32 = 8388608;
pub const GPIO_BSRR_BR_8: u32 = 16777216;
pub const GPIO_BSRR_BR_9: u32 = 33554432;
pub const GPIO_BSRR_BR_10: u32 = 67108864;
pub const GPIO_BSRR_BR_11: u32 = 134217728;
pub const GPIO_BSRR_BR_12: u32 = 268435456;
pub const GPIO_BSRR_BR_13: u32 = 536870912;
pub const GPIO_BSRR_BR_14: u32 = 1073741824;
pub const GPIO_BSRR_BR_15: u32 = 2147483648;
pub const GPIO_LCKR_LCK0_Pos: u32 = 0;
pub const GPIO_LCKR_LCK0_Msk: u32 = 1;
pub const GPIO_LCKR_LCK0: u32 = 1;
pub const GPIO_LCKR_LCK1_Pos: u32 = 1;
pub const GPIO_LCKR_LCK1_Msk: u32 = 2;
pub const GPIO_LCKR_LCK1: u32 = 2;
pub const GPIO_LCKR_LCK2_Pos: u32 = 2;
pub const GPIO_LCKR_LCK2_Msk: u32 = 4;
pub const GPIO_LCKR_LCK2: u32 = 4;
pub const GPIO_LCKR_LCK3_Pos: u32 = 3;
pub const GPIO_LCKR_LCK3_Msk: u32 = 8;
pub const GPIO_LCKR_LCK3: u32 = 8;
pub const GPIO_LCKR_LCK4_Pos: u32 = 4;
pub const GPIO_LCKR_LCK4_Msk: u32 = 16;
pub const GPIO_LCKR_LCK4: u32 = 16;
pub const GPIO_LCKR_LCK5_Pos: u32 = 5;
pub const GPIO_LCKR_LCK5_Msk: u32 = 32;
pub const GPIO_LCKR_LCK5: u32 = 32;
pub const GPIO_LCKR_LCK6_Pos: u32 = 6;
pub const GPIO_LCKR_LCK6_Msk: u32 = 64;
pub const GPIO_LCKR_LCK6: u32 = 64;
pub const GPIO_LCKR_LCK7_Pos: u32 = 7;
pub const GPIO_LCKR_LCK7_Msk: u32 = 128;
pub const GPIO_LCKR_LCK7: u32 = 128;
pub const GPIO_LCKR_LCK8_Pos: u32 = 8;
pub const GPIO_LCKR_LCK8_Msk: u32 = 256;
pub const GPIO_LCKR_LCK8: u32 = 256;
pub const GPIO_LCKR_LCK9_Pos: u32 = 9;
pub const GPIO_LCKR_LCK9_Msk: u32 = 512;
pub const GPIO_LCKR_LCK9: u32 = 512;
pub const GPIO_LCKR_LCK10_Pos: u32 = 10;
pub const GPIO_LCKR_LCK10_Msk: u32 = 1024;
pub const GPIO_LCKR_LCK10: u32 = 1024;
pub const GPIO_LCKR_LCK11_Pos: u32 = 11;
pub const GPIO_LCKR_LCK11_Msk: u32 = 2048;
pub const GPIO_LCKR_LCK11: u32 = 2048;
pub const GPIO_LCKR_LCK12_Pos: u32 = 12;
pub const GPIO_LCKR_LCK12_Msk: u32 = 4096;
pub const GPIO_LCKR_LCK12: u32 = 4096;
pub const GPIO_LCKR_LCK13_Pos: u32 = 13;
pub const GPIO_LCKR_LCK13_Msk: u32 = 8192;
pub const GPIO_LCKR_LCK13: u32 = 8192;
pub const GPIO_LCKR_LCK14_Pos: u32 = 14;
pub const GPIO_LCKR_LCK14_Msk: u32 = 16384;
pub const GPIO_LCKR_LCK14: u32 = 16384;
pub const GPIO_LCKR_LCK15_Pos: u32 = 15;
pub const GPIO_LCKR_LCK15_Msk: u32 = 32768;
pub const GPIO_LCKR_LCK15: u32 = 32768;
pub const GPIO_LCKR_LCKK_Pos: u32 = 16;
pub const GPIO_LCKR_LCKK_Msk: u32 = 65536;
pub const GPIO_LCKR_LCKK: u32 = 65536;
pub const GPIO_AFRL_AFSEL0_Pos: u32 = 0;
pub const GPIO_AFRL_AFSEL0_Msk: u32 = 15;
pub const GPIO_AFRL_AFSEL0: u32 = 15;
pub const GPIO_AFRL_AFSEL0_0: u32 = 1;
pub const GPIO_AFRL_AFSEL0_1: u32 = 2;
pub const GPIO_AFRL_AFSEL0_2: u32 = 4;
pub const GPIO_AFRL_AFSEL0_3: u32 = 8;
pub const GPIO_AFRL_AFSEL1_Pos: u32 = 4;
pub const GPIO_AFRL_AFSEL1_Msk: u32 = 240;
pub const GPIO_AFRL_AFSEL1: u32 = 240;
pub const GPIO_AFRL_AFSEL1_0: u32 = 16;
pub const GPIO_AFRL_AFSEL1_1: u32 = 32;
pub const GPIO_AFRL_AFSEL1_2: u32 = 64;
pub const GPIO_AFRL_AFSEL1_3: u32 = 128;
pub const GPIO_AFRL_AFSEL2_Pos: u32 = 8;
pub const GPIO_AFRL_AFSEL2_Msk: u32 = 3840;
pub const GPIO_AFRL_AFSEL2: u32 = 3840;
pub const GPIO_AFRL_AFSEL2_0: u32 = 256;
pub const GPIO_AFRL_AFSEL2_1: u32 = 512;
pub const GPIO_AFRL_AFSEL2_2: u32 = 1024;
pub const GPIO_AFRL_AFSEL2_3: u32 = 2048;
pub const GPIO_AFRL_AFSEL3_Pos: u32 = 12;
pub const GPIO_AFRL_AFSEL3_Msk: u32 = 61440;
pub const GPIO_AFRL_AFSEL3: u32 = 61440;
pub const GPIO_AFRL_AFSEL3_0: u32 = 4096;
pub const GPIO_AFRL_AFSEL3_1: u32 = 8192;
pub const GPIO_AFRL_AFSEL3_2: u32 = 16384;
pub const GPIO_AFRL_AFSEL3_3: u32 = 32768;
pub const GPIO_AFRL_AFSEL4_Pos: u32 = 16;
pub const GPIO_AFRL_AFSEL4_Msk: u32 = 983040;
pub const GPIO_AFRL_AFSEL4: u32 = 983040;
pub const GPIO_AFRL_AFSEL4_0: u32 = 65536;
pub const GPIO_AFRL_AFSEL4_1: u32 = 131072;
pub const GPIO_AFRL_AFSEL4_2: u32 = 262144;
pub const GPIO_AFRL_AFSEL4_3: u32 = 524288;
pub const GPIO_AFRL_AFSEL5_Pos: u32 = 20;
pub const GPIO_AFRL_AFSEL5_Msk: u32 = 15728640;
pub const GPIO_AFRL_AFSEL5: u32 = 15728640;
pub const GPIO_AFRL_AFSEL5_0: u32 = 1048576;
pub const GPIO_AFRL_AFSEL5_1: u32 = 2097152;
pub const GPIO_AFRL_AFSEL5_2: u32 = 4194304;
pub const GPIO_AFRL_AFSEL5_3: u32 = 8388608;
pub const GPIO_AFRL_AFSEL6_Pos: u32 = 24;
pub const GPIO_AFRL_AFSEL6_Msk: u32 = 251658240;
pub const GPIO_AFRL_AFSEL6: u32 = 251658240;
pub const GPIO_AFRL_AFSEL6_0: u32 = 16777216;
pub const GPIO_AFRL_AFSEL6_1: u32 = 33554432;
pub const GPIO_AFRL_AFSEL6_2: u32 = 67108864;
pub const GPIO_AFRL_AFSEL6_3: u32 = 134217728;
pub const GPIO_AFRL_AFSEL7_Pos: u32 = 28;
pub const GPIO_AFRL_AFSEL7_Msk: u32 = 4026531840;
pub const GPIO_AFRL_AFSEL7: u32 = 4026531840;
pub const GPIO_AFRL_AFSEL7_0: u32 = 268435456;
pub const GPIO_AFRL_AFSEL7_1: u32 = 536870912;
pub const GPIO_AFRL_AFSEL7_2: u32 = 1073741824;
pub const GPIO_AFRL_AFSEL7_3: u32 = 2147483648;
pub const GPIO_AFRL_AFRL0: u32 = 15;
pub const GPIO_AFRL_AFRL0_0: u32 = 1;
pub const GPIO_AFRL_AFRL0_1: u32 = 2;
pub const GPIO_AFRL_AFRL0_2: u32 = 4;
pub const GPIO_AFRL_AFRL0_3: u32 = 8;
pub const GPIO_AFRL_AFRL1: u32 = 240;
pub const GPIO_AFRL_AFRL1_0: u32 = 16;
pub const GPIO_AFRL_AFRL1_1: u32 = 32;
pub const GPIO_AFRL_AFRL1_2: u32 = 64;
pub const GPIO_AFRL_AFRL1_3: u32 = 128;
pub const GPIO_AFRL_AFRL2: u32 = 3840;
pub const GPIO_AFRL_AFRL2_0: u32 = 256;
pub const GPIO_AFRL_AFRL2_1: u32 = 512;
pub const GPIO_AFRL_AFRL2_2: u32 = 1024;
pub const GPIO_AFRL_AFRL2_3: u32 = 2048;
pub const GPIO_AFRL_AFRL3: u32 = 61440;
pub const GPIO_AFRL_AFRL3_0: u32 = 4096;
pub const GPIO_AFRL_AFRL3_1: u32 = 8192;
pub const GPIO_AFRL_AFRL3_2: u32 = 16384;
pub const GPIO_AFRL_AFRL3_3: u32 = 32768;
pub const GPIO_AFRL_AFRL4: u32 = 983040;
pub const GPIO_AFRL_AFRL4_0: u32 = 65536;
pub const GPIO_AFRL_AFRL4_1: u32 = 131072;
pub const GPIO_AFRL_AFRL4_2: u32 = 262144;
pub const GPIO_AFRL_AFRL4_3: u32 = 524288;
pub const GPIO_AFRL_AFRL5: u32 = 15728640;
pub const GPIO_AFRL_AFRL5_0: u32 = 1048576;
pub const GPIO_AFRL_AFRL5_1: u32 = 2097152;
pub const GPIO_AFRL_AFRL5_2: u32 = 4194304;
pub const GPIO_AFRL_AFRL5_3: u32 = 8388608;
pub const GPIO_AFRL_AFRL6: u32 = 251658240;
pub const GPIO_AFRL_AFRL6_0: u32 = 16777216;
pub const GPIO_AFRL_AFRL6_1: u32 = 33554432;
pub const GPIO_AFRL_AFRL6_2: u32 = 67108864;
pub const GPIO_AFRL_AFRL6_3: u32 = 134217728;
pub const GPIO_AFRL_AFRL7: u32 = 4026531840;
pub const GPIO_AFRL_AFRL7_0: u32 = 268435456;
pub const GPIO_AFRL_AFRL7_1: u32 = 536870912;
pub const GPIO_AFRL_AFRL7_2: u32 = 1073741824;
pub const GPIO_AFRL_AFRL7_3: u32 = 2147483648;
pub const GPIO_AFRH_AFSEL8_Pos: u32 = 0;
pub const GPIO_AFRH_AFSEL8_Msk: u32 = 15;
pub const GPIO_AFRH_AFSEL8: u32 = 15;
pub const GPIO_AFRH_AFSEL8_0: u32 = 1;
pub const GPIO_AFRH_AFSEL8_1: u32 = 2;
pub const GPIO_AFRH_AFSEL8_2: u32 = 4;
pub const GPIO_AFRH_AFSEL8_3: u32 = 8;
pub const GPIO_AFRH_AFSEL9_Pos: u32 = 4;
pub const GPIO_AFRH_AFSEL9_Msk: u32 = 240;
pub const GPIO_AFRH_AFSEL9: u32 = 240;
pub const GPIO_AFRH_AFSEL9_0: u32 = 16;
pub const GPIO_AFRH_AFSEL9_1: u32 = 32;
pub const GPIO_AFRH_AFSEL9_2: u32 = 64;
pub const GPIO_AFRH_AFSEL9_3: u32 = 128;
pub const GPIO_AFRH_AFSEL10_Pos: u32 = 8;
pub const GPIO_AFRH_AFSEL10_Msk: u32 = 3840;
pub const GPIO_AFRH_AFSEL10: u32 = 3840;
pub const GPIO_AFRH_AFSEL10_0: u32 = 256;
pub const GPIO_AFRH_AFSEL10_1: u32 = 512;
pub const GPIO_AFRH_AFSEL10_2: u32 = 1024;
pub const GPIO_AFRH_AFSEL10_3: u32 = 2048;
pub const GPIO_AFRH_AFSEL11_Pos: u32 = 12;
pub const GPIO_AFRH_AFSEL11_Msk: u32 = 61440;
pub const GPIO_AFRH_AFSEL11: u32 = 61440;
pub const GPIO_AFRH_AFSEL11_0: u32 = 4096;
pub const GPIO_AFRH_AFSEL11_1: u32 = 8192;
pub const GPIO_AFRH_AFSEL11_2: u32 = 16384;
pub const GPIO_AFRH_AFSEL11_3: u32 = 32768;
pub const GPIO_AFRH_AFSEL12_Pos: u32 = 16;
pub const GPIO_AFRH_AFSEL12_Msk: u32 = 983040;
pub const GPIO_AFRH_AFSEL12: u32 = 983040;
pub const GPIO_AFRH_AFSEL12_0: u32 = 65536;
pub const GPIO_AFRH_AFSEL12_1: u32 = 131072;
pub const GPIO_AFRH_AFSEL12_2: u32 = 262144;
pub const GPIO_AFRH_AFSEL12_3: u32 = 524288;
pub const GPIO_AFRH_AFSEL13_Pos: u32 = 20;
pub const GPIO_AFRH_AFSEL13_Msk: u32 = 15728640;
pub const GPIO_AFRH_AFSEL13: u32 = 15728640;
pub const GPIO_AFRH_AFSEL13_0: u32 = 1048576;
pub const GPIO_AFRH_AFSEL13_1: u32 = 2097152;
pub const GPIO_AFRH_AFSEL13_2: u32 = 4194304;
pub const GPIO_AFRH_AFSEL13_3: u32 = 8388608;
pub const GPIO_AFRH_AFSEL14_Pos: u32 = 24;
pub const GPIO_AFRH_AFSEL14_Msk: u32 = 251658240;
pub const GPIO_AFRH_AFSEL14: u32 = 251658240;
pub const GPIO_AFRH_AFSEL14_0: u32 = 16777216;
pub const GPIO_AFRH_AFSEL14_1: u32 = 33554432;
pub const GPIO_AFRH_AFSEL14_2: u32 = 67108864;
pub const GPIO_AFRH_AFSEL14_3: u32 = 134217728;
pub const GPIO_AFRH_AFSEL15_Pos: u32 = 28;
pub const GPIO_AFRH_AFSEL15_Msk: u32 = 4026531840;
pub const GPIO_AFRH_AFSEL15: u32 = 4026531840;
pub const GPIO_AFRH_AFSEL15_0: u32 = 268435456;
pub const GPIO_AFRH_AFSEL15_1: u32 = 536870912;
pub const GPIO_AFRH_AFSEL15_2: u32 = 1073741824;
pub const GPIO_AFRH_AFSEL15_3: u32 = 2147483648;
pub const GPIO_AFRH_AFRH0: u32 = 15;
pub const GPIO_AFRH_AFRH0_0: u32 = 1;
pub const GPIO_AFRH_AFRH0_1: u32 = 2;
pub const GPIO_AFRH_AFRH0_2: u32 = 4;
pub const GPIO_AFRH_AFRH0_3: u32 = 8;
pub const GPIO_AFRH_AFRH1: u32 = 240;
pub const GPIO_AFRH_AFRH1_0: u32 = 16;
pub const GPIO_AFRH_AFRH1_1: u32 = 32;
pub const GPIO_AFRH_AFRH1_2: u32 = 64;
pub const GPIO_AFRH_AFRH1_3: u32 = 128;
pub const GPIO_AFRH_AFRH2: u32 = 3840;
pub const GPIO_AFRH_AFRH2_0: u32 = 256;
pub const GPIO_AFRH_AFRH2_1: u32 = 512;
pub const GPIO_AFRH_AFRH2_2: u32 = 1024;
pub const GPIO_AFRH_AFRH2_3: u32 = 2048;
pub const GPIO_AFRH_AFRH3: u32 = 61440;
pub const GPIO_AFRH_AFRH3_0: u32 = 4096;
pub const GPIO_AFRH_AFRH3_1: u32 = 8192;
pub const GPIO_AFRH_AFRH3_2: u32 = 16384;
pub const GPIO_AFRH_AFRH3_3: u32 = 32768;
pub const GPIO_AFRH_AFRH4: u32 = 983040;
pub const GPIO_AFRH_AFRH4_0: u32 = 65536;
pub const GPIO_AFRH_AFRH4_1: u32 = 131072;
pub const GPIO_AFRH_AFRH4_2: u32 = 262144;
pub const GPIO_AFRH_AFRH4_3: u32 = 524288;
pub const GPIO_AFRH_AFRH5: u32 = 15728640;
pub const GPIO_AFRH_AFRH5_0: u32 = 1048576;
pub const GPIO_AFRH_AFRH5_1: u32 = 2097152;
pub const GPIO_AFRH_AFRH5_2: u32 = 4194304;
pub const GPIO_AFRH_AFRH5_3: u32 = 8388608;
pub const GPIO_AFRH_AFRH6: u32 = 251658240;
pub const GPIO_AFRH_AFRH6_0: u32 = 16777216;
pub const GPIO_AFRH_AFRH6_1: u32 = 33554432;
pub const GPIO_AFRH_AFRH6_2: u32 = 67108864;
pub const GPIO_AFRH_AFRH6_3: u32 = 134217728;
pub const GPIO_AFRH_AFRH7: u32 = 4026531840;
pub const GPIO_AFRH_AFRH7_0: u32 = 268435456;
pub const GPIO_AFRH_AFRH7_1: u32 = 536870912;
pub const GPIO_AFRH_AFRH7_2: u32 = 1073741824;
pub const GPIO_AFRH_AFRH7_3: u32 = 2147483648;
pub const GPIO_BRR_BR0_Pos: u32 = 0;
pub const GPIO_BRR_BR0_Msk: u32 = 1;
pub const GPIO_BRR_BR0: u32 = 1;
pub const GPIO_BRR_BR1_Pos: u32 = 1;
pub const GPIO_BRR_BR1_Msk: u32 = 2;
pub const GPIO_BRR_BR1: u32 = 2;
pub const GPIO_BRR_BR2_Pos: u32 = 2;
pub const GPIO_BRR_BR2_Msk: u32 = 4;
pub const GPIO_BRR_BR2: u32 = 4;
pub const GPIO_BRR_BR3_Pos: u32 = 3;
pub const GPIO_BRR_BR3_Msk: u32 = 8;
pub const GPIO_BRR_BR3: u32 = 8;
pub const GPIO_BRR_BR4_Pos: u32 = 4;
pub const GPIO_BRR_BR4_Msk: u32 = 16;
pub const GPIO_BRR_BR4: u32 = 16;
pub const GPIO_BRR_BR5_Pos: u32 = 5;
pub const GPIO_BRR_BR5_Msk: u32 = 32;
pub const GPIO_BRR_BR5: u32 = 32;
pub const GPIO_BRR_BR6_Pos: u32 = 6;
pub const GPIO_BRR_BR6_Msk: u32 = 64;
pub const GPIO_BRR_BR6: u32 = 64;
pub const GPIO_BRR_BR7_Pos: u32 = 7;
pub const GPIO_BRR_BR7_Msk: u32 = 128;
pub const GPIO_BRR_BR7: u32 = 128;
pub const GPIO_BRR_BR8_Pos: u32 = 8;
pub const GPIO_BRR_BR8_Msk: u32 = 256;
pub const GPIO_BRR_BR8: u32 = 256;
pub const GPIO_BRR_BR9_Pos: u32 = 9;
pub const GPIO_BRR_BR9_Msk: u32 = 512;
pub const GPIO_BRR_BR9: u32 = 512;
pub const GPIO_BRR_BR10_Pos: u32 = 10;
pub const GPIO_BRR_BR10_Msk: u32 = 1024;
pub const GPIO_BRR_BR10: u32 = 1024;
pub const GPIO_BRR_BR11_Pos: u32 = 11;
pub const GPIO_BRR_BR11_Msk: u32 = 2048;
pub const GPIO_BRR_BR11: u32 = 2048;
pub const GPIO_BRR_BR12_Pos: u32 = 12;
pub const GPIO_BRR_BR12_Msk: u32 = 4096;
pub const GPIO_BRR_BR12: u32 = 4096;
pub const GPIO_BRR_BR13_Pos: u32 = 13;
pub const GPIO_BRR_BR13_Msk: u32 = 8192;
pub const GPIO_BRR_BR13: u32 = 8192;
pub const GPIO_BRR_BR14_Pos: u32 = 14;
pub const GPIO_BRR_BR14_Msk: u32 = 16384;
pub const GPIO_BRR_BR14: u32 = 16384;
pub const GPIO_BRR_BR15_Pos: u32 = 15;
pub const GPIO_BRR_BR15_Msk: u32 = 32768;
pub const GPIO_BRR_BR15: u32 = 32768;
pub const I2C_CR1_PE_Pos: u32 = 0;
pub const I2C_CR1_PE_Msk: u32 = 1;
pub const I2C_CR1_PE: u32 = 1;
pub const I2C_CR1_SMBUS_Pos: u32 = 1;
pub const I2C_CR1_SMBUS_Msk: u32 = 2;
pub const I2C_CR1_SMBUS: u32 = 2;
pub const I2C_CR1_SMBTYPE_Pos: u32 = 3;
pub const I2C_CR1_SMBTYPE_Msk: u32 = 8;
pub const I2C_CR1_SMBTYPE: u32 = 8;
pub const I2C_CR1_ENARP_Pos: u32 = 4;
pub const I2C_CR1_ENARP_Msk: u32 = 16;
pub const I2C_CR1_ENARP: u32 = 16;
pub const I2C_CR1_ENPEC_Pos: u32 = 5;
pub const I2C_CR1_ENPEC_Msk: u32 = 32;
pub const I2C_CR1_ENPEC: u32 = 32;
pub const I2C_CR1_ENGC_Pos: u32 = 6;
pub const I2C_CR1_ENGC_Msk: u32 = 64;
pub const I2C_CR1_ENGC: u32 = 64;
pub const I2C_CR1_NOSTRETCH_Pos: u32 = 7;
pub const I2C_CR1_NOSTRETCH_Msk: u32 = 128;
pub const I2C_CR1_NOSTRETCH: u32 = 128;
pub const I2C_CR1_START_Pos: u32 = 8;
pub const I2C_CR1_START_Msk: u32 = 256;
pub const I2C_CR1_START: u32 = 256;
pub const I2C_CR1_STOP_Pos: u32 = 9;
pub const I2C_CR1_STOP_Msk: u32 = 512;
pub const I2C_CR1_STOP: u32 = 512;
pub const I2C_CR1_ACK_Pos: u32 = 10;
pub const I2C_CR1_ACK_Msk: u32 = 1024;
pub const I2C_CR1_ACK: u32 = 1024;
pub const I2C_CR1_POS_Pos: u32 = 11;
pub const I2C_CR1_POS_Msk: u32 = 2048;
pub const I2C_CR1_POS: u32 = 2048;
pub const I2C_CR1_PEC_Pos: u32 = 12;
pub const I2C_CR1_PEC_Msk: u32 = 4096;
pub const I2C_CR1_PEC: u32 = 4096;
pub const I2C_CR1_ALERT_Pos: u32 = 13;
pub const I2C_CR1_ALERT_Msk: u32 = 8192;
pub const I2C_CR1_ALERT: u32 = 8192;
pub const I2C_CR1_SWRST_Pos: u32 = 15;
pub const I2C_CR1_SWRST_Msk: u32 = 32768;
pub const I2C_CR1_SWRST: u32 = 32768;
pub const I2C_CR2_FREQ_Pos: u32 = 0;
pub const I2C_CR2_FREQ_Msk: u32 = 63;
pub const I2C_CR2_FREQ: u32 = 63;
pub const I2C_CR2_FREQ_0: u32 = 1;
pub const I2C_CR2_FREQ_1: u32 = 2;
pub const I2C_CR2_FREQ_2: u32 = 4;
pub const I2C_CR2_FREQ_3: u32 = 8;
pub const I2C_CR2_FREQ_4: u32 = 16;
pub const I2C_CR2_FREQ_5: u32 = 32;
pub const I2C_CR2_ITERREN_Pos: u32 = 8;
pub const I2C_CR2_ITERREN_Msk: u32 = 256;
pub const I2C_CR2_ITERREN: u32 = 256;
pub const I2C_CR2_ITEVTEN_Pos: u32 = 9;
pub const I2C_CR2_ITEVTEN_Msk: u32 = 512;
pub const I2C_CR2_ITEVTEN: u32 = 512;
pub const I2C_CR2_ITBUFEN_Pos: u32 = 10;
pub const I2C_CR2_ITBUFEN_Msk: u32 = 1024;
pub const I2C_CR2_ITBUFEN: u32 = 1024;
pub const I2C_CR2_DMAEN_Pos: u32 = 11;
pub const I2C_CR2_DMAEN_Msk: u32 = 2048;
pub const I2C_CR2_DMAEN: u32 = 2048;
pub const I2C_CR2_LAST_Pos: u32 = 12;
pub const I2C_CR2_LAST_Msk: u32 = 4096;
pub const I2C_CR2_LAST: u32 = 4096;
pub const I2C_OAR1_ADD1_7: u32 = 254;
pub const I2C_OAR1_ADD8_9: u32 = 768;
pub const I2C_OAR1_ADD0_Pos: u32 = 0;
pub const I2C_OAR1_ADD0_Msk: u32 = 1;
pub const I2C_OAR1_ADD0: u32 = 1;
pub const I2C_OAR1_ADD1_Pos: u32 = 1;
pub const I2C_OAR1_ADD1_Msk: u32 = 2;
pub const I2C_OAR1_ADD1: u32 = 2;
pub const I2C_OAR1_ADD2_Pos: u32 = 2;
pub const I2C_OAR1_ADD2_Msk: u32 = 4;
pub const I2C_OAR1_ADD2: u32 = 4;
pub const I2C_OAR1_ADD3_Pos: u32 = 3;
pub const I2C_OAR1_ADD3_Msk: u32 = 8;
pub const I2C_OAR1_ADD3: u32 = 8;
pub const I2C_OAR1_ADD4_Pos: u32 = 4;
pub const I2C_OAR1_ADD4_Msk: u32 = 16;
pub const I2C_OAR1_ADD4: u32 = 16;
pub const I2C_OAR1_ADD5_Pos: u32 = 5;
pub const I2C_OAR1_ADD5_Msk: u32 = 32;
pub const I2C_OAR1_ADD5: u32 = 32;
pub const I2C_OAR1_ADD6_Pos: u32 = 6;
pub const I2C_OAR1_ADD6_Msk: u32 = 64;
pub const I2C_OAR1_ADD6: u32 = 64;
pub const I2C_OAR1_ADD7_Pos: u32 = 7;
pub const I2C_OAR1_ADD7_Msk: u32 = 128;
pub const I2C_OAR1_ADD7: u32 = 128;
pub const I2C_OAR1_ADD8_Pos: u32 = 8;
pub const I2C_OAR1_ADD8_Msk: u32 = 256;
pub const I2C_OAR1_ADD8: u32 = 256;
pub const I2C_OAR1_ADD9_Pos: u32 = 9;
pub const I2C_OAR1_ADD9_Msk: u32 = 512;
pub const I2C_OAR1_ADD9: u32 = 512;
pub const I2C_OAR1_ADDMODE_Pos: u32 = 15;
pub const I2C_OAR1_ADDMODE_Msk: u32 = 32768;
pub const I2C_OAR1_ADDMODE: u32 = 32768;
pub const I2C_OAR2_ENDUAL_Pos: u32 = 0;
pub const I2C_OAR2_ENDUAL_Msk: u32 = 1;
pub const I2C_OAR2_ENDUAL: u32 = 1;
pub const I2C_OAR2_ADD2_Pos: u32 = 1;
pub const I2C_OAR2_ADD2_Msk: u32 = 254;
pub const I2C_OAR2_ADD2: u32 = 254;
pub const I2C_DR_DR_Pos: u32 = 0;
pub const I2C_DR_DR_Msk: u32 = 255;
pub const I2C_DR_DR: u32 = 255;
pub const I2C_SR1_SB_Pos: u32 = 0;
pub const I2C_SR1_SB_Msk: u32 = 1;
pub const I2C_SR1_SB: u32 = 1;
pub const I2C_SR1_ADDR_Pos: u32 = 1;
pub const I2C_SR1_ADDR_Msk: u32 = 2;
pub const I2C_SR1_ADDR: u32 = 2;
pub const I2C_SR1_BTF_Pos: u32 = 2;
pub const I2C_SR1_BTF_Msk: u32 = 4;
pub const I2C_SR1_BTF: u32 = 4;
pub const I2C_SR1_ADD10_Pos: u32 = 3;
pub const I2C_SR1_ADD10_Msk: u32 = 8;
pub const I2C_SR1_ADD10: u32 = 8;
pub const I2C_SR1_STOPF_Pos: u32 = 4;
pub const I2C_SR1_STOPF_Msk: u32 = 16;
pub const I2C_SR1_STOPF: u32 = 16;
pub const I2C_SR1_RXNE_Pos: u32 = 6;
pub const I2C_SR1_RXNE_Msk: u32 = 64;
pub const I2C_SR1_RXNE: u32 = 64;
pub const I2C_SR1_TXE_Pos: u32 = 7;
pub const I2C_SR1_TXE_Msk: u32 = 128;
pub const I2C_SR1_TXE: u32 = 128;
pub const I2C_SR1_BERR_Pos: u32 = 8;
pub const I2C_SR1_BERR_Msk: u32 = 256;
pub const I2C_SR1_BERR: u32 = 256;
pub const I2C_SR1_ARLO_Pos: u32 = 9;
pub const I2C_SR1_ARLO_Msk: u32 = 512;
pub const I2C_SR1_ARLO: u32 = 512;
pub const I2C_SR1_AF_Pos: u32 = 10;
pub const I2C_SR1_AF_Msk: u32 = 1024;
pub const I2C_SR1_AF: u32 = 1024;
pub const I2C_SR1_OVR_Pos: u32 = 11;
pub const I2C_SR1_OVR_Msk: u32 = 2048;
pub const I2C_SR1_OVR: u32 = 2048;
pub const I2C_SR1_PECERR_Pos: u32 = 12;
pub const I2C_SR1_PECERR_Msk: u32 = 4096;
pub const I2C_SR1_PECERR: u32 = 4096;
pub const I2C_SR1_TIMEOUT_Pos: u32 = 14;
pub const I2C_SR1_TIMEOUT_Msk: u32 = 16384;
pub const I2C_SR1_TIMEOUT: u32 = 16384;
pub const I2C_SR1_SMBALERT_Pos: u32 = 15;
pub const I2C_SR1_SMBALERT_Msk: u32 = 32768;
pub const I2C_SR1_SMBALERT: u32 = 32768;
pub const I2C_SR2_MSL_Pos: u32 = 0;
pub const I2C_SR2_MSL_Msk: u32 = 1;
pub const I2C_SR2_MSL: u32 = 1;
pub const I2C_SR2_BUSY_Pos: u32 = 1;
pub const I2C_SR2_BUSY_Msk: u32 = 2;
pub const I2C_SR2_BUSY: u32 = 2;
pub const I2C_SR2_TRA_Pos: u32 = 2;
pub const I2C_SR2_TRA_Msk: u32 = 4;
pub const I2C_SR2_TRA: u32 = 4;
pub const I2C_SR2_GENCALL_Pos: u32 = 4;
pub const I2C_SR2_GENCALL_Msk: u32 = 16;
pub const I2C_SR2_GENCALL: u32 = 16;
pub const I2C_SR2_SMBDEFAULT_Pos: u32 = 5;
pub const I2C_SR2_SMBDEFAULT_Msk: u32 = 32;
pub const I2C_SR2_SMBDEFAULT: u32 = 32;
pub const I2C_SR2_SMBHOST_Pos: u32 = 6;
pub const I2C_SR2_SMBHOST_Msk: u32 = 64;
pub const I2C_SR2_SMBHOST: u32 = 64;
pub const I2C_SR2_DUALF_Pos: u32 = 7;
pub const I2C_SR2_DUALF_Msk: u32 = 128;
pub const I2C_SR2_DUALF: u32 = 128;
pub const I2C_SR2_PEC_Pos: u32 = 8;
pub const I2C_SR2_PEC_Msk: u32 = 65280;
pub const I2C_SR2_PEC: u32 = 65280;
pub const I2C_CCR_CCR_Pos: u32 = 0;
pub const I2C_CCR_CCR_Msk: u32 = 4095;
pub const I2C_CCR_CCR: u32 = 4095;
pub const I2C_CCR_DUTY_Pos: u32 = 14;
pub const I2C_CCR_DUTY_Msk: u32 = 16384;
pub const I2C_CCR_DUTY: u32 = 16384;
pub const I2C_CCR_FS_Pos: u32 = 15;
pub const I2C_CCR_FS_Msk: u32 = 32768;
pub const I2C_CCR_FS: u32 = 32768;
pub const I2C_TRISE_TRISE_Pos: u32 = 0;
pub const I2C_TRISE_TRISE_Msk: u32 = 63;
pub const I2C_TRISE_TRISE: u32 = 63;
pub const I2C_FLTR_DNF_Pos: u32 = 0;
pub const I2C_FLTR_DNF_Msk: u32 = 15;
pub const I2C_FLTR_DNF: u32 = 15;
pub const I2C_FLTR_ANOFF_Pos: u32 = 4;
pub const I2C_FLTR_ANOFF_Msk: u32 = 16;
pub const I2C_FLTR_ANOFF: u32 = 16;
pub const IWDG_KR_KEY_Pos: u32 = 0;
pub const IWDG_KR_KEY_Msk: u32 = 65535;
pub const IWDG_KR_KEY: u32 = 65535;
pub const IWDG_PR_PR_Pos: u32 = 0;
pub const IWDG_PR_PR_Msk: u32 = 7;
pub const IWDG_PR_PR: u32 = 7;
pub const IWDG_PR_PR_0: u32 = 1;
pub const IWDG_PR_PR_1: u32 = 2;
pub const IWDG_PR_PR_2: u32 = 4;
pub const IWDG_RLR_RL_Pos: u32 = 0;
pub const IWDG_RLR_RL_Msk: u32 = 4095;
pub const IWDG_RLR_RL: u32 = 4095;
pub const IWDG_SR_PVU_Pos: u32 = 0;
pub const IWDG_SR_PVU_Msk: u32 = 1;
pub const IWDG_SR_PVU: u32 = 1;
pub const IWDG_SR_RVU_Pos: u32 = 1;
pub const IWDG_SR_RVU_Msk: u32 = 2;
pub const IWDG_SR_RVU: u32 = 2;
pub const PWR_CR_LPDS_Pos: u32 = 0;
pub const PWR_CR_LPDS_Msk: u32 = 1;
pub const PWR_CR_LPDS: u32 = 1;
pub const PWR_CR_PDDS_Pos: u32 = 1;
pub const PWR_CR_PDDS_Msk: u32 = 2;
pub const PWR_CR_PDDS: u32 = 2;
pub const PWR_CR_CWUF_Pos: u32 = 2;
pub const PWR_CR_CWUF_Msk: u32 = 4;
pub const PWR_CR_CWUF: u32 = 4;
pub const PWR_CR_CSBF_Pos: u32 = 3;
pub const PWR_CR_CSBF_Msk: u32 = 8;
pub const PWR_CR_CSBF: u32 = 8;
pub const PWR_CR_PVDE_Pos: u32 = 4;
pub const PWR_CR_PVDE_Msk: u32 = 16;
pub const PWR_CR_PVDE: u32 = 16;
pub const PWR_CR_PLS_Pos: u32 = 5;
pub const PWR_CR_PLS_Msk: u32 = 224;
pub const PWR_CR_PLS: u32 = 224;
pub const PWR_CR_PLS_0: u32 = 32;
pub const PWR_CR_PLS_1: u32 = 64;
pub const PWR_CR_PLS_2: u32 = 128;
pub const PWR_CR_PLS_LEV0: u32 = 0;
pub const PWR_CR_PLS_LEV1: u32 = 32;
pub const PWR_CR_PLS_LEV2: u32 = 64;
pub const PWR_CR_PLS_LEV3: u32 = 96;
pub const PWR_CR_PLS_LEV4: u32 = 128;
pub const PWR_CR_PLS_LEV5: u32 = 160;
pub const PWR_CR_PLS_LEV6: u32 = 192;
pub const PWR_CR_PLS_LEV7: u32 = 224;
pub const PWR_CR_DBP_Pos: u32 = 8;
pub const PWR_CR_DBP_Msk: u32 = 256;
pub const PWR_CR_DBP: u32 = 256;
pub const PWR_CR_FPDS_Pos: u32 = 9;
pub const PWR_CR_FPDS_Msk: u32 = 512;
pub const PWR_CR_FPDS: u32 = 512;
pub const PWR_CR_LPLVDS_Pos: u32 = 10;
pub const PWR_CR_LPLVDS_Msk: u32 = 1024;
pub const PWR_CR_LPLVDS: u32 = 1024;
pub const PWR_CR_MRLVDS_Pos: u32 = 11;
pub const PWR_CR_MRLVDS_Msk: u32 = 2048;
pub const PWR_CR_MRLVDS: u32 = 2048;
pub const PWR_CR_ADCDC1_Pos: u32 = 13;
pub const PWR_CR_ADCDC1_Msk: u32 = 8192;
pub const PWR_CR_ADCDC1: u32 = 8192;
pub const PWR_CR_VOS_Pos: u32 = 14;
pub const PWR_CR_VOS_Msk: u32 = 49152;
pub const PWR_CR_VOS: u32 = 49152;
pub const PWR_CR_VOS_0: u32 = 16384;
pub const PWR_CR_VOS_1: u32 = 32768;
pub const PWR_CR_PMODE: u32 = 49152;
pub const PWR_CSR_WUF_Pos: u32 = 0;
pub const PWR_CSR_WUF_Msk: u32 = 1;
pub const PWR_CSR_WUF: u32 = 1;
pub const PWR_CSR_SBF_Pos: u32 = 1;
pub const PWR_CSR_SBF_Msk: u32 = 2;
pub const PWR_CSR_SBF: u32 = 2;
pub const PWR_CSR_PVDO_Pos: u32 = 2;
pub const PWR_CSR_PVDO_Msk: u32 = 4;
pub const PWR_CSR_PVDO: u32 = 4;
pub const PWR_CSR_BRR_Pos: u32 = 3;
pub const PWR_CSR_BRR_Msk: u32 = 8;
pub const PWR_CSR_BRR: u32 = 8;
pub const PWR_CSR_EWUP_Pos: u32 = 8;
pub const PWR_CSR_EWUP_Msk: u32 = 256;
pub const PWR_CSR_EWUP: u32 = 256;
pub const PWR_CSR_BRE_Pos: u32 = 9;
pub const PWR_CSR_BRE_Msk: u32 = 512;
pub const PWR_CSR_BRE: u32 = 512;
pub const PWR_CSR_VOSRDY_Pos: u32 = 14;
pub const PWR_CSR_VOSRDY_Msk: u32 = 16384;
pub const PWR_CSR_VOSRDY: u32 = 16384;
pub const PWR_CSR_REGRDY: u32 = 16384;
pub const RCC_CR_HSION_Pos: u32 = 0;
pub const RCC_CR_HSION_Msk: u32 = 1;
pub const RCC_CR_HSION: u32 = 1;
pub const RCC_CR_HSIRDY_Pos: u32 = 1;
pub const RCC_CR_HSIRDY_Msk: u32 = 2;
pub const RCC_CR_HSIRDY: u32 = 2;
pub const RCC_CR_HSITRIM_Pos: u32 = 3;
pub const RCC_CR_HSITRIM_Msk: u32 = 248;
pub const RCC_CR_HSITRIM: u32 = 248;
pub const RCC_CR_HSITRIM_0: u32 = 8;
pub const RCC_CR_HSITRIM_1: u32 = 16;
pub const RCC_CR_HSITRIM_2: u32 = 32;
pub const RCC_CR_HSITRIM_3: u32 = 64;
pub const RCC_CR_HSITRIM_4: u32 = 128;
pub const RCC_CR_HSICAL_Pos: u32 = 8;
pub const RCC_CR_HSICAL_Msk: u32 = 65280;
pub const RCC_CR_HSICAL: u32 = 65280;
pub const RCC_CR_HSICAL_0: u32 = 256;
pub const RCC_CR_HSICAL_1: u32 = 512;
pub const RCC_CR_HSICAL_2: u32 = 1024;
pub const RCC_CR_HSICAL_3: u32 = 2048;
pub const RCC_CR_HSICAL_4: u32 = 4096;
pub const RCC_CR_HSICAL_5: u32 = 8192;
pub const RCC_CR_HSICAL_6: u32 = 16384;
pub const RCC_CR_HSICAL_7: u32 = 32768;
pub const RCC_CR_HSEON_Pos: u32 = 16;
pub const RCC_CR_HSEON_Msk: u32 = 65536;
pub const RCC_CR_HSEON: u32 = 65536;
pub const RCC_CR_HSERDY_Pos: u32 = 17;
pub const RCC_CR_HSERDY_Msk: u32 = 131072;
pub const RCC_CR_HSERDY: u32 = 131072;
pub const RCC_CR_HSEBYP_Pos: u32 = 18;
pub const RCC_CR_HSEBYP_Msk: u32 = 262144;
pub const RCC_CR_HSEBYP: u32 = 262144;
pub const RCC_CR_CSSON_Pos: u32 = 19;
pub const RCC_CR_CSSON_Msk: u32 = 524288;
pub const RCC_CR_CSSON: u32 = 524288;
pub const RCC_CR_PLLON_Pos: u32 = 24;
pub const RCC_CR_PLLON_Msk: u32 = 16777216;
pub const RCC_CR_PLLON: u32 = 16777216;
pub const RCC_CR_PLLRDY_Pos: u32 = 25;
pub const RCC_CR_PLLRDY_Msk: u32 = 33554432;
pub const RCC_CR_PLLRDY: u32 = 33554432;
pub const RCC_CR_PLLI2SON_Pos: u32 = 26;
pub const RCC_CR_PLLI2SON_Msk: u32 = 67108864;
pub const RCC_CR_PLLI2SON: u32 = 67108864;
pub const RCC_CR_PLLI2SRDY_Pos: u32 = 27;
pub const RCC_CR_PLLI2SRDY_Msk: u32 = 134217728;
pub const RCC_CR_PLLI2SRDY: u32 = 134217728;
pub const RCC_PLLCFGR_PLLM_Pos: u32 = 0;
pub const RCC_PLLCFGR_PLLM_Msk: u32 = 63;
pub const RCC_PLLCFGR_PLLM: u32 = 63;
pub const RCC_PLLCFGR_PLLM_0: u32 = 1;
pub const RCC_PLLCFGR_PLLM_1: u32 = 2;
pub const RCC_PLLCFGR_PLLM_2: u32 = 4;
pub const RCC_PLLCFGR_PLLM_3: u32 = 8;
pub const RCC_PLLCFGR_PLLM_4: u32 = 16;
pub const RCC_PLLCFGR_PLLM_5: u32 = 32;
pub const RCC_PLLCFGR_PLLN_Pos: u32 = 6;
pub const RCC_PLLCFGR_PLLN_Msk: u32 = 32704;
pub const RCC_PLLCFGR_PLLN: u32 = 32704;
pub const RCC_PLLCFGR_PLLN_0: u32 = 64;
pub const RCC_PLLCFGR_PLLN_1: u32 = 128;
pub const RCC_PLLCFGR_PLLN_2: u32 = 256;
pub const RCC_PLLCFGR_PLLN_3: u32 = 512;
pub const RCC_PLLCFGR_PLLN_4: u32 = 1024;
pub const RCC_PLLCFGR_PLLN_5: u32 = 2048;
pub const RCC_PLLCFGR_PLLN_6: u32 = 4096;
pub const RCC_PLLCFGR_PLLN_7: u32 = 8192;
pub const RCC_PLLCFGR_PLLN_8: u32 = 16384;
pub const RCC_PLLCFGR_PLLP_Pos: u32 = 16;
pub const RCC_PLLCFGR_PLLP_Msk: u32 = 196608;
pub const RCC_PLLCFGR_PLLP: u32 = 196608;
pub const RCC_PLLCFGR_PLLP_0: u32 = 65536;
pub const RCC_PLLCFGR_PLLP_1: u32 = 131072;
pub const RCC_PLLCFGR_PLLSRC_Pos: u32 = 22;
pub const RCC_PLLCFGR_PLLSRC_Msk: u32 = 4194304;
pub const RCC_PLLCFGR_PLLSRC: u32 = 4194304;
pub const RCC_PLLCFGR_PLLSRC_HSE_Pos: u32 = 22;
pub const RCC_PLLCFGR_PLLSRC_HSE_Msk: u32 = 4194304;
pub const RCC_PLLCFGR_PLLSRC_HSE: u32 = 4194304;
pub const RCC_PLLCFGR_PLLSRC_HSI: u32 = 0;
pub const RCC_PLLCFGR_PLLQ_Pos: u32 = 24;
pub const RCC_PLLCFGR_PLLQ_Msk: u32 = 251658240;
pub const RCC_PLLCFGR_PLLQ: u32 = 251658240;
pub const RCC_PLLCFGR_PLLQ_0: u32 = 16777216;
pub const RCC_PLLCFGR_PLLQ_1: u32 = 33554432;
pub const RCC_PLLCFGR_PLLQ_2: u32 = 67108864;
pub const RCC_PLLCFGR_PLLQ_3: u32 = 134217728;
pub const RCC_CFGR_SW_Pos: u32 = 0;
pub const RCC_CFGR_SW_Msk: u32 = 3;
pub const RCC_CFGR_SW: u32 = 3;
pub const RCC_CFGR_SW_0: u32 = 1;
pub const RCC_CFGR_SW_1: u32 = 2;
pub const RCC_CFGR_SW_HSI: u32 = 0;
pub const RCC_CFGR_SW_HSE: u32 = 1;
pub const RCC_CFGR_SW_PLL: u32 = 2;
pub const RCC_CFGR_SWS_Pos: u32 = 2;
pub const RCC_CFGR_SWS_Msk: u32 = 12;
pub const RCC_CFGR_SWS: u32 = 12;
pub const RCC_CFGR_SWS_0: u32 = 4;
pub const RCC_CFGR_SWS_1: u32 = 8;
pub const RCC_CFGR_SWS_HSI: u32 = 0;
pub const RCC_CFGR_SWS_HSE: u32 = 4;
pub const RCC_CFGR_SWS_PLL: u32 = 8;
pub const RCC_CFGR_HPRE_Pos: u32 = 4;
pub const RCC_CFGR_HPRE_Msk: u32 = 240;
pub const RCC_CFGR_HPRE: u32 = 240;
pub const RCC_CFGR_HPRE_0: u32 = 16;
pub const RCC_CFGR_HPRE_1: u32 = 32;
pub const RCC_CFGR_HPRE_2: u32 = 64;
pub const RCC_CFGR_HPRE_3: u32 = 128;
pub const RCC_CFGR_HPRE_DIV1: u32 = 0;
pub const RCC_CFGR_HPRE_DIV2: u32 = 128;
pub const RCC_CFGR_HPRE_DIV4: u32 = 144;
pub const RCC_CFGR_HPRE_DIV8: u32 = 160;
pub const RCC_CFGR_HPRE_DIV16: u32 = 176;
pub const RCC_CFGR_HPRE_DIV64: u32 = 192;
pub const RCC_CFGR_HPRE_DIV128: u32 = 208;
pub const RCC_CFGR_HPRE_DIV256: u32 = 224;
pub const RCC_CFGR_HPRE_DIV512: u32 = 240;
pub const RCC_CFGR_PPRE1_Pos: u32 = 10;
pub const RCC_CFGR_PPRE1_Msk: u32 = 7168;
pub const RCC_CFGR_PPRE1: u32 = 7168;
pub const RCC_CFGR_PPRE1_0: u32 = 1024;
pub const RCC_CFGR_PPRE1_1: u32 = 2048;
pub const RCC_CFGR_PPRE1_2: u32 = 4096;
pub const RCC_CFGR_PPRE1_DIV1: u32 = 0;
pub const RCC_CFGR_PPRE1_DIV2: u32 = 4096;
pub const RCC_CFGR_PPRE1_DIV4: u32 = 5120;
pub const RCC_CFGR_PPRE1_DIV8: u32 = 6144;
pub const RCC_CFGR_PPRE1_DIV16: u32 = 7168;
pub const RCC_CFGR_PPRE2_Pos: u32 = 13;
pub const RCC_CFGR_PPRE2_Msk: u32 = 57344;
pub const RCC_CFGR_PPRE2: u32 = 57344;
pub const RCC_CFGR_PPRE2_0: u32 = 8192;
pub const RCC_CFGR_PPRE2_1: u32 = 16384;
pub const RCC_CFGR_PPRE2_2: u32 = 32768;
pub const RCC_CFGR_PPRE2_DIV1: u32 = 0;
pub const RCC_CFGR_PPRE2_DIV2: u32 = 32768;
pub const RCC_CFGR_PPRE2_DIV4: u32 = 40960;
pub const RCC_CFGR_PPRE2_DIV8: u32 = 49152;
pub const RCC_CFGR_PPRE2_DIV16: u32 = 57344;
pub const RCC_CFGR_RTCPRE_Pos: u32 = 16;
pub const RCC_CFGR_RTCPRE_Msk: u32 = 2031616;
pub const RCC_CFGR_RTCPRE: u32 = 2031616;
pub const RCC_CFGR_RTCPRE_0: u32 = 65536;
pub const RCC_CFGR_RTCPRE_1: u32 = 131072;
pub const RCC_CFGR_RTCPRE_2: u32 = 262144;
pub const RCC_CFGR_RTCPRE_3: u32 = 524288;
pub const RCC_CFGR_RTCPRE_4: u32 = 1048576;
pub const RCC_CFGR_MCO1_Pos: u32 = 21;
pub const RCC_CFGR_MCO1_Msk: u32 = 6291456;
pub const RCC_CFGR_MCO1: u32 = 6291456;
pub const RCC_CFGR_MCO1_0: u32 = 2097152;
pub const RCC_CFGR_MCO1_1: u32 = 4194304;
pub const RCC_CFGR_I2SSRC_Pos: u32 = 23;
pub const RCC_CFGR_I2SSRC_Msk: u32 = 8388608;
pub const RCC_CFGR_I2SSRC: u32 = 8388608;
pub const RCC_CFGR_MCO1PRE_Pos: u32 = 24;
pub const RCC_CFGR_MCO1PRE_Msk: u32 = 117440512;
pub const RCC_CFGR_MCO1PRE: u32 = 117440512;
pub const RCC_CFGR_MCO1PRE_0: u32 = 16777216;
pub const RCC_CFGR_MCO1PRE_1: u32 = 33554432;
pub const RCC_CFGR_MCO1PRE_2: u32 = 67108864;
pub const RCC_CFGR_MCO2PRE_Pos: u32 = 27;
pub const RCC_CFGR_MCO2PRE_Msk: u32 = 939524096;
pub const RCC_CFGR_MCO2PRE: u32 = 939524096;
pub const RCC_CFGR_MCO2PRE_0: u32 = 134217728;
pub const RCC_CFGR_MCO2PRE_1: u32 = 268435456;
pub const RCC_CFGR_MCO2PRE_2: u32 = 536870912;
pub const RCC_CFGR_MCO2_Pos: u32 = 30;
pub const RCC_CFGR_MCO2_Msk: u32 = 3221225472;
pub const RCC_CFGR_MCO2: u32 = 3221225472;
pub const RCC_CFGR_MCO2_0: u32 = 1073741824;
pub const RCC_CFGR_MCO2_1: u32 = 2147483648;
pub const RCC_CIR_LSIRDYF_Pos: u32 = 0;
pub const RCC_CIR_LSIRDYF_Msk: u32 = 1;
pub const RCC_CIR_LSIRDYF: u32 = 1;
pub const RCC_CIR_LSERDYF_Pos: u32 = 1;
pub const RCC_CIR_LSERDYF_Msk: u32 = 2;
pub const RCC_CIR_LSERDYF: u32 = 2;
pub const RCC_CIR_HSIRDYF_Pos: u32 = 2;
pub const RCC_CIR_HSIRDYF_Msk: u32 = 4;
pub const RCC_CIR_HSIRDYF: u32 = 4;
pub const RCC_CIR_HSERDYF_Pos: u32 = 3;
pub const RCC_CIR_HSERDYF_Msk: u32 = 8;
pub const RCC_CIR_HSERDYF: u32 = 8;
pub const RCC_CIR_PLLRDYF_Pos: u32 = 4;
pub const RCC_CIR_PLLRDYF_Msk: u32 = 16;
pub const RCC_CIR_PLLRDYF: u32 = 16;
pub const RCC_CIR_PLLI2SRDYF_Pos: u32 = 5;
pub const RCC_CIR_PLLI2SRDYF_Msk: u32 = 32;
pub const RCC_CIR_PLLI2SRDYF: u32 = 32;
pub const RCC_CIR_CSSF_Pos: u32 = 7;
pub const RCC_CIR_CSSF_Msk: u32 = 128;
pub const RCC_CIR_CSSF: u32 = 128;
pub const RCC_CIR_LSIRDYIE_Pos: u32 = 8;
pub const RCC_CIR_LSIRDYIE_Msk: u32 = 256;
pub const RCC_CIR_LSIRDYIE: u32 = 256;
pub const RCC_CIR_LSERDYIE_Pos: u32 = 9;
pub const RCC_CIR_LSERDYIE_Msk: u32 = 512;
pub const RCC_CIR_LSERDYIE: u32 = 512;
pub const RCC_CIR_HSIRDYIE_Pos: u32 = 10;
pub const RCC_CIR_HSIRDYIE_Msk: u32 = 1024;
pub const RCC_CIR_HSIRDYIE: u32 = 1024;
pub const RCC_CIR_HSERDYIE_Pos: u32 = 11;
pub const RCC_CIR_HSERDYIE_Msk: u32 = 2048;
pub const RCC_CIR_HSERDYIE: u32 = 2048;
pub const RCC_CIR_PLLRDYIE_Pos: u32 = 12;
pub const RCC_CIR_PLLRDYIE_Msk: u32 = 4096;
pub const RCC_CIR_PLLRDYIE: u32 = 4096;
pub const RCC_CIR_PLLI2SRDYIE_Pos: u32 = 13;
pub const RCC_CIR_PLLI2SRDYIE_Msk: u32 = 8192;
pub const RCC_CIR_PLLI2SRDYIE: u32 = 8192;
pub const RCC_CIR_LSIRDYC_Pos: u32 = 16;
pub const RCC_CIR_LSIRDYC_Msk: u32 = 65536;
pub const RCC_CIR_LSIRDYC: u32 = 65536;
pub const RCC_CIR_LSERDYC_Pos: u32 = 17;
pub const RCC_CIR_LSERDYC_Msk: u32 = 131072;
pub const RCC_CIR_LSERDYC: u32 = 131072;
pub const RCC_CIR_HSIRDYC_Pos: u32 = 18;
pub const RCC_CIR_HSIRDYC_Msk: u32 = 262144;
pub const RCC_CIR_HSIRDYC: u32 = 262144;
pub const RCC_CIR_HSERDYC_Pos: u32 = 19;
pub const RCC_CIR_HSERDYC_Msk: u32 = 524288;
pub const RCC_CIR_HSERDYC: u32 = 524288;
pub const RCC_CIR_PLLRDYC_Pos: u32 = 20;
pub const RCC_CIR_PLLRDYC_Msk: u32 = 1048576;
pub const RCC_CIR_PLLRDYC: u32 = 1048576;
pub const RCC_CIR_PLLI2SRDYC_Pos: u32 = 21;
pub const RCC_CIR_PLLI2SRDYC_Msk: u32 = 2097152;
pub const RCC_CIR_PLLI2SRDYC: u32 = 2097152;
pub const RCC_CIR_CSSC_Pos: u32 = 23;
pub const RCC_CIR_CSSC_Msk: u32 = 8388608;
pub const RCC_CIR_CSSC: u32 = 8388608;
pub const RCC_AHB1RSTR_GPIOARST_Pos: u32 = 0;
pub const RCC_AHB1RSTR_GPIOARST_Msk: u32 = 1;
pub const RCC_AHB1RSTR_GPIOARST: u32 = 1;
pub const RCC_AHB1RSTR_GPIOBRST_Pos: u32 = 1;
pub const RCC_AHB1RSTR_GPIOBRST_Msk: u32 = 2;
pub const RCC_AHB1RSTR_GPIOBRST: u32 = 2;
pub const RCC_AHB1RSTR_GPIOCRST_Pos: u32 = 2;
pub const RCC_AHB1RSTR_GPIOCRST_Msk: u32 = 4;
pub const RCC_AHB1RSTR_GPIOCRST: u32 = 4;
pub const RCC_AHB1RSTR_GPIODRST_Pos: u32 = 3;
pub const RCC_AHB1RSTR_GPIODRST_Msk: u32 = 8;
pub const RCC_AHB1RSTR_GPIODRST: u32 = 8;
pub const RCC_AHB1RSTR_GPIOERST_Pos: u32 = 4;
pub const RCC_AHB1RSTR_GPIOERST_Msk: u32 = 16;
pub const RCC_AHB1RSTR_GPIOERST: u32 = 16;
pub const RCC_AHB1RSTR_GPIOHRST_Pos: u32 = 7;
pub const RCC_AHB1RSTR_GPIOHRST_Msk: u32 = 128;
pub const RCC_AHB1RSTR_GPIOHRST: u32 = 128;
pub const RCC_AHB1RSTR_CRCRST_Pos: u32 = 12;
pub const RCC_AHB1RSTR_CRCRST_Msk: u32 = 4096;
pub const RCC_AHB1RSTR_CRCRST: u32 = 4096;
pub const RCC_AHB1RSTR_DMA1RST_Pos: u32 = 21;
pub const RCC_AHB1RSTR_DMA1RST_Msk: u32 = 2097152;
pub const RCC_AHB1RSTR_DMA1RST: u32 = 2097152;
pub const RCC_AHB1RSTR_DMA2RST_Pos: u32 = 22;
pub const RCC_AHB1RSTR_DMA2RST_Msk: u32 = 4194304;
pub const RCC_AHB1RSTR_DMA2RST: u32 = 4194304;
pub const RCC_AHB2RSTR_OTGFSRST_Pos: u32 = 7;
pub const RCC_AHB2RSTR_OTGFSRST_Msk: u32 = 128;
pub const RCC_AHB2RSTR_OTGFSRST: u32 = 128;
pub const RCC_APB1RSTR_TIM2RST_Pos: u32 = 0;
pub const RCC_APB1RSTR_TIM2RST_Msk: u32 = 1;
pub const RCC_APB1RSTR_TIM2RST: u32 = 1;
pub const RCC_APB1RSTR_TIM3RST_Pos: u32 = 1;
pub const RCC_APB1RSTR_TIM3RST_Msk: u32 = 2;
pub const RCC_APB1RSTR_TIM3RST: u32 = 2;
pub const RCC_APB1RSTR_TIM4RST_Pos: u32 = 2;
pub const RCC_APB1RSTR_TIM4RST_Msk: u32 = 4;
pub const RCC_APB1RSTR_TIM4RST: u32 = 4;
pub const RCC_APB1RSTR_TIM5RST_Pos: u32 = 3;
pub const RCC_APB1RSTR_TIM5RST_Msk: u32 = 8;
pub const RCC_APB1RSTR_TIM5RST: u32 = 8;
pub const RCC_APB1RSTR_WWDGRST_Pos: u32 = 11;
pub const RCC_APB1RSTR_WWDGRST_Msk: u32 = 2048;
pub const RCC_APB1RSTR_WWDGRST: u32 = 2048;
pub const RCC_APB1RSTR_SPI2RST_Pos: u32 = 14;
pub const RCC_APB1RSTR_SPI2RST_Msk: u32 = 16384;
pub const RCC_APB1RSTR_SPI2RST: u32 = 16384;
pub const RCC_APB1RSTR_SPI3RST_Pos: u32 = 15;
pub const RCC_APB1RSTR_SPI3RST_Msk: u32 = 32768;
pub const RCC_APB1RSTR_SPI3RST: u32 = 32768;
pub const RCC_APB1RSTR_USART2RST_Pos: u32 = 17;
pub const RCC_APB1RSTR_USART2RST_Msk: u32 = 131072;
pub const RCC_APB1RSTR_USART2RST: u32 = 131072;
pub const RCC_APB1RSTR_I2C1RST_Pos: u32 = 21;
pub const RCC_APB1RSTR_I2C1RST_Msk: u32 = 2097152;
pub const RCC_APB1RSTR_I2C1RST: u32 = 2097152;
pub const RCC_APB1RSTR_I2C2RST_Pos: u32 = 22;
pub const RCC_APB1RSTR_I2C2RST_Msk: u32 = 4194304;
pub const RCC_APB1RSTR_I2C2RST: u32 = 4194304;
pub const RCC_APB1RSTR_I2C3RST_Pos: u32 = 23;
pub const RCC_APB1RSTR_I2C3RST_Msk: u32 = 8388608;
pub const RCC_APB1RSTR_I2C3RST: u32 = 8388608;
pub const RCC_APB1RSTR_PWRRST_Pos: u32 = 28;
pub const RCC_APB1RSTR_PWRRST_Msk: u32 = 268435456;
pub const RCC_APB1RSTR_PWRRST: u32 = 268435456;
pub const RCC_APB2RSTR_TIM1RST_Pos: u32 = 0;
pub const RCC_APB2RSTR_TIM1RST_Msk: u32 = 1;
pub const RCC_APB2RSTR_TIM1RST: u32 = 1;
pub const RCC_APB2RSTR_USART1RST_Pos: u32 = 4;
pub const RCC_APB2RSTR_USART1RST_Msk: u32 = 16;
pub const RCC_APB2RSTR_USART1RST: u32 = 16;
pub const RCC_APB2RSTR_USART6RST_Pos: u32 = 5;
pub const RCC_APB2RSTR_USART6RST_Msk: u32 = 32;
pub const RCC_APB2RSTR_USART6RST: u32 = 32;
pub const RCC_APB2RSTR_ADCRST_Pos: u32 = 8;
pub const RCC_APB2RSTR_ADCRST_Msk: u32 = 256;
pub const RCC_APB2RSTR_ADCRST: u32 = 256;
pub const RCC_APB2RSTR_SDIORST_Pos: u32 = 11;
pub const RCC_APB2RSTR_SDIORST_Msk: u32 = 2048;
pub const RCC_APB2RSTR_SDIORST: u32 = 2048;
pub const RCC_APB2RSTR_SPI1RST_Pos: u32 = 12;
pub const RCC_APB2RSTR_SPI1RST_Msk: u32 = 4096;
pub const RCC_APB2RSTR_SPI1RST: u32 = 4096;
pub const RCC_APB2RSTR_SPI4RST_Pos: u32 = 13;
pub const RCC_APB2RSTR_SPI4RST_Msk: u32 = 8192;
pub const RCC_APB2RSTR_SPI4RST: u32 = 8192;
pub const RCC_APB2RSTR_SYSCFGRST_Pos: u32 = 14;
pub const RCC_APB2RSTR_SYSCFGRST_Msk: u32 = 16384;
pub const RCC_APB2RSTR_SYSCFGRST: u32 = 16384;
pub const RCC_APB2RSTR_TIM9RST_Pos: u32 = 16;
pub const RCC_APB2RSTR_TIM9RST_Msk: u32 = 65536;
pub const RCC_APB2RSTR_TIM9RST: u32 = 65536;
pub const RCC_APB2RSTR_TIM10RST_Pos: u32 = 17;
pub const RCC_APB2RSTR_TIM10RST_Msk: u32 = 131072;
pub const RCC_APB2RSTR_TIM10RST: u32 = 131072;
pub const RCC_APB2RSTR_TIM11RST_Pos: u32 = 18;
pub const RCC_APB2RSTR_TIM11RST_Msk: u32 = 262144;
pub const RCC_APB2RSTR_TIM11RST: u32 = 262144;
pub const RCC_APB2RSTR_SPI1: u32 = 4096;
pub const RCC_AHB1ENR_GPIOAEN_Pos: u32 = 0;
pub const RCC_AHB1ENR_GPIOAEN_Msk: u32 = 1;
pub const RCC_AHB1ENR_GPIOAEN: u32 = 1;
pub const RCC_AHB1ENR_GPIOBEN_Pos: u32 = 1;
pub const RCC_AHB1ENR_GPIOBEN_Msk: u32 = 2;
pub const RCC_AHB1ENR_GPIOBEN: u32 = 2;
pub const RCC_AHB1ENR_GPIOCEN_Pos: u32 = 2;
pub const RCC_AHB1ENR_GPIOCEN_Msk: u32 = 4;
pub const RCC_AHB1ENR_GPIOCEN: u32 = 4;
pub const RCC_AHB1ENR_GPIODEN_Pos: u32 = 3;
pub const RCC_AHB1ENR_GPIODEN_Msk: u32 = 8;
pub const RCC_AHB1ENR_GPIODEN: u32 = 8;
pub const RCC_AHB1ENR_GPIOEEN_Pos: u32 = 4;
pub const RCC_AHB1ENR_GPIOEEN_Msk: u32 = 16;
pub const RCC_AHB1ENR_GPIOEEN: u32 = 16;
pub const RCC_AHB1ENR_GPIOHEN_Pos: u32 = 7;
pub const RCC_AHB1ENR_GPIOHEN_Msk: u32 = 128;
pub const RCC_AHB1ENR_GPIOHEN: u32 = 128;
pub const RCC_AHB1ENR_CRCEN_Pos: u32 = 12;
pub const RCC_AHB1ENR_CRCEN_Msk: u32 = 4096;
pub const RCC_AHB1ENR_CRCEN: u32 = 4096;
pub const RCC_AHB1ENR_DMA1EN_Pos: u32 = 21;
pub const RCC_AHB1ENR_DMA1EN_Msk: u32 = 2097152;
pub const RCC_AHB1ENR_DMA1EN: u32 = 2097152;
pub const RCC_AHB1ENR_DMA2EN_Pos: u32 = 22;
pub const RCC_AHB1ENR_DMA2EN_Msk: u32 = 4194304;
pub const RCC_AHB1ENR_DMA2EN: u32 = 4194304;
pub const RCC_AHB2ENR_OTGFSEN_Pos: u32 = 7;
pub const RCC_AHB2ENR_OTGFSEN_Msk: u32 = 128;
pub const RCC_AHB2ENR_OTGFSEN: u32 = 128;
pub const RCC_APB1ENR_TIM2EN_Pos: u32 = 0;
pub const RCC_APB1ENR_TIM2EN_Msk: u32 = 1;
pub const RCC_APB1ENR_TIM2EN: u32 = 1;
pub const RCC_APB1ENR_TIM3EN_Pos: u32 = 1;
pub const RCC_APB1ENR_TIM3EN_Msk: u32 = 2;
pub const RCC_APB1ENR_TIM3EN: u32 = 2;
pub const RCC_APB1ENR_TIM4EN_Pos: u32 = 2;
pub const RCC_APB1ENR_TIM4EN_Msk: u32 = 4;
pub const RCC_APB1ENR_TIM4EN: u32 = 4;
pub const RCC_APB1ENR_TIM5EN_Pos: u32 = 3;
pub const RCC_APB1ENR_TIM5EN_Msk: u32 = 8;
pub const RCC_APB1ENR_TIM5EN: u32 = 8;
pub const RCC_APB1ENR_WWDGEN_Pos: u32 = 11;
pub const RCC_APB1ENR_WWDGEN_Msk: u32 = 2048;
pub const RCC_APB1ENR_WWDGEN: u32 = 2048;
pub const RCC_APB1ENR_SPI2EN_Pos: u32 = 14;
pub const RCC_APB1ENR_SPI2EN_Msk: u32 = 16384;
pub const RCC_APB1ENR_SPI2EN: u32 = 16384;
pub const RCC_APB1ENR_SPI3EN_Pos: u32 = 15;
pub const RCC_APB1ENR_SPI3EN_Msk: u32 = 32768;
pub const RCC_APB1ENR_SPI3EN: u32 = 32768;
pub const RCC_APB1ENR_USART2EN_Pos: u32 = 17;
pub const RCC_APB1ENR_USART2EN_Msk: u32 = 131072;
pub const RCC_APB1ENR_USART2EN: u32 = 131072;
pub const RCC_APB1ENR_I2C1EN_Pos: u32 = 21;
pub const RCC_APB1ENR_I2C1EN_Msk: u32 = 2097152;
pub const RCC_APB1ENR_I2C1EN: u32 = 2097152;
pub const RCC_APB1ENR_I2C2EN_Pos: u32 = 22;
pub const RCC_APB1ENR_I2C2EN_Msk: u32 = 4194304;
pub const RCC_APB1ENR_I2C2EN: u32 = 4194304;
pub const RCC_APB1ENR_I2C3EN_Pos: u32 = 23;
pub const RCC_APB1ENR_I2C3EN_Msk: u32 = 8388608;
pub const RCC_APB1ENR_I2C3EN: u32 = 8388608;
pub const RCC_APB1ENR_PWREN_Pos: u32 = 28;
pub const RCC_APB1ENR_PWREN_Msk: u32 = 268435456;
pub const RCC_APB1ENR_PWREN: u32 = 268435456;
pub const RCC_APB2ENR_TIM1EN_Pos: u32 = 0;
pub const RCC_APB2ENR_TIM1EN_Msk: u32 = 1;
pub const RCC_APB2ENR_TIM1EN: u32 = 1;
pub const RCC_APB2ENR_USART1EN_Pos: u32 = 4;
pub const RCC_APB2ENR_USART1EN_Msk: u32 = 16;
pub const RCC_APB2ENR_USART1EN: u32 = 16;
pub const RCC_APB2ENR_USART6EN_Pos: u32 = 5;
pub const RCC_APB2ENR_USART6EN_Msk: u32 = 32;
pub const RCC_APB2ENR_USART6EN: u32 = 32;
pub const RCC_APB2ENR_ADC1EN_Pos: u32 = 8;
pub const RCC_APB2ENR_ADC1EN_Msk: u32 = 256;
pub const RCC_APB2ENR_ADC1EN: u32 = 256;
pub const RCC_APB2ENR_SDIOEN_Pos: u32 = 11;
pub const RCC_APB2ENR_SDIOEN_Msk: u32 = 2048;
pub const RCC_APB2ENR_SDIOEN: u32 = 2048;
pub const RCC_APB2ENR_SPI1EN_Pos: u32 = 12;
pub const RCC_APB2ENR_SPI1EN_Msk: u32 = 4096;
pub const RCC_APB2ENR_SPI1EN: u32 = 4096;
pub const RCC_APB2ENR_SPI4EN_Pos: u32 = 13;
pub const RCC_APB2ENR_SPI4EN_Msk: u32 = 8192;
pub const RCC_APB2ENR_SPI4EN: u32 = 8192;
pub const RCC_APB2ENR_SYSCFGEN_Pos: u32 = 14;
pub const RCC_APB2ENR_SYSCFGEN_Msk: u32 = 16384;
pub const RCC_APB2ENR_SYSCFGEN: u32 = 16384;
pub const RCC_APB2ENR_TIM9EN_Pos: u32 = 16;
pub const RCC_APB2ENR_TIM9EN_Msk: u32 = 65536;
pub const RCC_APB2ENR_TIM9EN: u32 = 65536;
pub const RCC_APB2ENR_TIM10EN_Pos: u32 = 17;
pub const RCC_APB2ENR_TIM10EN_Msk: u32 = 131072;
pub const RCC_APB2ENR_TIM10EN: u32 = 131072;
pub const RCC_APB2ENR_TIM11EN_Pos: u32 = 18;
pub const RCC_APB2ENR_TIM11EN_Msk: u32 = 262144;
pub const RCC_APB2ENR_TIM11EN: u32 = 262144;
pub const RCC_AHB1LPENR_GPIOALPEN_Pos: u32 = 0;
pub const RCC_AHB1LPENR_GPIOALPEN_Msk: u32 = 1;
pub const RCC_AHB1LPENR_GPIOALPEN: u32 = 1;
pub const RCC_AHB1LPENR_GPIOBLPEN_Pos: u32 = 1;
pub const RCC_AHB1LPENR_GPIOBLPEN_Msk: u32 = 2;
pub const RCC_AHB1LPENR_GPIOBLPEN: u32 = 2;
pub const RCC_AHB1LPENR_GPIOCLPEN_Pos: u32 = 2;
pub const RCC_AHB1LPENR_GPIOCLPEN_Msk: u32 = 4;
pub const RCC_AHB1LPENR_GPIOCLPEN: u32 = 4;
pub const RCC_AHB1LPENR_GPIODLPEN_Pos: u32 = 3;
pub const RCC_AHB1LPENR_GPIODLPEN_Msk: u32 = 8;
pub const RCC_AHB1LPENR_GPIODLPEN: u32 = 8;
pub const RCC_AHB1LPENR_GPIOELPEN_Pos: u32 = 4;
pub const RCC_AHB1LPENR_GPIOELPEN_Msk: u32 = 16;
pub const RCC_AHB1LPENR_GPIOELPEN: u32 = 16;
pub const RCC_AHB1LPENR_GPIOHLPEN_Pos: u32 = 7;
pub const RCC_AHB1LPENR_GPIOHLPEN_Msk: u32 = 128;
pub const RCC_AHB1LPENR_GPIOHLPEN: u32 = 128;
pub const RCC_AHB1LPENR_CRCLPEN_Pos: u32 = 12;
pub const RCC_AHB1LPENR_CRCLPEN_Msk: u32 = 4096;
pub const RCC_AHB1LPENR_CRCLPEN: u32 = 4096;
pub const RCC_AHB1LPENR_FLITFLPEN_Pos: u32 = 15;
pub const RCC_AHB1LPENR_FLITFLPEN_Msk: u32 = 32768;
pub const RCC_AHB1LPENR_FLITFLPEN: u32 = 32768;
pub const RCC_AHB1LPENR_SRAM1LPEN_Pos: u32 = 16;
pub const RCC_AHB1LPENR_SRAM1LPEN_Msk: u32 = 65536;
pub const RCC_AHB1LPENR_SRAM1LPEN: u32 = 65536;
pub const RCC_AHB1LPENR_DMA1LPEN_Pos: u32 = 21;
pub const RCC_AHB1LPENR_DMA1LPEN_Msk: u32 = 2097152;
pub const RCC_AHB1LPENR_DMA1LPEN: u32 = 2097152;
pub const RCC_AHB1LPENR_DMA2LPEN_Pos: u32 = 22;
pub const RCC_AHB1LPENR_DMA2LPEN_Msk: u32 = 4194304;
pub const RCC_AHB1LPENR_DMA2LPEN: u32 = 4194304;
pub const RCC_AHB2LPENR_OTGFSLPEN_Pos: u32 = 7;
pub const RCC_AHB2LPENR_OTGFSLPEN_Msk: u32 = 128;
pub const RCC_AHB2LPENR_OTGFSLPEN: u32 = 128;
pub const RCC_APB1LPENR_TIM2LPEN_Pos: u32 = 0;
pub const RCC_APB1LPENR_TIM2LPEN_Msk: u32 = 1;
pub const RCC_APB1LPENR_TIM2LPEN: u32 = 1;
pub const RCC_APB1LPENR_TIM3LPEN_Pos: u32 = 1;
pub const RCC_APB1LPENR_TIM3LPEN_Msk: u32 = 2;
pub const RCC_APB1LPENR_TIM3LPEN: u32 = 2;
pub const RCC_APB1LPENR_TIM4LPEN_Pos: u32 = 2;
pub const RCC_APB1LPENR_TIM4LPEN_Msk: u32 = 4;
pub const RCC_APB1LPENR_TIM4LPEN: u32 = 4;
pub const RCC_APB1LPENR_TIM5LPEN_Pos: u32 = 3;
pub const RCC_APB1LPENR_TIM5LPEN_Msk: u32 = 8;
pub const RCC_APB1LPENR_TIM5LPEN: u32 = 8;
pub const RCC_APB1LPENR_WWDGLPEN_Pos: u32 = 11;
pub const RCC_APB1LPENR_WWDGLPEN_Msk: u32 = 2048;
pub const RCC_APB1LPENR_WWDGLPEN: u32 = 2048;
pub const RCC_APB1LPENR_SPI2LPEN_Pos: u32 = 14;
pub const RCC_APB1LPENR_SPI2LPEN_Msk: u32 = 16384;
pub const RCC_APB1LPENR_SPI2LPEN: u32 = 16384;
pub const RCC_APB1LPENR_SPI3LPEN_Pos: u32 = 15;
pub const RCC_APB1LPENR_SPI3LPEN_Msk: u32 = 32768;
pub const RCC_APB1LPENR_SPI3LPEN: u32 = 32768;
pub const RCC_APB1LPENR_USART2LPEN_Pos: u32 = 17;
pub const RCC_APB1LPENR_USART2LPEN_Msk: u32 = 131072;
pub const RCC_APB1LPENR_USART2LPEN: u32 = 131072;
pub const RCC_APB1LPENR_I2C1LPEN_Pos: u32 = 21;
pub const RCC_APB1LPENR_I2C1LPEN_Msk: u32 = 2097152;
pub const RCC_APB1LPENR_I2C1LPEN: u32 = 2097152;
pub const RCC_APB1LPENR_I2C2LPEN_Pos: u32 = 22;
pub const RCC_APB1LPENR_I2C2LPEN_Msk: u32 = 4194304;
pub const RCC_APB1LPENR_I2C2LPEN: u32 = 4194304;
pub const RCC_APB1LPENR_I2C3LPEN_Pos: u32 = 23;
pub const RCC_APB1LPENR_I2C3LPEN_Msk: u32 = 8388608;
pub const RCC_APB1LPENR_I2C3LPEN: u32 = 8388608;
pub const RCC_APB1LPENR_PWRLPEN_Pos: u32 = 28;
pub const RCC_APB1LPENR_PWRLPEN_Msk: u32 = 268435456;
pub const RCC_APB1LPENR_PWRLPEN: u32 = 268435456;
pub const RCC_APB2LPENR_TIM1LPEN_Pos: u32 = 0;
pub const RCC_APB2LPENR_TIM1LPEN_Msk: u32 = 1;
pub const RCC_APB2LPENR_TIM1LPEN: u32 = 1;
pub const RCC_APB2LPENR_USART1LPEN_Pos: u32 = 4;
pub const RCC_APB2LPENR_USART1LPEN_Msk: u32 = 16;
pub const RCC_APB2LPENR_USART1LPEN: u32 = 16;
pub const RCC_APB2LPENR_USART6LPEN_Pos: u32 = 5;
pub const RCC_APB2LPENR_USART6LPEN_Msk: u32 = 32;
pub const RCC_APB2LPENR_USART6LPEN: u32 = 32;
pub const RCC_APB2LPENR_ADC1LPEN_Pos: u32 = 8;
pub const RCC_APB2LPENR_ADC1LPEN_Msk: u32 = 256;
pub const RCC_APB2LPENR_ADC1LPEN: u32 = 256;
pub const RCC_APB2LPENR_SDIOLPEN_Pos: u32 = 11;
pub const RCC_APB2LPENR_SDIOLPEN_Msk: u32 = 2048;
pub const RCC_APB2LPENR_SDIOLPEN: u32 = 2048;
pub const RCC_APB2LPENR_SPI1LPEN_Pos: u32 = 12;
pub const RCC_APB2LPENR_SPI1LPEN_Msk: u32 = 4096;
pub const RCC_APB2LPENR_SPI1LPEN: u32 = 4096;
pub const RCC_APB2LPENR_SPI4LPEN_Pos: u32 = 13;
pub const RCC_APB2LPENR_SPI4LPEN_Msk: u32 = 8192;
pub const RCC_APB2LPENR_SPI4LPEN: u32 = 8192;
pub const RCC_APB2LPENR_SYSCFGLPEN_Pos: u32 = 14;
pub const RCC_APB2LPENR_SYSCFGLPEN_Msk: u32 = 16384;
pub const RCC_APB2LPENR_SYSCFGLPEN: u32 = 16384;
pub const RCC_APB2LPENR_TIM9LPEN_Pos: u32 = 16;
pub const RCC_APB2LPENR_TIM9LPEN_Msk: u32 = 65536;
pub const RCC_APB2LPENR_TIM9LPEN: u32 = 65536;
pub const RCC_APB2LPENR_TIM10LPEN_Pos: u32 = 17;
pub const RCC_APB2LPENR_TIM10LPEN_Msk: u32 = 131072;
pub const RCC_APB2LPENR_TIM10LPEN: u32 = 131072;
pub const RCC_APB2LPENR_TIM11LPEN_Pos: u32 = 18;
pub const RCC_APB2LPENR_TIM11LPEN_Msk: u32 = 262144;
pub const RCC_APB2LPENR_TIM11LPEN: u32 = 262144;
pub const RCC_BDCR_LSEON_Pos: u32 = 0;
pub const RCC_BDCR_LSEON_Msk: u32 = 1;
pub const RCC_BDCR_LSEON: u32 = 1;
pub const RCC_BDCR_LSERDY_Pos: u32 = 1;
pub const RCC_BDCR_LSERDY_Msk: u32 = 2;
pub const RCC_BDCR_LSERDY: u32 = 2;
pub const RCC_BDCR_LSEBYP_Pos: u32 = 2;
pub const RCC_BDCR_LSEBYP_Msk: u32 = 4;
pub const RCC_BDCR_LSEBYP: u32 = 4;
pub const RCC_BDCR_RTCSEL_Pos: u32 = 8;
pub const RCC_BDCR_RTCSEL_Msk: u32 = 768;
pub const RCC_BDCR_RTCSEL: u32 = 768;
pub const RCC_BDCR_RTCSEL_0: u32 = 256;
pub const RCC_BDCR_RTCSEL_1: u32 = 512;
pub const RCC_BDCR_RTCEN_Pos: u32 = 15;
pub const RCC_BDCR_RTCEN_Msk: u32 = 32768;
pub const RCC_BDCR_RTCEN: u32 = 32768;
pub const RCC_BDCR_BDRST_Pos: u32 = 16;
pub const RCC_BDCR_BDRST_Msk: u32 = 65536;
pub const RCC_BDCR_BDRST: u32 = 65536;
pub const RCC_CSR_LSION_Pos: u32 = 0;
pub const RCC_CSR_LSION_Msk: u32 = 1;
pub const RCC_CSR_LSION: u32 = 1;
pub const RCC_CSR_LSIRDY_Pos: u32 = 1;
pub const RCC_CSR_LSIRDY_Msk: u32 = 2;
pub const RCC_CSR_LSIRDY: u32 = 2;
pub const RCC_CSR_RMVF_Pos: u32 = 24;
pub const RCC_CSR_RMVF_Msk: u32 = 16777216;
pub const RCC_CSR_RMVF: u32 = 16777216;
pub const RCC_CSR_BORRSTF_Pos: u32 = 25;
pub const RCC_CSR_BORRSTF_Msk: u32 = 33554432;
pub const RCC_CSR_BORRSTF: u32 = 33554432;
pub const RCC_CSR_PINRSTF_Pos: u32 = 26;
pub const RCC_CSR_PINRSTF_Msk: u32 = 67108864;
pub const RCC_CSR_PINRSTF: u32 = 67108864;
pub const RCC_CSR_PORRSTF_Pos: u32 = 27;
pub const RCC_CSR_PORRSTF_Msk: u32 = 134217728;
pub const RCC_CSR_PORRSTF: u32 = 134217728;
pub const RCC_CSR_SFTRSTF_Pos: u32 = 28;
pub const RCC_CSR_SFTRSTF_Msk: u32 = 268435456;
pub const RCC_CSR_SFTRSTF: u32 = 268435456;
pub const RCC_CSR_IWDGRSTF_Pos: u32 = 29;
pub const RCC_CSR_IWDGRSTF_Msk: u32 = 536870912;
pub const RCC_CSR_IWDGRSTF: u32 = 536870912;
pub const RCC_CSR_WWDGRSTF_Pos: u32 = 30;
pub const RCC_CSR_WWDGRSTF_Msk: u32 = 1073741824;
pub const RCC_CSR_WWDGRSTF: u32 = 1073741824;
pub const RCC_CSR_LPWRRSTF_Pos: u32 = 31;
pub const RCC_CSR_LPWRRSTF_Msk: u32 = 2147483648;
pub const RCC_CSR_LPWRRSTF: u32 = 2147483648;
pub const RCC_CSR_PADRSTF: u32 = 67108864;
pub const RCC_CSR_WDGRSTF: u32 = 536870912;
pub const RCC_SSCGR_MODPER_Pos: u32 = 0;
pub const RCC_SSCGR_MODPER_Msk: u32 = 8191;
pub const RCC_SSCGR_MODPER: u32 = 8191;
pub const RCC_SSCGR_INCSTEP_Pos: u32 = 13;
pub const RCC_SSCGR_INCSTEP_Msk: u32 = 268427264;
pub const RCC_SSCGR_INCSTEP: u32 = 268427264;
pub const RCC_SSCGR_SPREADSEL_Pos: u32 = 30;
pub const RCC_SSCGR_SPREADSEL_Msk: u32 = 1073741824;
pub const RCC_SSCGR_SPREADSEL: u32 = 1073741824;
pub const RCC_SSCGR_SSCGEN_Pos: u32 = 31;
pub const RCC_SSCGR_SSCGEN_Msk: u32 = 2147483648;
pub const RCC_SSCGR_SSCGEN: u32 = 2147483648;
pub const RCC_PLLI2SCFGR_PLLI2SN_Pos: u32 = 6;
pub const RCC_PLLI2SCFGR_PLLI2SN_Msk: u32 = 32704;
pub const RCC_PLLI2SCFGR_PLLI2SN: u32 = 32704;
pub const RCC_PLLI2SCFGR_PLLI2SN_0: u32 = 64;
pub const RCC_PLLI2SCFGR_PLLI2SN_1: u32 = 128;
pub const RCC_PLLI2SCFGR_PLLI2SN_2: u32 = 256;
pub const RCC_PLLI2SCFGR_PLLI2SN_3: u32 = 512;
pub const RCC_PLLI2SCFGR_PLLI2SN_4: u32 = 1024;
pub const RCC_PLLI2SCFGR_PLLI2SN_5: u32 = 2048;
pub const RCC_PLLI2SCFGR_PLLI2SN_6: u32 = 4096;
pub const RCC_PLLI2SCFGR_PLLI2SN_7: u32 = 8192;
pub const RCC_PLLI2SCFGR_PLLI2SN_8: u32 = 16384;
pub const RCC_PLLI2SCFGR_PLLI2SR_Pos: u32 = 28;
pub const RCC_PLLI2SCFGR_PLLI2SR_Msk: u32 = 1879048192;
pub const RCC_PLLI2SCFGR_PLLI2SR: u32 = 1879048192;
pub const RCC_PLLI2SCFGR_PLLI2SR_0: u32 = 268435456;
pub const RCC_PLLI2SCFGR_PLLI2SR_1: u32 = 536870912;
pub const RCC_PLLI2SCFGR_PLLI2SR_2: u32 = 1073741824;
pub const RCC_DCKCFGR_TIMPRE_Pos: u32 = 24;
pub const RCC_DCKCFGR_TIMPRE_Msk: u32 = 16777216;
pub const RCC_DCKCFGR_TIMPRE: u32 = 16777216;
pub const RTC_TR_PM_Pos: u32 = 22;
pub const RTC_TR_PM_Msk: u32 = 4194304;
pub const RTC_TR_PM: u32 = 4194304;
pub const RTC_TR_HT_Pos: u32 = 20;
pub const RTC_TR_HT_Msk: u32 = 3145728;
pub const RTC_TR_HT: u32 = 3145728;
pub const RTC_TR_HT_0: u32 = 1048576;
pub const RTC_TR_HT_1: u32 = 2097152;
pub const RTC_TR_HU_Pos: u32 = 16;
pub const RTC_TR_HU_Msk: u32 = 983040;
pub const RTC_TR_HU: u32 = 983040;
pub const RTC_TR_HU_0: u32 = 65536;
pub const RTC_TR_HU_1: u32 = 131072;
pub const RTC_TR_HU_2: u32 = 262144;
pub const RTC_TR_HU_3: u32 = 524288;
pub const RTC_TR_MNT_Pos: u32 = 12;
pub const RTC_TR_MNT_Msk: u32 = 28672;
pub const RTC_TR_MNT: u32 = 28672;
pub const RTC_TR_MNT_0: u32 = 4096;
pub const RTC_TR_MNT_1: u32 = 8192;
pub const RTC_TR_MNT_2: u32 = 16384;
pub const RTC_TR_MNU_Pos: u32 = 8;
pub const RTC_TR_MNU_Msk: u32 = 3840;
pub const RTC_TR_MNU: u32 = 3840;
pub const RTC_TR_MNU_0: u32 = 256;
pub const RTC_TR_MNU_1: u32 = 512;
pub const RTC_TR_MNU_2: u32 = 1024;
pub const RTC_TR_MNU_3: u32 = 2048;
pub const RTC_TR_ST_Pos: u32 = 4;
pub const RTC_TR_ST_Msk: u32 = 112;
pub const RTC_TR_ST: u32 = 112;
pub const RTC_TR_ST_0: u32 = 16;
pub const RTC_TR_ST_1: u32 = 32;
pub const RTC_TR_ST_2: u32 = 64;
pub const RTC_TR_SU_Pos: u32 = 0;
pub const RTC_TR_SU_Msk: u32 = 15;
pub const RTC_TR_SU: u32 = 15;
pub const RTC_TR_SU_0: u32 = 1;
pub const RTC_TR_SU_1: u32 = 2;
pub const RTC_TR_SU_2: u32 = 4;
pub const RTC_TR_SU_3: u32 = 8;
pub const RTC_DR_YT_Pos: u32 = 20;
pub const RTC_DR_YT_Msk: u32 = 15728640;
pub const RTC_DR_YT: u32 = 15728640;
pub const RTC_DR_YT_0: u32 = 1048576;
pub const RTC_DR_YT_1: u32 = 2097152;
pub const RTC_DR_YT_2: u32 = 4194304;
pub const RTC_DR_YT_3: u32 = 8388608;
pub const RTC_DR_YU_Pos: u32 = 16;
pub const RTC_DR_YU_Msk: u32 = 983040;
pub const RTC_DR_YU: u32 = 983040;
pub const RTC_DR_YU_0: u32 = 65536;
pub const RTC_DR_YU_1: u32 = 131072;
pub const RTC_DR_YU_2: u32 = 262144;
pub const RTC_DR_YU_3: u32 = 524288;
pub const RTC_DR_WDU_Pos: u32 = 13;
pub const RTC_DR_WDU_Msk: u32 = 57344;
pub const RTC_DR_WDU: u32 = 57344;
pub const RTC_DR_WDU_0: u32 = 8192;
pub const RTC_DR_WDU_1: u32 = 16384;
pub const RTC_DR_WDU_2: u32 = 32768;
pub const RTC_DR_MT_Pos: u32 = 12;
pub const RTC_DR_MT_Msk: u32 = 4096;
pub const RTC_DR_MT: u32 = 4096;
pub const RTC_DR_MU_Pos: u32 = 8;
pub const RTC_DR_MU_Msk: u32 = 3840;
pub const RTC_DR_MU: u32 = 3840;
pub const RTC_DR_MU_0: u32 = 256;
pub const RTC_DR_MU_1: u32 = 512;
pub const RTC_DR_MU_2: u32 = 1024;
pub const RTC_DR_MU_3: u32 = 2048;
pub const RTC_DR_DT_Pos: u32 = 4;
pub const RTC_DR_DT_Msk: u32 = 48;
pub const RTC_DR_DT: u32 = 48;
pub const RTC_DR_DT_0: u32 = 16;
pub const RTC_DR_DT_1: u32 = 32;
pub const RTC_DR_DU_Pos: u32 = 0;
pub const RTC_DR_DU_Msk: u32 = 15;
pub const RTC_DR_DU: u32 = 15;
pub const RTC_DR_DU_0: u32 = 1;
pub const RTC_DR_DU_1: u32 = 2;
pub const RTC_DR_DU_2: u32 = 4;
pub const RTC_DR_DU_3: u32 = 8;
pub const RTC_CR_COE_Pos: u32 = 23;
pub const RTC_CR_COE_Msk: u32 = 8388608;
pub const RTC_CR_COE: u32 = 8388608;
pub const RTC_CR_OSEL_Pos: u32 = 21;
pub const RTC_CR_OSEL_Msk: u32 = 6291456;
pub const RTC_CR_OSEL: u32 = 6291456;
pub const RTC_CR_OSEL_0: u32 = 2097152;
pub const RTC_CR_OSEL_1: u32 = 4194304;
pub const RTC_CR_POL_Pos: u32 = 20;
pub const RTC_CR_POL_Msk: u32 = 1048576;
pub const RTC_CR_POL: u32 = 1048576;
pub const RTC_CR_COSEL_Pos: u32 = 19;
pub const RTC_CR_COSEL_Msk: u32 = 524288;
pub const RTC_CR_COSEL: u32 = 524288;
pub const RTC_CR_BKP_Pos: u32 = 18;
pub const RTC_CR_BKP_Msk: u32 = 262144;
pub const RTC_CR_BKP: u32 = 262144;
pub const RTC_CR_SUB1H_Pos: u32 = 17;
pub const RTC_CR_SUB1H_Msk: u32 = 131072;
pub const RTC_CR_SUB1H: u32 = 131072;
pub const RTC_CR_ADD1H_Pos: u32 = 16;
pub const RTC_CR_ADD1H_Msk: u32 = 65536;
pub const RTC_CR_ADD1H: u32 = 65536;
pub const RTC_CR_TSIE_Pos: u32 = 15;
pub const RTC_CR_TSIE_Msk: u32 = 32768;
pub const RTC_CR_TSIE: u32 = 32768;
pub const RTC_CR_WUTIE_Pos: u32 = 14;
pub const RTC_CR_WUTIE_Msk: u32 = 16384;
pub const RTC_CR_WUTIE: u32 = 16384;
pub const RTC_CR_ALRBIE_Pos: u32 = 13;
pub const RTC_CR_ALRBIE_Msk: u32 = 8192;
pub const RTC_CR_ALRBIE: u32 = 8192;
pub const RTC_CR_ALRAIE_Pos: u32 = 12;
pub const RTC_CR_ALRAIE_Msk: u32 = 4096;
pub const RTC_CR_ALRAIE: u32 = 4096;
pub const RTC_CR_TSE_Pos: u32 = 11;
pub const RTC_CR_TSE_Msk: u32 = 2048;
pub const RTC_CR_TSE: u32 = 2048;
pub const RTC_CR_WUTE_Pos: u32 = 10;
pub const RTC_CR_WUTE_Msk: u32 = 1024;
pub const RTC_CR_WUTE: u32 = 1024;
pub const RTC_CR_ALRBE_Pos: u32 = 9;
pub const RTC_CR_ALRBE_Msk: u32 = 512;
pub const RTC_CR_ALRBE: u32 = 512;
pub const RTC_CR_ALRAE_Pos: u32 = 8;
pub const RTC_CR_ALRAE_Msk: u32 = 256;
pub const RTC_CR_ALRAE: u32 = 256;
pub const RTC_CR_DCE_Pos: u32 = 7;
pub const RTC_CR_DCE_Msk: u32 = 128;
pub const RTC_CR_DCE: u32 = 128;
pub const RTC_CR_FMT_Pos: u32 = 6;
pub const RTC_CR_FMT_Msk: u32 = 64;
pub const RTC_CR_FMT: u32 = 64;
pub const RTC_CR_BYPSHAD_Pos: u32 = 5;
pub const RTC_CR_BYPSHAD_Msk: u32 = 32;
pub const RTC_CR_BYPSHAD: u32 = 32;
pub const RTC_CR_REFCKON_Pos: u32 = 4;
pub const RTC_CR_REFCKON_Msk: u32 = 16;
pub const RTC_CR_REFCKON: u32 = 16;
pub const RTC_CR_TSEDGE_Pos: u32 = 3;
pub const RTC_CR_TSEDGE_Msk: u32 = 8;
pub const RTC_CR_TSEDGE: u32 = 8;
pub const RTC_CR_WUCKSEL_Pos: u32 = 0;
pub const RTC_CR_WUCKSEL_Msk: u32 = 7;
pub const RTC_CR_WUCKSEL: u32 = 7;
pub const RTC_CR_WUCKSEL_0: u32 = 1;
pub const RTC_CR_WUCKSEL_1: u32 = 2;
pub const RTC_CR_WUCKSEL_2: u32 = 4;
pub const RTC_CR_BCK: u32 = 262144;
pub const RTC_ISR_RECALPF_Pos: u32 = 16;
pub const RTC_ISR_RECALPF_Msk: u32 = 65536;
pub const RTC_ISR_RECALPF: u32 = 65536;
pub const RTC_ISR_TAMP1F_Pos: u32 = 13;
pub const RTC_ISR_TAMP1F_Msk: u32 = 8192;
pub const RTC_ISR_TAMP1F: u32 = 8192;
pub const RTC_ISR_TAMP2F_Pos: u32 = 14;
pub const RTC_ISR_TAMP2F_Msk: u32 = 16384;
pub const RTC_ISR_TAMP2F: u32 = 16384;
pub const RTC_ISR_TSOVF_Pos: u32 = 12;
pub const RTC_ISR_TSOVF_Msk: u32 = 4096;
pub const RTC_ISR_TSOVF: u32 = 4096;
pub const RTC_ISR_TSF_Pos: u32 = 11;
pub const RTC_ISR_TSF_Msk: u32 = 2048;
pub const RTC_ISR_TSF: u32 = 2048;
pub const RTC_ISR_WUTF_Pos: u32 = 10;
pub const RTC_ISR_WUTF_Msk: u32 = 1024;
pub const RTC_ISR_WUTF: u32 = 1024;
pub const RTC_ISR_ALRBF_Pos: u32 = 9;
pub const RTC_ISR_ALRBF_Msk: u32 = 512;
pub const RTC_ISR_ALRBF: u32 = 512;
pub const RTC_ISR_ALRAF_Pos: u32 = 8;
pub const RTC_ISR_ALRAF_Msk: u32 = 256;
pub const RTC_ISR_ALRAF: u32 = 256;
pub const RTC_ISR_INIT_Pos: u32 = 7;
pub const RTC_ISR_INIT_Msk: u32 = 128;
pub const RTC_ISR_INIT: u32 = 128;
pub const RTC_ISR_INITF_Pos: u32 = 6;
pub const RTC_ISR_INITF_Msk: u32 = 64;
pub const RTC_ISR_INITF: u32 = 64;
pub const RTC_ISR_RSF_Pos: u32 = 5;
pub const RTC_ISR_RSF_Msk: u32 = 32;
pub const RTC_ISR_RSF: u32 = 32;
pub const RTC_ISR_INITS_Pos: u32 = 4;
pub const RTC_ISR_INITS_Msk: u32 = 16;
pub const RTC_ISR_INITS: u32 = 16;
pub const RTC_ISR_SHPF_Pos: u32 = 3;
pub const RTC_ISR_SHPF_Msk: u32 = 8;
pub const RTC_ISR_SHPF: u32 = 8;
pub const RTC_ISR_WUTWF_Pos: u32 = 2;
pub const RTC_ISR_WUTWF_Msk: u32 = 4;
pub const RTC_ISR_WUTWF: u32 = 4;
pub const RTC_ISR_ALRBWF_Pos: u32 = 1;
pub const RTC_ISR_ALRBWF_Msk: u32 = 2;
pub const RTC_ISR_ALRBWF: u32 = 2;
pub const RTC_ISR_ALRAWF_Pos: u32 = 0;
pub const RTC_ISR_ALRAWF_Msk: u32 = 1;
pub const RTC_ISR_ALRAWF: u32 = 1;
pub const RTC_PRER_PREDIV_A_Pos: u32 = 16;
pub const RTC_PRER_PREDIV_A_Msk: u32 = 8323072;
pub const RTC_PRER_PREDIV_A: u32 = 8323072;
pub const RTC_PRER_PREDIV_S_Pos: u32 = 0;
pub const RTC_PRER_PREDIV_S_Msk: u32 = 32767;
pub const RTC_PRER_PREDIV_S: u32 = 32767;
pub const RTC_WUTR_WUT_Pos: u32 = 0;
pub const RTC_WUTR_WUT_Msk: u32 = 65535;
pub const RTC_WUTR_WUT: u32 = 65535;
pub const RTC_CALIBR_DCS_Pos: u32 = 7;
pub const RTC_CALIBR_DCS_Msk: u32 = 128;
pub const RTC_CALIBR_DCS: u32 = 128;
pub const RTC_CALIBR_DC_Pos: u32 = 0;
pub const RTC_CALIBR_DC_Msk: u32 = 31;
pub const RTC_CALIBR_DC: u32 = 31;
pub const RTC_ALRMAR_MSK4_Pos: u32 = 31;
pub const RTC_ALRMAR_MSK4_Msk: u32 = 2147483648;
pub const RTC_ALRMAR_MSK4: u32 = 2147483648;
pub const RTC_ALRMAR_WDSEL_Pos: u32 = 30;
pub const RTC_ALRMAR_WDSEL_Msk: u32 = 1073741824;
pub const RTC_ALRMAR_WDSEL: u32 = 1073741824;
pub const RTC_ALRMAR_DT_Pos: u32 = 28;
pub const RTC_ALRMAR_DT_Msk: u32 = 805306368;
pub const RTC_ALRMAR_DT: u32 = 805306368;
pub const RTC_ALRMAR_DT_0: u32 = 268435456;
pub const RTC_ALRMAR_DT_1: u32 = 536870912;
pub const RTC_ALRMAR_DU_Pos: u32 = 24;
pub const RTC_ALRMAR_DU_Msk: u32 = 251658240;
pub const RTC_ALRMAR_DU: u32 = 251658240;
pub const RTC_ALRMAR_DU_0: u32 = 16777216;
pub const RTC_ALRMAR_DU_1: u32 = 33554432;
pub const RTC_ALRMAR_DU_2: u32 = 67108864;
pub const RTC_ALRMAR_DU_3: u32 = 134217728;
pub const RTC_ALRMAR_MSK3_Pos: u32 = 23;
pub const RTC_ALRMAR_MSK3_Msk: u32 = 8388608;
pub const RTC_ALRMAR_MSK3: u32 = 8388608;
pub const RTC_ALRMAR_PM_Pos: u32 = 22;
pub const RTC_ALRMAR_PM_Msk: u32 = 4194304;
pub const RTC_ALRMAR_PM: u32 = 4194304;
pub const RTC_ALRMAR_HT_Pos: u32 = 20;
pub const RTC_ALRMAR_HT_Msk: u32 = 3145728;
pub const RTC_ALRMAR_HT: u32 = 3145728;
pub const RTC_ALRMAR_HT_0: u32 = 1048576;
pub const RTC_ALRMAR_HT_1: u32 = 2097152;
pub const RTC_ALRMAR_HU_Pos: u32 = 16;
pub const RTC_ALRMAR_HU_Msk: u32 = 983040;
pub const RTC_ALRMAR_HU: u32 = 983040;
pub const RTC_ALRMAR_HU_0: u32 = 65536;
pub const RTC_ALRMAR_HU_1: u32 = 131072;
pub const RTC_ALRMAR_HU_2: u32 = 262144;
pub const RTC_ALRMAR_HU_3: u32 = 524288;
pub const RTC_ALRMAR_MSK2_Pos: u32 = 15;
pub const RTC_ALRMAR_MSK2_Msk: u32 = 32768;
pub const RTC_ALRMAR_MSK2: u32 = 32768;
pub const RTC_ALRMAR_MNT_Pos: u32 = 12;
pub const RTC_ALRMAR_MNT_Msk: u32 = 28672;
pub const RTC_ALRMAR_MNT: u32 = 28672;
pub const RTC_ALRMAR_MNT_0: u32 = 4096;
pub const RTC_ALRMAR_MNT_1: u32 = 8192;
pub const RTC_ALRMAR_MNT_2: u32 = 16384;
pub const RTC_ALRMAR_MNU_Pos: u32 = 8;
pub const RTC_ALRMAR_MNU_Msk: u32 = 3840;
pub const RTC_ALRMAR_MNU: u32 = 3840;
pub const RTC_ALRMAR_MNU_0: u32 = 256;
pub const RTC_ALRMAR_MNU_1: u32 = 512;
pub const RTC_ALRMAR_MNU_2: u32 = 1024;
pub const RTC_ALRMAR_MNU_3: u32 = 2048;
pub const RTC_ALRMAR_MSK1_Pos: u32 = 7;
pub const RTC_ALRMAR_MSK1_Msk: u32 = 128;
pub const RTC_ALRMAR_MSK1: u32 = 128;
pub const RTC_ALRMAR_ST_Pos: u32 = 4;
pub const RTC_ALRMAR_ST_Msk: u32 = 112;
pub const RTC_ALRMAR_ST: u32 = 112;
pub const RTC_ALRMAR_ST_0: u32 = 16;
pub const RTC_ALRMAR_ST_1: u32 = 32;
pub const RTC_ALRMAR_ST_2: u32 = 64;
pub const RTC_ALRMAR_SU_Pos: u32 = 0;
pub const RTC_ALRMAR_SU_Msk: u32 = 15;
pub const RTC_ALRMAR_SU: u32 = 15;
pub const RTC_ALRMAR_SU_0: u32 = 1;
pub const RTC_ALRMAR_SU_1: u32 = 2;
pub const RTC_ALRMAR_SU_2: u32 = 4;
pub const RTC_ALRMAR_SU_3: u32 = 8;
pub const RTC_ALRMBR_MSK4_Pos: u32 = 31;
pub const RTC_ALRMBR_MSK4_Msk: u32 = 2147483648;
pub const RTC_ALRMBR_MSK4: u32 = 2147483648;
pub const RTC_ALRMBR_WDSEL_Pos: u32 = 30;
pub const RTC_ALRMBR_WDSEL_Msk: u32 = 1073741824;
pub const RTC_ALRMBR_WDSEL: u32 = 1073741824;
pub const RTC_ALRMBR_DT_Pos: u32 = 28;
pub const RTC_ALRMBR_DT_Msk: u32 = 805306368;
pub const RTC_ALRMBR_DT: u32 = 805306368;
pub const RTC_ALRMBR_DT_0: u32 = 268435456;
pub const RTC_ALRMBR_DT_1: u32 = 536870912;
pub const RTC_ALRMBR_DU_Pos: u32 = 24;
pub const RTC_ALRMBR_DU_Msk: u32 = 251658240;
pub const RTC_ALRMBR_DU: u32 = 251658240;
pub const RTC_ALRMBR_DU_0: u32 = 16777216;
pub const RTC_ALRMBR_DU_1: u32 = 33554432;
pub const RTC_ALRMBR_DU_2: u32 = 67108864;
pub const RTC_ALRMBR_DU_3: u32 = 134217728;
pub const RTC_ALRMBR_MSK3_Pos: u32 = 23;
pub const RTC_ALRMBR_MSK3_Msk: u32 = 8388608;
pub const RTC_ALRMBR_MSK3: u32 = 8388608;
pub const RTC_ALRMBR_PM_Pos: u32 = 22;
pub const RTC_ALRMBR_PM_Msk: u32 = 4194304;
pub const RTC_ALRMBR_PM: u32 = 4194304;
pub const RTC_ALRMBR_HT_Pos: u32 = 20;
pub const RTC_ALRMBR_HT_Msk: u32 = 3145728;
pub const RTC_ALRMBR_HT: u32 = 3145728;
pub const RTC_ALRMBR_HT_0: u32 = 1048576;
pub const RTC_ALRMBR_HT_1: u32 = 2097152;
pub const RTC_ALRMBR_HU_Pos: u32 = 16;
pub const RTC_ALRMBR_HU_Msk: u32 = 983040;
pub const RTC_ALRMBR_HU: u32 = 983040;
pub const RTC_ALRMBR_HU_0: u32 = 65536;
pub const RTC_ALRMBR_HU_1: u32 = 131072;
pub const RTC_ALRMBR_HU_2: u32 = 262144;
pub const RTC_ALRMBR_HU_3: u32 = 524288;
pub const RTC_ALRMBR_MSK2_Pos: u32 = 15;
pub const RTC_ALRMBR_MSK2_Msk: u32 = 32768;
pub const RTC_ALRMBR_MSK2: u32 = 32768;
pub const RTC_ALRMBR_MNT_Pos: u32 = 12;
pub const RTC_ALRMBR_MNT_Msk: u32 = 28672;
pub const RTC_ALRMBR_MNT: u32 = 28672;
pub const RTC_ALRMBR_MNT_0: u32 = 4096;
pub const RTC_ALRMBR_MNT_1: u32 = 8192;
pub const RTC_ALRMBR_MNT_2: u32 = 16384;
pub const RTC_ALRMBR_MNU_Pos: u32 = 8;
pub const RTC_ALRMBR_MNU_Msk: u32 = 3840;
pub const RTC_ALRMBR_MNU: u32 = 3840;
pub const RTC_ALRMBR_MNU_0: u32 = 256;
pub const RTC_ALRMBR_MNU_1: u32 = 512;
pub const RTC_ALRMBR_MNU_2: u32 = 1024;
pub const RTC_ALRMBR_MNU_3: u32 = 2048;
pub const RTC_ALRMBR_MSK1_Pos: u32 = 7;
pub const RTC_ALRMBR_MSK1_Msk: u32 = 128;
pub const RTC_ALRMBR_MSK1: u32 = 128;
pub const RTC_ALRMBR_ST_Pos: u32 = 4;
pub const RTC_ALRMBR_ST_Msk: u32 = 112;
pub const RTC_ALRMBR_ST: u32 = 112;
pub const RTC_ALRMBR_ST_0: u32 = 16;
pub const RTC_ALRMBR_ST_1: u32 = 32;
pub const RTC_ALRMBR_ST_2: u32 = 64;
pub const RTC_ALRMBR_SU_Pos: u32 = 0;
pub const RTC_ALRMBR_SU_Msk: u32 = 15;
pub const RTC_ALRMBR_SU: u32 = 15;
pub const RTC_ALRMBR_SU_0: u32 = 1;
pub const RTC_ALRMBR_SU_1: u32 = 2;
pub const RTC_ALRMBR_SU_2: u32 = 4;
pub const RTC_ALRMBR_SU_3: u32 = 8;
pub const RTC_WPR_KEY_Pos: u32 = 0;
pub const RTC_WPR_KEY_Msk: u32 = 255;
pub const RTC_WPR_KEY: u32 = 255;
pub const RTC_SSR_SS_Pos: u32 = 0;
pub const RTC_SSR_SS_Msk: u32 = 65535;
pub const RTC_SSR_SS: u32 = 65535;
pub const RTC_SHIFTR_SUBFS_Pos: u32 = 0;
pub const RTC_SHIFTR_SUBFS_Msk: u32 = 32767;
pub const RTC_SHIFTR_SUBFS: u32 = 32767;
pub const RTC_SHIFTR_ADD1S_Pos: u32 = 31;
pub const RTC_SHIFTR_ADD1S_Msk: u32 = 2147483648;
pub const RTC_SHIFTR_ADD1S: u32 = 2147483648;
pub const RTC_TSTR_PM_Pos: u32 = 22;
pub const RTC_TSTR_PM_Msk: u32 = 4194304;
pub const RTC_TSTR_PM: u32 = 4194304;
pub const RTC_TSTR_HT_Pos: u32 = 20;
pub const RTC_TSTR_HT_Msk: u32 = 3145728;
pub const RTC_TSTR_HT: u32 = 3145728;
pub const RTC_TSTR_HT_0: u32 = 1048576;
pub const RTC_TSTR_HT_1: u32 = 2097152;
pub const RTC_TSTR_HU_Pos: u32 = 16;
pub const RTC_TSTR_HU_Msk: u32 = 983040;
pub const RTC_TSTR_HU: u32 = 983040;
pub const RTC_TSTR_HU_0: u32 = 65536;
pub const RTC_TSTR_HU_1: u32 = 131072;
pub const RTC_TSTR_HU_2: u32 = 262144;
pub const RTC_TSTR_HU_3: u32 = 524288;
pub const RTC_TSTR_MNT_Pos: u32 = 12;
pub const RTC_TSTR_MNT_Msk: u32 = 28672;
pub const RTC_TSTR_MNT: u32 = 28672;
pub const RTC_TSTR_MNT_0: u32 = 4096;
pub const RTC_TSTR_MNT_1: u32 = 8192;
pub const RTC_TSTR_MNT_2: u32 = 16384;
pub const RTC_TSTR_MNU_Pos: u32 = 8;
pub const RTC_TSTR_MNU_Msk: u32 = 3840;
pub const RTC_TSTR_MNU: u32 = 3840;
pub const RTC_TSTR_MNU_0: u32 = 256;
pub const RTC_TSTR_MNU_1: u32 = 512;
pub const RTC_TSTR_MNU_2: u32 = 1024;
pub const RTC_TSTR_MNU_3: u32 = 2048;
pub const RTC_TSTR_ST_Pos: u32 = 4;
pub const RTC_TSTR_ST_Msk: u32 = 112;
pub const RTC_TSTR_ST: u32 = 112;
pub const RTC_TSTR_ST_0: u32 = 16;
pub const RTC_TSTR_ST_1: u32 = 32;
pub const RTC_TSTR_ST_2: u32 = 64;
pub const RTC_TSTR_SU_Pos: u32 = 0;
pub const RTC_TSTR_SU_Msk: u32 = 15;
pub const RTC_TSTR_SU: u32 = 15;
pub const RTC_TSTR_SU_0: u32 = 1;
pub const RTC_TSTR_SU_1: u32 = 2;
pub const RTC_TSTR_SU_2: u32 = 4;
pub const RTC_TSTR_SU_3: u32 = 8;
pub const RTC_TSDR_WDU_Pos: u32 = 13;
pub const RTC_TSDR_WDU_Msk: u32 = 57344;
pub const RTC_TSDR_WDU: u32 = 57344;
pub const RTC_TSDR_WDU_0: u32 = 8192;
pub const RTC_TSDR_WDU_1: u32 = 16384;
pub const RTC_TSDR_WDU_2: u32 = 32768;
pub const RTC_TSDR_MT_Pos: u32 = 12;
pub const RTC_TSDR_MT_Msk: u32 = 4096;
pub const RTC_TSDR_MT: u32 = 4096;
pub const RTC_TSDR_MU_Pos: u32 = 8;
pub const RTC_TSDR_MU_Msk: u32 = 3840;
pub const RTC_TSDR_MU: u32 = 3840;
pub const RTC_TSDR_MU_0: u32 = 256;
pub const RTC_TSDR_MU_1: u32 = 512;
pub const RTC_TSDR_MU_2: u32 = 1024;
pub const RTC_TSDR_MU_3: u32 = 2048;
pub const RTC_TSDR_DT_Pos: u32 = 4;
pub const RTC_TSDR_DT_Msk: u32 = 48;
pub const RTC_TSDR_DT: u32 = 48;
pub const RTC_TSDR_DT_0: u32 = 16;
pub const RTC_TSDR_DT_1: u32 = 32;
pub const RTC_TSDR_DU_Pos: u32 = 0;
pub const RTC_TSDR_DU_Msk: u32 = 15;
pub const RTC_TSDR_DU: u32 = 15;
pub const RTC_TSDR_DU_0: u32 = 1;
pub const RTC_TSDR_DU_1: u32 = 2;
pub const RTC_TSDR_DU_2: u32 = 4;
pub const RTC_TSDR_DU_3: u32 = 8;
pub const RTC_TSSSR_SS_Pos: u32 = 0;
pub const RTC_TSSSR_SS_Msk: u32 = 65535;
pub const RTC_TSSSR_SS: u32 = 65535;
pub const RTC_CALR_CALP_Pos: u32 = 15;
pub const RTC_CALR_CALP_Msk: u32 = 32768;
pub const RTC_CALR_CALP: u32 = 32768;
pub const RTC_CALR_CALW8_Pos: u32 = 14;
pub const RTC_CALR_CALW8_Msk: u32 = 16384;
pub const RTC_CALR_CALW8: u32 = 16384;
pub const RTC_CALR_CALW16_Pos: u32 = 13;
pub const RTC_CALR_CALW16_Msk: u32 = 8192;
pub const RTC_CALR_CALW16: u32 = 8192;
pub const RTC_CALR_CALM_Pos: u32 = 0;
pub const RTC_CALR_CALM_Msk: u32 = 511;
pub const RTC_CALR_CALM: u32 = 511;
pub const RTC_CALR_CALM_0: u32 = 1;
pub const RTC_CALR_CALM_1: u32 = 2;
pub const RTC_CALR_CALM_2: u32 = 4;
pub const RTC_CALR_CALM_3: u32 = 8;
pub const RTC_CALR_CALM_4: u32 = 16;
pub const RTC_CALR_CALM_5: u32 = 32;
pub const RTC_CALR_CALM_6: u32 = 64;
pub const RTC_CALR_CALM_7: u32 = 128;
pub const RTC_CALR_CALM_8: u32 = 256;
pub const RTC_TAFCR_ALARMOUTTYPE_Pos: u32 = 18;
pub const RTC_TAFCR_ALARMOUTTYPE_Msk: u32 = 262144;
pub const RTC_TAFCR_ALARMOUTTYPE: u32 = 262144;
pub const RTC_TAFCR_TSINSEL_Pos: u32 = 17;
pub const RTC_TAFCR_TSINSEL_Msk: u32 = 131072;
pub const RTC_TAFCR_TSINSEL: u32 = 131072;
pub const RTC_TAFCR_TAMP1INSEL_Pos: u32 = 16;
pub const RTC_TAFCR_TAMP1INSEL_Msk: u32 = 65536;
pub const RTC_TAFCR_TAMP1INSEL: u32 = 65536;
pub const RTC_TAFCR_TAMPPUDIS_Pos: u32 = 15;
pub const RTC_TAFCR_TAMPPUDIS_Msk: u32 = 32768;
pub const RTC_TAFCR_TAMPPUDIS: u32 = 32768;
pub const RTC_TAFCR_TAMPPRCH_Pos: u32 = 13;
pub const RTC_TAFCR_TAMPPRCH_Msk: u32 = 24576;
pub const RTC_TAFCR_TAMPPRCH: u32 = 24576;
pub const RTC_TAFCR_TAMPPRCH_0: u32 = 8192;
pub const RTC_TAFCR_TAMPPRCH_1: u32 = 16384;
pub const RTC_TAFCR_TAMPFLT_Pos: u32 = 11;
pub const RTC_TAFCR_TAMPFLT_Msk: u32 = 6144;
pub const RTC_TAFCR_TAMPFLT: u32 = 6144;
pub const RTC_TAFCR_TAMPFLT_0: u32 = 2048;
pub const RTC_TAFCR_TAMPFLT_1: u32 = 4096;
pub const RTC_TAFCR_TAMPFREQ_Pos: u32 = 8;
pub const RTC_TAFCR_TAMPFREQ_Msk: u32 = 1792;
pub const RTC_TAFCR_TAMPFREQ: u32 = 1792;
pub const RTC_TAFCR_TAMPFREQ_0: u32 = 256;
pub const RTC_TAFCR_TAMPFREQ_1: u32 = 512;
pub const RTC_TAFCR_TAMPFREQ_2: u32 = 1024;
pub const RTC_TAFCR_TAMPTS_Pos: u32 = 7;
pub const RTC_TAFCR_TAMPTS_Msk: u32 = 128;
pub const RTC_TAFCR_TAMPTS: u32 = 128;
pub const RTC_TAFCR_TAMP2TRG_Pos: u32 = 4;
pub const RTC_TAFCR_TAMP2TRG_Msk: u32 = 16;
pub const RTC_TAFCR_TAMP2TRG: u32 = 16;
pub const RTC_TAFCR_TAMP2E_Pos: u32 = 3;
pub const RTC_TAFCR_TAMP2E_Msk: u32 = 8;
pub const RTC_TAFCR_TAMP2E: u32 = 8;
pub const RTC_TAFCR_TAMPIE_Pos: u32 = 2;
pub const RTC_TAFCR_TAMPIE_Msk: u32 = 4;
pub const RTC_TAFCR_TAMPIE: u32 = 4;
pub const RTC_TAFCR_TAMP1TRG_Pos: u32 = 1;
pub const RTC_TAFCR_TAMP1TRG_Msk: u32 = 2;
pub const RTC_TAFCR_TAMP1TRG: u32 = 2;
pub const RTC_TAFCR_TAMP1E_Pos: u32 = 0;
pub const RTC_TAFCR_TAMP1E_Msk: u32 = 1;
pub const RTC_TAFCR_TAMP1E: u32 = 1;
pub const RTC_TAFCR_TAMPINSEL: u32 = 65536;
pub const RTC_ALRMASSR_MASKSS_Pos: u32 = 24;
pub const RTC_ALRMASSR_MASKSS_Msk: u32 = 251658240;
pub const RTC_ALRMASSR_MASKSS: u32 = 251658240;
pub const RTC_ALRMASSR_MASKSS_0: u32 = 16777216;
pub const RTC_ALRMASSR_MASKSS_1: u32 = 33554432;
pub const RTC_ALRMASSR_MASKSS_2: u32 = 67108864;
pub const RTC_ALRMASSR_MASKSS_3: u32 = 134217728;
pub const RTC_ALRMASSR_SS_Pos: u32 = 0;
pub const RTC_ALRMASSR_SS_Msk: u32 = 32767;
pub const RTC_ALRMASSR_SS: u32 = 32767;
pub const RTC_ALRMBSSR_MASKSS_Pos: u32 = 24;
pub const RTC_ALRMBSSR_MASKSS_Msk: u32 = 251658240;
pub const RTC_ALRMBSSR_MASKSS: u32 = 251658240;
pub const RTC_ALRMBSSR_MASKSS_0: u32 = 16777216;
pub const RTC_ALRMBSSR_MASKSS_1: u32 = 33554432;
pub const RTC_ALRMBSSR_MASKSS_2: u32 = 67108864;
pub const RTC_ALRMBSSR_MASKSS_3: u32 = 134217728;
pub const RTC_ALRMBSSR_SS_Pos: u32 = 0;
pub const RTC_ALRMBSSR_SS_Msk: u32 = 32767;
pub const RTC_ALRMBSSR_SS: u32 = 32767;
pub const RTC_BKP0R_Pos: u32 = 0;
pub const RTC_BKP0R_Msk: u32 = 4294967295;
pub const RTC_BKP0R: u32 = 4294967295;
pub const RTC_BKP1R_Pos: u32 = 0;
pub const RTC_BKP1R_Msk: u32 = 4294967295;
pub const RTC_BKP1R: u32 = 4294967295;
pub const RTC_BKP2R_Pos: u32 = 0;
pub const RTC_BKP2R_Msk: u32 = 4294967295;
pub const RTC_BKP2R: u32 = 4294967295;
pub const RTC_BKP3R_Pos: u32 = 0;
pub const RTC_BKP3R_Msk: u32 = 4294967295;
pub const RTC_BKP3R: u32 = 4294967295;
pub const RTC_BKP4R_Pos: u32 = 0;
pub const RTC_BKP4R_Msk: u32 = 4294967295;
pub const RTC_BKP4R: u32 = 4294967295;
pub const RTC_BKP5R_Pos: u32 = 0;
pub const RTC_BKP5R_Msk: u32 = 4294967295;
pub const RTC_BKP5R: u32 = 4294967295;
pub const RTC_BKP6R_Pos: u32 = 0;
pub const RTC_BKP6R_Msk: u32 = 4294967295;
pub const RTC_BKP6R: u32 = 4294967295;
pub const RTC_BKP7R_Pos: u32 = 0;
pub const RTC_BKP7R_Msk: u32 = 4294967295;
pub const RTC_BKP7R: u32 = 4294967295;
pub const RTC_BKP8R_Pos: u32 = 0;
pub const RTC_BKP8R_Msk: u32 = 4294967295;
pub const RTC_BKP8R: u32 = 4294967295;
pub const RTC_BKP9R_Pos: u32 = 0;
pub const RTC_BKP9R_Msk: u32 = 4294967295;
pub const RTC_BKP9R: u32 = 4294967295;
pub const RTC_BKP10R_Pos: u32 = 0;
pub const RTC_BKP10R_Msk: u32 = 4294967295;
pub const RTC_BKP10R: u32 = 4294967295;
pub const RTC_BKP11R_Pos: u32 = 0;
pub const RTC_BKP11R_Msk: u32 = 4294967295;
pub const RTC_BKP11R: u32 = 4294967295;
pub const RTC_BKP12R_Pos: u32 = 0;
pub const RTC_BKP12R_Msk: u32 = 4294967295;
pub const RTC_BKP12R: u32 = 4294967295;
pub const RTC_BKP13R_Pos: u32 = 0;
pub const RTC_BKP13R_Msk: u32 = 4294967295;
pub const RTC_BKP13R: u32 = 4294967295;
pub const RTC_BKP14R_Pos: u32 = 0;
pub const RTC_BKP14R_Msk: u32 = 4294967295;
pub const RTC_BKP14R: u32 = 4294967295;
pub const RTC_BKP15R_Pos: u32 = 0;
pub const RTC_BKP15R_Msk: u32 = 4294967295;
pub const RTC_BKP15R: u32 = 4294967295;
pub const RTC_BKP16R_Pos: u32 = 0;
pub const RTC_BKP16R_Msk: u32 = 4294967295;
pub const RTC_BKP16R: u32 = 4294967295;
pub const RTC_BKP17R_Pos: u32 = 0;
pub const RTC_BKP17R_Msk: u32 = 4294967295;
pub const RTC_BKP17R: u32 = 4294967295;
pub const RTC_BKP18R_Pos: u32 = 0;
pub const RTC_BKP18R_Msk: u32 = 4294967295;
pub const RTC_BKP18R: u32 = 4294967295;
pub const RTC_BKP19R_Pos: u32 = 0;
pub const RTC_BKP19R_Msk: u32 = 4294967295;
pub const RTC_BKP19R: u32 = 4294967295;
pub const RTC_BKP_NUMBER: u32 = 20;
pub const SDIO_POWER_PWRCTRL_Pos: u32 = 0;
pub const SDIO_POWER_PWRCTRL_Msk: u32 = 3;
pub const SDIO_POWER_PWRCTRL: u32 = 3;
pub const SDIO_POWER_PWRCTRL_0: u32 = 1;
pub const SDIO_POWER_PWRCTRL_1: u32 = 2;
pub const SDIO_CLKCR_CLKDIV_Pos: u32 = 0;
pub const SDIO_CLKCR_CLKDIV_Msk: u32 = 255;
pub const SDIO_CLKCR_CLKDIV: u32 = 255;
pub const SDIO_CLKCR_CLKEN_Pos: u32 = 8;
pub const SDIO_CLKCR_CLKEN_Msk: u32 = 256;
pub const SDIO_CLKCR_CLKEN: u32 = 256;
pub const SDIO_CLKCR_PWRSAV_Pos: u32 = 9;
pub const SDIO_CLKCR_PWRSAV_Msk: u32 = 512;
pub const SDIO_CLKCR_PWRSAV: u32 = 512;
pub const SDIO_CLKCR_BYPASS_Pos: u32 = 10;
pub const SDIO_CLKCR_BYPASS_Msk: u32 = 1024;
pub const SDIO_CLKCR_BYPASS: u32 = 1024;
pub const SDIO_CLKCR_WIDBUS_Pos: u32 = 11;
pub const SDIO_CLKCR_WIDBUS_Msk: u32 = 6144;
pub const SDIO_CLKCR_WIDBUS: u32 = 6144;
pub const SDIO_CLKCR_WIDBUS_0: u32 = 2048;
pub const SDIO_CLKCR_WIDBUS_1: u32 = 4096;
pub const SDIO_CLKCR_NEGEDGE_Pos: u32 = 13;
pub const SDIO_CLKCR_NEGEDGE_Msk: u32 = 8192;
pub const SDIO_CLKCR_NEGEDGE: u32 = 8192;
pub const SDIO_CLKCR_HWFC_EN_Pos: u32 = 14;
pub const SDIO_CLKCR_HWFC_EN_Msk: u32 = 16384;
pub const SDIO_CLKCR_HWFC_EN: u32 = 16384;
pub const SDIO_ARG_CMDARG_Pos: u32 = 0;
pub const SDIO_ARG_CMDARG_Msk: u32 = 4294967295;
pub const SDIO_ARG_CMDARG: u32 = 4294967295;
pub const SDIO_CMD_CMDINDEX_Pos: u32 = 0;
pub const SDIO_CMD_CMDINDEX_Msk: u32 = 63;
pub const SDIO_CMD_CMDINDEX: u32 = 63;
pub const SDIO_CMD_WAITRESP_Pos: u32 = 6;
pub const SDIO_CMD_WAITRESP_Msk: u32 = 192;
pub const SDIO_CMD_WAITRESP: u32 = 192;
pub const SDIO_CMD_WAITRESP_0: u32 = 64;
pub const SDIO_CMD_WAITRESP_1: u32 = 128;
pub const SDIO_CMD_WAITINT_Pos: u32 = 8;
pub const SDIO_CMD_WAITINT_Msk: u32 = 256;
pub const SDIO_CMD_WAITINT: u32 = 256;
pub const SDIO_CMD_WAITPEND_Pos: u32 = 9;
pub const SDIO_CMD_WAITPEND_Msk: u32 = 512;
pub const SDIO_CMD_WAITPEND: u32 = 512;
pub const SDIO_CMD_CPSMEN_Pos: u32 = 10;
pub const SDIO_CMD_CPSMEN_Msk: u32 = 1024;
pub const SDIO_CMD_CPSMEN: u32 = 1024;
pub const SDIO_CMD_SDIOSUSPEND_Pos: u32 = 11;
pub const SDIO_CMD_SDIOSUSPEND_Msk: u32 = 2048;
pub const SDIO_CMD_SDIOSUSPEND: u32 = 2048;
pub const SDIO_CMD_ENCMDCOMPL_Pos: u32 = 12;
pub const SDIO_CMD_ENCMDCOMPL_Msk: u32 = 4096;
pub const SDIO_CMD_ENCMDCOMPL: u32 = 4096;
pub const SDIO_CMD_NIEN_Pos: u32 = 13;
pub const SDIO_CMD_NIEN_Msk: u32 = 8192;
pub const SDIO_CMD_NIEN: u32 = 8192;
pub const SDIO_CMD_CEATACMD_Pos: u32 = 14;
pub const SDIO_CMD_CEATACMD_Msk: u32 = 16384;
pub const SDIO_CMD_CEATACMD: u32 = 16384;
pub const SDIO_RESPCMD_RESPCMD_Pos: u32 = 0;
pub const SDIO_RESPCMD_RESPCMD_Msk: u32 = 63;
pub const SDIO_RESPCMD_RESPCMD: u32 = 63;
pub const SDIO_RESP0_CARDSTATUS0_Pos: u32 = 0;
pub const SDIO_RESP0_CARDSTATUS0_Msk: u32 = 4294967295;
pub const SDIO_RESP0_CARDSTATUS0: u32 = 4294967295;
pub const SDIO_RESP1_CARDSTATUS1_Pos: u32 = 0;
pub const SDIO_RESP1_CARDSTATUS1_Msk: u32 = 4294967295;
pub const SDIO_RESP1_CARDSTATUS1: u32 = 4294967295;
pub const SDIO_RESP2_CARDSTATUS2_Pos: u32 = 0;
pub const SDIO_RESP2_CARDSTATUS2_Msk: u32 = 4294967295;
pub const SDIO_RESP2_CARDSTATUS2: u32 = 4294967295;
pub const SDIO_RESP3_CARDSTATUS3_Pos: u32 = 0;
pub const SDIO_RESP3_CARDSTATUS3_Msk: u32 = 4294967295;
pub const SDIO_RESP3_CARDSTATUS3: u32 = 4294967295;
pub const SDIO_RESP4_CARDSTATUS4_Pos: u32 = 0;
pub const SDIO_RESP4_CARDSTATUS4_Msk: u32 = 4294967295;
pub const SDIO_RESP4_CARDSTATUS4: u32 = 4294967295;
pub const SDIO_DTIMER_DATATIME_Pos: u32 = 0;
pub const SDIO_DTIMER_DATATIME_Msk: u32 = 4294967295;
pub const SDIO_DTIMER_DATATIME: u32 = 4294967295;
pub const SDIO_DLEN_DATALENGTH_Pos: u32 = 0;
pub const SDIO_DLEN_DATALENGTH_Msk: u32 = 33554431;
pub const SDIO_DLEN_DATALENGTH: u32 = 33554431;
pub const SDIO_DCTRL_DTEN_Pos: u32 = 0;
pub const SDIO_DCTRL_DTEN_Msk: u32 = 1;
pub const SDIO_DCTRL_DTEN: u32 = 1;
pub const SDIO_DCTRL_DTDIR_Pos: u32 = 1;
pub const SDIO_DCTRL_DTDIR_Msk: u32 = 2;
pub const SDIO_DCTRL_DTDIR: u32 = 2;
pub const SDIO_DCTRL_DTMODE_Pos: u32 = 2;
pub const SDIO_DCTRL_DTMODE_Msk: u32 = 4;
pub const SDIO_DCTRL_DTMODE: u32 = 4;
pub const SDIO_DCTRL_DMAEN_Pos: u32 = 3;
pub const SDIO_DCTRL_DMAEN_Msk: u32 = 8;
pub const SDIO_DCTRL_DMAEN: u32 = 8;
pub const SDIO_DCTRL_DBLOCKSIZE_Pos: u32 = 4;
pub const SDIO_DCTRL_DBLOCKSIZE_Msk: u32 = 240;
pub const SDIO_DCTRL_DBLOCKSIZE: u32 = 240;
pub const SDIO_DCTRL_DBLOCKSIZE_0: u32 = 16;
pub const SDIO_DCTRL_DBLOCKSIZE_1: u32 = 32;
pub const SDIO_DCTRL_DBLOCKSIZE_2: u32 = 64;
pub const SDIO_DCTRL_DBLOCKSIZE_3: u32 = 128;
pub const SDIO_DCTRL_RWSTART_Pos: u32 = 8;
pub const SDIO_DCTRL_RWSTART_Msk: u32 = 256;
pub const SDIO_DCTRL_RWSTART: u32 = 256;
pub const SDIO_DCTRL_RWSTOP_Pos: u32 = 9;
pub const SDIO_DCTRL_RWSTOP_Msk: u32 = 512;
pub const SDIO_DCTRL_RWSTOP: u32 = 512;
pub const SDIO_DCTRL_RWMOD_Pos: u32 = 10;
pub const SDIO_DCTRL_RWMOD_Msk: u32 = 1024;
pub const SDIO_DCTRL_RWMOD: u32 = 1024;
pub const SDIO_DCTRL_SDIOEN_Pos: u32 = 11;
pub const SDIO_DCTRL_SDIOEN_Msk: u32 = 2048;
pub const SDIO_DCTRL_SDIOEN: u32 = 2048;
pub const SDIO_DCOUNT_DATACOUNT_Pos: u32 = 0;
pub const SDIO_DCOUNT_DATACOUNT_Msk: u32 = 33554431;
pub const SDIO_DCOUNT_DATACOUNT: u32 = 33554431;
pub const SDIO_STA_CCRCFAIL_Pos: u32 = 0;
pub const SDIO_STA_CCRCFAIL_Msk: u32 = 1;
pub const SDIO_STA_CCRCFAIL: u32 = 1;
pub const SDIO_STA_DCRCFAIL_Pos: u32 = 1;
pub const SDIO_STA_DCRCFAIL_Msk: u32 = 2;
pub const SDIO_STA_DCRCFAIL: u32 = 2;
pub const SDIO_STA_CTIMEOUT_Pos: u32 = 2;
pub const SDIO_STA_CTIMEOUT_Msk: u32 = 4;
pub const SDIO_STA_CTIMEOUT: u32 = 4;
pub const SDIO_STA_DTIMEOUT_Pos: u32 = 3;
pub const SDIO_STA_DTIMEOUT_Msk: u32 = 8;
pub const SDIO_STA_DTIMEOUT: u32 = 8;
pub const SDIO_STA_TXUNDERR_Pos: u32 = 4;
pub const SDIO_STA_TXUNDERR_Msk: u32 = 16;
pub const SDIO_STA_TXUNDERR: u32 = 16;
pub const SDIO_STA_RXOVERR_Pos: u32 = 5;
pub const SDIO_STA_RXOVERR_Msk: u32 = 32;
pub const SDIO_STA_RXOVERR: u32 = 32;
pub const SDIO_STA_CMDREND_Pos: u32 = 6;
pub const SDIO_STA_CMDREND_Msk: u32 = 64;
pub const SDIO_STA_CMDREND: u32 = 64;
pub const SDIO_STA_CMDSENT_Pos: u32 = 7;
pub const SDIO_STA_CMDSENT_Msk: u32 = 128;
pub const SDIO_STA_CMDSENT: u32 = 128;
pub const SDIO_STA_DATAEND_Pos: u32 = 8;
pub const SDIO_STA_DATAEND_Msk: u32 = 256;
pub const SDIO_STA_DATAEND: u32 = 256;
pub const SDIO_STA_STBITERR_Pos: u32 = 9;
pub const SDIO_STA_STBITERR_Msk: u32 = 512;
pub const SDIO_STA_STBITERR: u32 = 512;
pub const SDIO_STA_DBCKEND_Pos: u32 = 10;
pub const SDIO_STA_DBCKEND_Msk: u32 = 1024;
pub const SDIO_STA_DBCKEND: u32 = 1024;
pub const SDIO_STA_CMDACT_Pos: u32 = 11;
pub const SDIO_STA_CMDACT_Msk: u32 = 2048;
pub const SDIO_STA_CMDACT: u32 = 2048;
pub const SDIO_STA_TXACT_Pos: u32 = 12;
pub const SDIO_STA_TXACT_Msk: u32 = 4096;
pub const SDIO_STA_TXACT: u32 = 4096;
pub const SDIO_STA_RXACT_Pos: u32 = 13;
pub const SDIO_STA_RXACT_Msk: u32 = 8192;
pub const SDIO_STA_RXACT: u32 = 8192;
pub const SDIO_STA_TXFIFOHE_Pos: u32 = 14;
pub const SDIO_STA_TXFIFOHE_Msk: u32 = 16384;
pub const SDIO_STA_TXFIFOHE: u32 = 16384;
pub const SDIO_STA_RXFIFOHF_Pos: u32 = 15;
pub const SDIO_STA_RXFIFOHF_Msk: u32 = 32768;
pub const SDIO_STA_RXFIFOHF: u32 = 32768;
pub const SDIO_STA_TXFIFOF_Pos: u32 = 16;
pub const SDIO_STA_TXFIFOF_Msk: u32 = 65536;
pub const SDIO_STA_TXFIFOF: u32 = 65536;
pub const SDIO_STA_RXFIFOF_Pos: u32 = 17;
pub const SDIO_STA_RXFIFOF_Msk: u32 = 131072;
pub const SDIO_STA_RXFIFOF: u32 = 131072;
pub const SDIO_STA_TXFIFOE_Pos: u32 = 18;
pub const SDIO_STA_TXFIFOE_Msk: u32 = 262144;
pub const SDIO_STA_TXFIFOE: u32 = 262144;
pub const SDIO_STA_RXFIFOE_Pos: u32 = 19;
pub const SDIO_STA_RXFIFOE_Msk: u32 = 524288;
pub const SDIO_STA_RXFIFOE: u32 = 524288;
pub const SDIO_STA_TXDAVL_Pos: u32 = 20;
pub const SDIO_STA_TXDAVL_Msk: u32 = 1048576;
pub const SDIO_STA_TXDAVL: u32 = 1048576;
pub const SDIO_STA_RXDAVL_Pos: u32 = 21;
pub const SDIO_STA_RXDAVL_Msk: u32 = 2097152;
pub const SDIO_STA_RXDAVL: u32 = 2097152;
pub const SDIO_STA_SDIOIT_Pos: u32 = 22;
pub const SDIO_STA_SDIOIT_Msk: u32 = 4194304;
pub const SDIO_STA_SDIOIT: u32 = 4194304;
pub const SDIO_STA_CEATAEND_Pos: u32 = 23;
pub const SDIO_STA_CEATAEND_Msk: u32 = 8388608;
pub const SDIO_STA_CEATAEND: u32 = 8388608;
pub const SDIO_ICR_CCRCFAILC_Pos: u32 = 0;
pub const SDIO_ICR_CCRCFAILC_Msk: u32 = 1;
pub const SDIO_ICR_CCRCFAILC: u32 = 1;
pub const SDIO_ICR_DCRCFAILC_Pos: u32 = 1;
pub const SDIO_ICR_DCRCFAILC_Msk: u32 = 2;
pub const SDIO_ICR_DCRCFAILC: u32 = 2;
pub const SDIO_ICR_CTIMEOUTC_Pos: u32 = 2;
pub const SDIO_ICR_CTIMEOUTC_Msk: u32 = 4;
pub const SDIO_ICR_CTIMEOUTC: u32 = 4;
pub const SDIO_ICR_DTIMEOUTC_Pos: u32 = 3;
pub const SDIO_ICR_DTIMEOUTC_Msk: u32 = 8;
pub const SDIO_ICR_DTIMEOUTC: u32 = 8;
pub const SDIO_ICR_TXUNDERRC_Pos: u32 = 4;
pub const SDIO_ICR_TXUNDERRC_Msk: u32 = 16;
pub const SDIO_ICR_TXUNDERRC: u32 = 16;
pub const SDIO_ICR_RXOVERRC_Pos: u32 = 5;
pub const SDIO_ICR_RXOVERRC_Msk: u32 = 32;
pub const SDIO_ICR_RXOVERRC: u32 = 32;
pub const SDIO_ICR_CMDRENDC_Pos: u32 = 6;
pub const SDIO_ICR_CMDRENDC_Msk: u32 = 64;
pub const SDIO_ICR_CMDRENDC: u32 = 64;
pub const SDIO_ICR_CMDSENTC_Pos: u32 = 7;
pub const SDIO_ICR_CMDSENTC_Msk: u32 = 128;
pub const SDIO_ICR_CMDSENTC: u32 = 128;
pub const SDIO_ICR_DATAENDC_Pos: u32 = 8;
pub const SDIO_ICR_DATAENDC_Msk: u32 = 256;
pub const SDIO_ICR_DATAENDC: u32 = 256;
pub const SDIO_ICR_STBITERRC_Pos: u32 = 9;
pub const SDIO_ICR_STBITERRC_Msk: u32 = 512;
pub const SDIO_ICR_STBITERRC: u32 = 512;
pub const SDIO_ICR_DBCKENDC_Pos: u32 = 10;
pub const SDIO_ICR_DBCKENDC_Msk: u32 = 1024;
pub const SDIO_ICR_DBCKENDC: u32 = 1024;
pub const SDIO_ICR_SDIOITC_Pos: u32 = 22;
pub const SDIO_ICR_SDIOITC_Msk: u32 = 4194304;
pub const SDIO_ICR_SDIOITC: u32 = 4194304;
pub const SDIO_ICR_CEATAENDC_Pos: u32 = 23;
pub const SDIO_ICR_CEATAENDC_Msk: u32 = 8388608;
pub const SDIO_ICR_CEATAENDC: u32 = 8388608;
pub const SDIO_MASK_CCRCFAILIE_Pos: u32 = 0;
pub const SDIO_MASK_CCRCFAILIE_Msk: u32 = 1;
pub const SDIO_MASK_CCRCFAILIE: u32 = 1;
pub const SDIO_MASK_DCRCFAILIE_Pos: u32 = 1;
pub const SDIO_MASK_DCRCFAILIE_Msk: u32 = 2;
pub const SDIO_MASK_DCRCFAILIE: u32 = 2;
pub const SDIO_MASK_CTIMEOUTIE_Pos: u32 = 2;
pub const SDIO_MASK_CTIMEOUTIE_Msk: u32 = 4;
pub const SDIO_MASK_CTIMEOUTIE: u32 = 4;
pub const SDIO_MASK_DTIMEOUTIE_Pos: u32 = 3;
pub const SDIO_MASK_DTIMEOUTIE_Msk: u32 = 8;
pub const SDIO_MASK_DTIMEOUTIE: u32 = 8;
pub const SDIO_MASK_TXUNDERRIE_Pos: u32 = 4;
pub const SDIO_MASK_TXUNDERRIE_Msk: u32 = 16;
pub const SDIO_MASK_TXUNDERRIE: u32 = 16;
pub const SDIO_MASK_RXOVERRIE_Pos: u32 = 5;
pub const SDIO_MASK_RXOVERRIE_Msk: u32 = 32;
pub const SDIO_MASK_RXOVERRIE: u32 = 32;
pub const SDIO_MASK_CMDRENDIE_Pos: u32 = 6;
pub const SDIO_MASK_CMDRENDIE_Msk: u32 = 64;
pub const SDIO_MASK_CMDRENDIE: u32 = 64;
pub const SDIO_MASK_CMDSENTIE_Pos: u32 = 7;
pub const SDIO_MASK_CMDSENTIE_Msk: u32 = 128;
pub const SDIO_MASK_CMDSENTIE: u32 = 128;
pub const SDIO_MASK_DATAENDIE_Pos: u32 = 8;
pub const SDIO_MASK_DATAENDIE_Msk: u32 = 256;
pub const SDIO_MASK_DATAENDIE: u32 = 256;
pub const SDIO_MASK_STBITERRIE_Pos: u32 = 9;
pub const SDIO_MASK_STBITERRIE_Msk: u32 = 512;
pub const SDIO_MASK_STBITERRIE: u32 = 512;
pub const SDIO_MASK_DBCKENDIE_Pos: u32 = 10;
pub const SDIO_MASK_DBCKENDIE_Msk: u32 = 1024;
pub const SDIO_MASK_DBCKENDIE: u32 = 1024;
pub const SDIO_MASK_CMDACTIE_Pos: u32 = 11;
pub const SDIO_MASK_CMDACTIE_Msk: u32 = 2048;
pub const SDIO_MASK_CMDACTIE: u32 = 2048;
pub const SDIO_MASK_TXACTIE_Pos: u32 = 12;
pub const SDIO_MASK_TXACTIE_Msk: u32 = 4096;
pub const SDIO_MASK_TXACTIE: u32 = 4096;
pub const SDIO_MASK_RXACTIE_Pos: u32 = 13;
pub const SDIO_MASK_RXACTIE_Msk: u32 = 8192;
pub const SDIO_MASK_RXACTIE: u32 = 8192;
pub const SDIO_MASK_TXFIFOHEIE_Pos: u32 = 14;
pub const SDIO_MASK_TXFIFOHEIE_Msk: u32 = 16384;
pub const SDIO_MASK_TXFIFOHEIE: u32 = 16384;
pub const SDIO_MASK_RXFIFOHFIE_Pos: u32 = 15;
pub const SDIO_MASK_RXFIFOHFIE_Msk: u32 = 32768;
pub const SDIO_MASK_RXFIFOHFIE: u32 = 32768;
pub const SDIO_MASK_TXFIFOFIE_Pos: u32 = 16;
pub const SDIO_MASK_TXFIFOFIE_Msk: u32 = 65536;
pub const SDIO_MASK_TXFIFOFIE: u32 = 65536;
pub const SDIO_MASK_RXFIFOFIE_Pos: u32 = 17;
pub const SDIO_MASK_RXFIFOFIE_Msk: u32 = 131072;
pub const SDIO_MASK_RXFIFOFIE: u32 = 131072;
pub const SDIO_MASK_TXFIFOEIE_Pos: u32 = 18;
pub const SDIO_MASK_TXFIFOEIE_Msk: u32 = 262144;
pub const SDIO_MASK_TXFIFOEIE: u32 = 262144;
pub const SDIO_MASK_RXFIFOEIE_Pos: u32 = 19;
pub const SDIO_MASK_RXFIFOEIE_Msk: u32 = 524288;
pub const SDIO_MASK_RXFIFOEIE: u32 = 524288;
pub const SDIO_MASK_TXDAVLIE_Pos: u32 = 20;
pub const SDIO_MASK_TXDAVLIE_Msk: u32 = 1048576;
pub const SDIO_MASK_TXDAVLIE: u32 = 1048576;
pub const SDIO_MASK_RXDAVLIE_Pos: u32 = 21;
pub const SDIO_MASK_RXDAVLIE_Msk: u32 = 2097152;
pub const SDIO_MASK_RXDAVLIE: u32 = 2097152;
pub const SDIO_MASK_SDIOITIE_Pos: u32 = 22;
pub const SDIO_MASK_SDIOITIE_Msk: u32 = 4194304;
pub const SDIO_MASK_SDIOITIE: u32 = 4194304;
pub const SDIO_MASK_CEATAENDIE_Pos: u32 = 23;
pub const SDIO_MASK_CEATAENDIE_Msk: u32 = 8388608;
pub const SDIO_MASK_CEATAENDIE: u32 = 8388608;
pub const SDIO_FIFOCNT_FIFOCOUNT_Pos: u32 = 0;
pub const SDIO_FIFOCNT_FIFOCOUNT_Msk: u32 = 16777215;
pub const SDIO_FIFOCNT_FIFOCOUNT: u32 = 16777215;
pub const SDIO_FIFO_FIFODATA_Pos: u32 = 0;
pub const SDIO_FIFO_FIFODATA_Msk: u32 = 4294967295;
pub const SDIO_FIFO_FIFODATA: u32 = 4294967295;
pub const SPI_CR1_CPHA_Pos: u32 = 0;
pub const SPI_CR1_CPHA_Msk: u32 = 1;
pub const SPI_CR1_CPHA: u32 = 1;
pub const SPI_CR1_CPOL_Pos: u32 = 1;
pub const SPI_CR1_CPOL_Msk: u32 = 2;
pub const SPI_CR1_CPOL: u32 = 2;
pub const SPI_CR1_MSTR_Pos: u32 = 2;
pub const SPI_CR1_MSTR_Msk: u32 = 4;
pub const SPI_CR1_MSTR: u32 = 4;
pub const SPI_CR1_BR_Pos: u32 = 3;
pub const SPI_CR1_BR_Msk: u32 = 56;
pub const SPI_CR1_BR: u32 = 56;
pub const SPI_CR1_BR_0: u32 = 8;
pub const SPI_CR1_BR_1: u32 = 16;
pub const SPI_CR1_BR_2: u32 = 32;
pub const SPI_CR1_SPE_Pos: u32 = 6;
pub const SPI_CR1_SPE_Msk: u32 = 64;
pub const SPI_CR1_SPE: u32 = 64;
pub const SPI_CR1_LSBFIRST_Pos: u32 = 7;
pub const SPI_CR1_LSBFIRST_Msk: u32 = 128;
pub const SPI_CR1_LSBFIRST: u32 = 128;
pub const SPI_CR1_SSI_Pos: u32 = 8;
pub const SPI_CR1_SSI_Msk: u32 = 256;
pub const SPI_CR1_SSI: u32 = 256;
pub const SPI_CR1_SSM_Pos: u32 = 9;
pub const SPI_CR1_SSM_Msk: u32 = 512;
pub const SPI_CR1_SSM: u32 = 512;
pub const SPI_CR1_RXONLY_Pos: u32 = 10;
pub const SPI_CR1_RXONLY_Msk: u32 = 1024;
pub const SPI_CR1_RXONLY: u32 = 1024;
pub const SPI_CR1_DFF_Pos: u32 = 11;
pub const SPI_CR1_DFF_Msk: u32 = 2048;
pub const SPI_CR1_DFF: u32 = 2048;
pub const SPI_CR1_CRCNEXT_Pos: u32 = 12;
pub const SPI_CR1_CRCNEXT_Msk: u32 = 4096;
pub const SPI_CR1_CRCNEXT: u32 = 4096;
pub const SPI_CR1_CRCEN_Pos: u32 = 13;
pub const SPI_CR1_CRCEN_Msk: u32 = 8192;
pub const SPI_CR1_CRCEN: u32 = 8192;
pub const SPI_CR1_BIDIOE_Pos: u32 = 14;
pub const SPI_CR1_BIDIOE_Msk: u32 = 16384;
pub const SPI_CR1_BIDIOE: u32 = 16384;
pub const SPI_CR1_BIDIMODE_Pos: u32 = 15;
pub const SPI_CR1_BIDIMODE_Msk: u32 = 32768;
pub const SPI_CR1_BIDIMODE: u32 = 32768;
pub const SPI_CR2_RXDMAEN_Pos: u32 = 0;
pub const SPI_CR2_RXDMAEN_Msk: u32 = 1;
pub const SPI_CR2_RXDMAEN: u32 = 1;
pub const SPI_CR2_TXDMAEN_Pos: u32 = 1;
pub const SPI_CR2_TXDMAEN_Msk: u32 = 2;
pub const SPI_CR2_TXDMAEN: u32 = 2;
pub const SPI_CR2_SSOE_Pos: u32 = 2;
pub const SPI_CR2_SSOE_Msk: u32 = 4;
pub const SPI_CR2_SSOE: u32 = 4;
pub const SPI_CR2_FRF_Pos: u32 = 4;
pub const SPI_CR2_FRF_Msk: u32 = 16;
pub const SPI_CR2_FRF: u32 = 16;
pub const SPI_CR2_ERRIE_Pos: u32 = 5;
pub const SPI_CR2_ERRIE_Msk: u32 = 32;
pub const SPI_CR2_ERRIE: u32 = 32;
pub const SPI_CR2_RXNEIE_Pos: u32 = 6;
pub const SPI_CR2_RXNEIE_Msk: u32 = 64;
pub const SPI_CR2_RXNEIE: u32 = 64;
pub const SPI_CR2_TXEIE_Pos: u32 = 7;
pub const SPI_CR2_TXEIE_Msk: u32 = 128;
pub const SPI_CR2_TXEIE: u32 = 128;
pub const SPI_SR_RXNE_Pos: u32 = 0;
pub const SPI_SR_RXNE_Msk: u32 = 1;
pub const SPI_SR_RXNE: u32 = 1;
pub const SPI_SR_TXE_Pos: u32 = 1;
pub const SPI_SR_TXE_Msk: u32 = 2;
pub const SPI_SR_TXE: u32 = 2;
pub const SPI_SR_CHSIDE_Pos: u32 = 2;
pub const SPI_SR_CHSIDE_Msk: u32 = 4;
pub const SPI_SR_CHSIDE: u32 = 4;
pub const SPI_SR_UDR_Pos: u32 = 3;
pub const SPI_SR_UDR_Msk: u32 = 8;
pub const SPI_SR_UDR: u32 = 8;
pub const SPI_SR_CRCERR_Pos: u32 = 4;
pub const SPI_SR_CRCERR_Msk: u32 = 16;
pub const SPI_SR_CRCERR: u32 = 16;
pub const SPI_SR_MODF_Pos: u32 = 5;
pub const SPI_SR_MODF_Msk: u32 = 32;
pub const SPI_SR_MODF: u32 = 32;
pub const SPI_SR_OVR_Pos: u32 = 6;
pub const SPI_SR_OVR_Msk: u32 = 64;
pub const SPI_SR_OVR: u32 = 64;
pub const SPI_SR_BSY_Pos: u32 = 7;
pub const SPI_SR_BSY_Msk: u32 = 128;
pub const SPI_SR_BSY: u32 = 128;
pub const SPI_SR_FRE_Pos: u32 = 8;
pub const SPI_SR_FRE_Msk: u32 = 256;
pub const SPI_SR_FRE: u32 = 256;
pub const SPI_DR_DR_Pos: u32 = 0;
pub const SPI_DR_DR_Msk: u32 = 65535;
pub const SPI_DR_DR: u32 = 65535;
pub const SPI_CRCPR_CRCPOLY_Pos: u32 = 0;
pub const SPI_CRCPR_CRCPOLY_Msk: u32 = 65535;
pub const SPI_CRCPR_CRCPOLY: u32 = 65535;
pub const SPI_RXCRCR_RXCRC_Pos: u32 = 0;
pub const SPI_RXCRCR_RXCRC_Msk: u32 = 65535;
pub const SPI_RXCRCR_RXCRC: u32 = 65535;
pub const SPI_TXCRCR_TXCRC_Pos: u32 = 0;
pub const SPI_TXCRCR_TXCRC_Msk: u32 = 65535;
pub const SPI_TXCRCR_TXCRC: u32 = 65535;
pub const SPI_I2SCFGR_CHLEN_Pos: u32 = 0;
pub const SPI_I2SCFGR_CHLEN_Msk: u32 = 1;
pub const SPI_I2SCFGR_CHLEN: u32 = 1;
pub const SPI_I2SCFGR_DATLEN_Pos: u32 = 1;
pub const SPI_I2SCFGR_DATLEN_Msk: u32 = 6;
pub const SPI_I2SCFGR_DATLEN: u32 = 6;
pub const SPI_I2SCFGR_DATLEN_0: u32 = 2;
pub const SPI_I2SCFGR_DATLEN_1: u32 = 4;
pub const SPI_I2SCFGR_CKPOL_Pos: u32 = 3;
pub const SPI_I2SCFGR_CKPOL_Msk: u32 = 8;
pub const SPI_I2SCFGR_CKPOL: u32 = 8;
pub const SPI_I2SCFGR_I2SSTD_Pos: u32 = 4;
pub const SPI_I2SCFGR_I2SSTD_Msk: u32 = 48;
pub const SPI_I2SCFGR_I2SSTD: u32 = 48;
pub const SPI_I2SCFGR_I2SSTD_0: u32 = 16;
pub const SPI_I2SCFGR_I2SSTD_1: u32 = 32;
pub const SPI_I2SCFGR_PCMSYNC_Pos: u32 = 7;
pub const SPI_I2SCFGR_PCMSYNC_Msk: u32 = 128;
pub const SPI_I2SCFGR_PCMSYNC: u32 = 128;
pub const SPI_I2SCFGR_I2SCFG_Pos: u32 = 8;
pub const SPI_I2SCFGR_I2SCFG_Msk: u32 = 768;
pub const SPI_I2SCFGR_I2SCFG: u32 = 768;
pub const SPI_I2SCFGR_I2SCFG_0: u32 = 256;
pub const SPI_I2SCFGR_I2SCFG_1: u32 = 512;
pub const SPI_I2SCFGR_I2SE_Pos: u32 = 10;
pub const SPI_I2SCFGR_I2SE_Msk: u32 = 1024;
pub const SPI_I2SCFGR_I2SE: u32 = 1024;
pub const SPI_I2SCFGR_I2SMOD_Pos: u32 = 11;
pub const SPI_I2SCFGR_I2SMOD_Msk: u32 = 2048;
pub const SPI_I2SCFGR_I2SMOD: u32 = 2048;
pub const SPI_I2SPR_I2SDIV_Pos: u32 = 0;
pub const SPI_I2SPR_I2SDIV_Msk: u32 = 255;
pub const SPI_I2SPR_I2SDIV: u32 = 255;
pub const SPI_I2SPR_ODD_Pos: u32 = 8;
pub const SPI_I2SPR_ODD_Msk: u32 = 256;
pub const SPI_I2SPR_ODD: u32 = 256;
pub const SPI_I2SPR_MCKOE_Pos: u32 = 9;
pub const SPI_I2SPR_MCKOE_Msk: u32 = 512;
pub const SPI_I2SPR_MCKOE: u32 = 512;
pub const SYSCFG_MEMRMP_MEM_MODE_Pos: u32 = 0;
pub const SYSCFG_MEMRMP_MEM_MODE_Msk: u32 = 3;
pub const SYSCFG_MEMRMP_MEM_MODE: u32 = 3;
pub const SYSCFG_MEMRMP_MEM_MODE_0: u32 = 1;
pub const SYSCFG_MEMRMP_MEM_MODE_1: u32 = 2;
pub const SYSCFG_PMC_ADC1DC2_Pos: u32 = 16;
pub const SYSCFG_PMC_ADC1DC2_Msk: u32 = 65536;
pub const SYSCFG_PMC_ADC1DC2: u32 = 65536;
pub const SYSCFG_EXTICR1_EXTI0_Pos: u32 = 0;
pub const SYSCFG_EXTICR1_EXTI0_Msk: u32 = 15;
pub const SYSCFG_EXTICR1_EXTI0: u32 = 15;
pub const SYSCFG_EXTICR1_EXTI1_Pos: u32 = 4;
pub const SYSCFG_EXTICR1_EXTI1_Msk: u32 = 240;
pub const SYSCFG_EXTICR1_EXTI1: u32 = 240;
pub const SYSCFG_EXTICR1_EXTI2_Pos: u32 = 8;
pub const SYSCFG_EXTICR1_EXTI2_Msk: u32 = 3840;
pub const SYSCFG_EXTICR1_EXTI2: u32 = 3840;
pub const SYSCFG_EXTICR1_EXTI3_Pos: u32 = 12;
pub const SYSCFG_EXTICR1_EXTI3_Msk: u32 = 61440;
pub const SYSCFG_EXTICR1_EXTI3: u32 = 61440;
pub const SYSCFG_EXTICR1_EXTI0_PA: u32 = 0;
pub const SYSCFG_EXTICR1_EXTI0_PB: u32 = 1;
pub const SYSCFG_EXTICR1_EXTI0_PC: u32 = 2;
pub const SYSCFG_EXTICR1_EXTI0_PD: u32 = 3;
pub const SYSCFG_EXTICR1_EXTI0_PE: u32 = 4;
pub const SYSCFG_EXTICR1_EXTI0_PH: u32 = 7;
pub const SYSCFG_EXTICR1_EXTI1_PA: u32 = 0;
pub const SYSCFG_EXTICR1_EXTI1_PB: u32 = 16;
pub const SYSCFG_EXTICR1_EXTI1_PC: u32 = 32;
pub const SYSCFG_EXTICR1_EXTI1_PD: u32 = 48;
pub const SYSCFG_EXTICR1_EXTI1_PE: u32 = 64;
pub const SYSCFG_EXTICR1_EXTI1_PH: u32 = 112;
pub const SYSCFG_EXTICR1_EXTI2_PA: u32 = 0;
pub const SYSCFG_EXTICR1_EXTI2_PB: u32 = 256;
pub const SYSCFG_EXTICR1_EXTI2_PC: u32 = 512;
pub const SYSCFG_EXTICR1_EXTI2_PD: u32 = 768;
pub const SYSCFG_EXTICR1_EXTI2_PE: u32 = 1024;
pub const SYSCFG_EXTICR1_EXTI2_PH: u32 = 1792;
pub const SYSCFG_EXTICR1_EXTI3_PA: u32 = 0;
pub const SYSCFG_EXTICR1_EXTI3_PB: u32 = 4096;
pub const SYSCFG_EXTICR1_EXTI3_PC: u32 = 8192;
pub const SYSCFG_EXTICR1_EXTI3_PD: u32 = 12288;
pub const SYSCFG_EXTICR1_EXTI3_PE: u32 = 16384;
pub const SYSCFG_EXTICR1_EXTI3_PH: u32 = 28672;
pub const SYSCFG_EXTICR2_EXTI4_Pos: u32 = 0;
pub const SYSCFG_EXTICR2_EXTI4_Msk: u32 = 15;
pub const SYSCFG_EXTICR2_EXTI4: u32 = 15;
pub const SYSCFG_EXTICR2_EXTI5_Pos: u32 = 4;
pub const SYSCFG_EXTICR2_EXTI5_Msk: u32 = 240;
pub const SYSCFG_EXTICR2_EXTI5: u32 = 240;
pub const SYSCFG_EXTICR2_EXTI6_Pos: u32 = 8;
pub const SYSCFG_EXTICR2_EXTI6_Msk: u32 = 3840;
pub const SYSCFG_EXTICR2_EXTI6: u32 = 3840;
pub const SYSCFG_EXTICR2_EXTI7_Pos: u32 = 12;
pub const SYSCFG_EXTICR2_EXTI7_Msk: u32 = 61440;
pub const SYSCFG_EXTICR2_EXTI7: u32 = 61440;
pub const SYSCFG_EXTICR2_EXTI4_PA: u32 = 0;
pub const SYSCFG_EXTICR2_EXTI4_PB: u32 = 1;
pub const SYSCFG_EXTICR2_EXTI4_PC: u32 = 2;
pub const SYSCFG_EXTICR2_EXTI4_PD: u32 = 3;
pub const SYSCFG_EXTICR2_EXTI4_PE: u32 = 4;
pub const SYSCFG_EXTICR2_EXTI4_PH: u32 = 7;
pub const SYSCFG_EXTICR2_EXTI5_PA: u32 = 0;
pub const SYSCFG_EXTICR2_EXTI5_PB: u32 = 16;
pub const SYSCFG_EXTICR2_EXTI5_PC: u32 = 32;
pub const SYSCFG_EXTICR2_EXTI5_PD: u32 = 48;
pub const SYSCFG_EXTICR2_EXTI5_PE: u32 = 64;
pub const SYSCFG_EXTICR2_EXTI5_PH: u32 = 112;
pub const SYSCFG_EXTICR2_EXTI6_PA: u32 = 0;
pub const SYSCFG_EXTICR2_EXTI6_PB: u32 = 256;
pub const SYSCFG_EXTICR2_EXTI6_PC: u32 = 512;
pub const SYSCFG_EXTICR2_EXTI6_PD: u32 = 768;
pub const SYSCFG_EXTICR2_EXTI6_PE: u32 = 1024;
pub const SYSCFG_EXTICR2_EXTI6_PH: u32 = 1792;
pub const SYSCFG_EXTICR2_EXTI7_PA: u32 = 0;
pub const SYSCFG_EXTICR2_EXTI7_PB: u32 = 4096;
pub const SYSCFG_EXTICR2_EXTI7_PC: u32 = 8192;
pub const SYSCFG_EXTICR2_EXTI7_PD: u32 = 12288;
pub const SYSCFG_EXTICR2_EXTI7_PE: u32 = 16384;
pub const SYSCFG_EXTICR2_EXTI7_PH: u32 = 28672;
pub const SYSCFG_EXTICR3_EXTI8_Pos: u32 = 0;
pub const SYSCFG_EXTICR3_EXTI8_Msk: u32 = 15;
pub const SYSCFG_EXTICR3_EXTI8: u32 = 15;
pub const SYSCFG_EXTICR3_EXTI9_Pos: u32 = 4;
pub const SYSCFG_EXTICR3_EXTI9_Msk: u32 = 240;
pub const SYSCFG_EXTICR3_EXTI9: u32 = 240;
pub const SYSCFG_EXTICR3_EXTI10_Pos: u32 = 8;
pub const SYSCFG_EXTICR3_EXTI10_Msk: u32 = 3840;
pub const SYSCFG_EXTICR3_EXTI10: u32 = 3840;
pub const SYSCFG_EXTICR3_EXTI11_Pos: u32 = 12;
pub const SYSCFG_EXTICR3_EXTI11_Msk: u32 = 61440;
pub const SYSCFG_EXTICR3_EXTI11: u32 = 61440;
pub const SYSCFG_EXTICR3_EXTI8_PA: u32 = 0;
pub const SYSCFG_EXTICR3_EXTI8_PB: u32 = 1;
pub const SYSCFG_EXTICR3_EXTI8_PC: u32 = 2;
pub const SYSCFG_EXTICR3_EXTI8_PD: u32 = 3;
pub const SYSCFG_EXTICR3_EXTI8_PE: u32 = 4;
pub const SYSCFG_EXTICR3_EXTI8_PH: u32 = 7;
pub const SYSCFG_EXTICR3_EXTI9_PA: u32 = 0;
pub const SYSCFG_EXTICR3_EXTI9_PB: u32 = 16;
pub const SYSCFG_EXTICR3_EXTI9_PC: u32 = 32;
pub const SYSCFG_EXTICR3_EXTI9_PD: u32 = 48;
pub const SYSCFG_EXTICR3_EXTI9_PE: u32 = 64;
pub const SYSCFG_EXTICR3_EXTI9_PH: u32 = 112;
pub const SYSCFG_EXTICR3_EXTI10_PA: u32 = 0;
pub const SYSCFG_EXTICR3_EXTI10_PB: u32 = 256;
pub const SYSCFG_EXTICR3_EXTI10_PC: u32 = 512;
pub const SYSCFG_EXTICR3_EXTI10_PD: u32 = 768;
pub const SYSCFG_EXTICR3_EXTI10_PE: u32 = 1024;
pub const SYSCFG_EXTICR3_EXTI10_PH: u32 = 1792;
pub const SYSCFG_EXTICR3_EXTI11_PA: u32 = 0;
pub const SYSCFG_EXTICR3_EXTI11_PB: u32 = 4096;
pub const SYSCFG_EXTICR3_EXTI11_PC: u32 = 8192;
pub const SYSCFG_EXTICR3_EXTI11_PD: u32 = 12288;
pub const SYSCFG_EXTICR3_EXTI11_PE: u32 = 16384;
pub const SYSCFG_EXTICR3_EXTI11_PH: u32 = 28672;
pub const SYSCFG_EXTICR4_EXTI12_Pos: u32 = 0;
pub const SYSCFG_EXTICR4_EXTI12_Msk: u32 = 15;
pub const SYSCFG_EXTICR4_EXTI12: u32 = 15;
pub const SYSCFG_EXTICR4_EXTI13_Pos: u32 = 4;
pub const SYSCFG_EXTICR4_EXTI13_Msk: u32 = 240;
pub const SYSCFG_EXTICR4_EXTI13: u32 = 240;
pub const SYSCFG_EXTICR4_EXTI14_Pos: u32 = 8;
pub const SYSCFG_EXTICR4_EXTI14_Msk: u32 = 3840;
pub const SYSCFG_EXTICR4_EXTI14: u32 = 3840;
pub const SYSCFG_EXTICR4_EXTI15_Pos: u32 = 12;
pub const SYSCFG_EXTICR4_EXTI15_Msk: u32 = 61440;
pub const SYSCFG_EXTICR4_EXTI15: u32 = 61440;
pub const SYSCFG_EXTICR4_EXTI12_PA: u32 = 0;
pub const SYSCFG_EXTICR4_EXTI12_PB: u32 = 1;
pub const SYSCFG_EXTICR4_EXTI12_PC: u32 = 2;
pub const SYSCFG_EXTICR4_EXTI12_PD: u32 = 3;
pub const SYSCFG_EXTICR4_EXTI12_PE: u32 = 4;
pub const SYSCFG_EXTICR4_EXTI12_PH: u32 = 7;
pub const SYSCFG_EXTICR4_EXTI13_PA: u32 = 0;
pub const SYSCFG_EXTICR4_EXTI13_PB: u32 = 16;
pub const SYSCFG_EXTICR4_EXTI13_PC: u32 = 32;
pub const SYSCFG_EXTICR4_EXTI13_PD: u32 = 48;
pub const SYSCFG_EXTICR4_EXTI13_PE: u32 = 64;
pub const SYSCFG_EXTICR4_EXTI13_PH: u32 = 112;
pub const SYSCFG_EXTICR4_EXTI14_PA: u32 = 0;
pub const SYSCFG_EXTICR4_EXTI14_PB: u32 = 256;
pub const SYSCFG_EXTICR4_EXTI14_PC: u32 = 512;
pub const SYSCFG_EXTICR4_EXTI14_PD: u32 = 768;
pub const SYSCFG_EXTICR4_EXTI14_PE: u32 = 1024;
pub const SYSCFG_EXTICR4_EXTI14_PH: u32 = 1792;
pub const SYSCFG_EXTICR4_EXTI15_PA: u32 = 0;
pub const SYSCFG_EXTICR4_EXTI15_PB: u32 = 4096;
pub const SYSCFG_EXTICR4_EXTI15_PC: u32 = 8192;
pub const SYSCFG_EXTICR4_EXTI15_PD: u32 = 12288;
pub const SYSCFG_EXTICR4_EXTI15_PE: u32 = 16384;
pub const SYSCFG_EXTICR4_EXTI15_PH: u32 = 28672;
pub const SYSCFG_CMPCR_CMP_PD_Pos: u32 = 0;
pub const SYSCFG_CMPCR_CMP_PD_Msk: u32 = 1;
pub const SYSCFG_CMPCR_CMP_PD: u32 = 1;
pub const SYSCFG_CMPCR_READY_Pos: u32 = 8;
pub const SYSCFG_CMPCR_READY_Msk: u32 = 256;
pub const SYSCFG_CMPCR_READY: u32 = 256;
pub const TIM_CR1_CEN_Pos: u32 = 0;
pub const TIM_CR1_CEN_Msk: u32 = 1;
pub const TIM_CR1_CEN: u32 = 1;
pub const TIM_CR1_UDIS_Pos: u32 = 1;
pub const TIM_CR1_UDIS_Msk: u32 = 2;
pub const TIM_CR1_UDIS: u32 = 2;
pub const TIM_CR1_URS_Pos: u32 = 2;
pub const TIM_CR1_URS_Msk: u32 = 4;
pub const TIM_CR1_URS: u32 = 4;
pub const TIM_CR1_OPM_Pos: u32 = 3;
pub const TIM_CR1_OPM_Msk: u32 = 8;
pub const TIM_CR1_OPM: u32 = 8;
pub const TIM_CR1_DIR_Pos: u32 = 4;
pub const TIM_CR1_DIR_Msk: u32 = 16;
pub const TIM_CR1_DIR: u32 = 16;
pub const TIM_CR1_CMS_Pos: u32 = 5;
pub const TIM_CR1_CMS_Msk: u32 = 96;
pub const TIM_CR1_CMS: u32 = 96;
pub const TIM_CR1_CMS_0: u32 = 32;
pub const TIM_CR1_CMS_1: u32 = 64;
pub const TIM_CR1_ARPE_Pos: u32 = 7;
pub const TIM_CR1_ARPE_Msk: u32 = 128;
pub const TIM_CR1_ARPE: u32 = 128;
pub const TIM_CR1_CKD_Pos: u32 = 8;
pub const TIM_CR1_CKD_Msk: u32 = 768;
pub const TIM_CR1_CKD: u32 = 768;
pub const TIM_CR1_CKD_0: u32 = 256;
pub const TIM_CR1_CKD_1: u32 = 512;
pub const TIM_CR2_CCPC_Pos: u32 = 0;
pub const TIM_CR2_CCPC_Msk: u32 = 1;
pub const TIM_CR2_CCPC: u32 = 1;
pub const TIM_CR2_CCUS_Pos: u32 = 2;
pub const TIM_CR2_CCUS_Msk: u32 = 4;
pub const TIM_CR2_CCUS: u32 = 4;
pub const TIM_CR2_CCDS_Pos: u32 = 3;
pub const TIM_CR2_CCDS_Msk: u32 = 8;
pub const TIM_CR2_CCDS: u32 = 8;
pub const TIM_CR2_MMS_Pos: u32 = 4;
pub const TIM_CR2_MMS_Msk: u32 = 112;
pub const TIM_CR2_MMS: u32 = 112;
pub const TIM_CR2_MMS_0: u32 = 16;
pub const TIM_CR2_MMS_1: u32 = 32;
pub const TIM_CR2_MMS_2: u32 = 64;
pub const TIM_CR2_TI1S_Pos: u32 = 7;
pub const TIM_CR2_TI1S_Msk: u32 = 128;
pub const TIM_CR2_TI1S: u32 = 128;
pub const TIM_CR2_OIS1_Pos: u32 = 8;
pub const TIM_CR2_OIS1_Msk: u32 = 256;
pub const TIM_CR2_OIS1: u32 = 256;
pub const TIM_CR2_OIS1N_Pos: u32 = 9;
pub const TIM_CR2_OIS1N_Msk: u32 = 512;
pub const TIM_CR2_OIS1N: u32 = 512;
pub const TIM_CR2_OIS2_Pos: u32 = 10;
pub const TIM_CR2_OIS2_Msk: u32 = 1024;
pub const TIM_CR2_OIS2: u32 = 1024;
pub const TIM_CR2_OIS2N_Pos: u32 = 11;
pub const TIM_CR2_OIS2N_Msk: u32 = 2048;
pub const TIM_CR2_OIS2N: u32 = 2048;
pub const TIM_CR2_OIS3_Pos: u32 = 12;
pub const TIM_CR2_OIS3_Msk: u32 = 4096;
pub const TIM_CR2_OIS3: u32 = 4096;
pub const TIM_CR2_OIS3N_Pos: u32 = 13;
pub const TIM_CR2_OIS3N_Msk: u32 = 8192;
pub const TIM_CR2_OIS3N: u32 = 8192;
pub const TIM_CR2_OIS4_Pos: u32 = 14;
pub const TIM_CR2_OIS4_Msk: u32 = 16384;
pub const TIM_CR2_OIS4: u32 = 16384;
pub const TIM_SMCR_SMS_Pos: u32 = 0;
pub const TIM_SMCR_SMS_Msk: u32 = 7;
pub const TIM_SMCR_SMS: u32 = 7;
pub const TIM_SMCR_SMS_0: u32 = 1;
pub const TIM_SMCR_SMS_1: u32 = 2;
pub const TIM_SMCR_SMS_2: u32 = 4;
pub const TIM_SMCR_TS_Pos: u32 = 4;
pub const TIM_SMCR_TS_Msk: u32 = 112;
pub const TIM_SMCR_TS: u32 = 112;
pub const TIM_SMCR_TS_0: u32 = 16;
pub const TIM_SMCR_TS_1: u32 = 32;
pub const TIM_SMCR_TS_2: u32 = 64;
pub const TIM_SMCR_MSM_Pos: u32 = 7;
pub const TIM_SMCR_MSM_Msk: u32 = 128;
pub const TIM_SMCR_MSM: u32 = 128;
pub const TIM_SMCR_ETF_Pos: u32 = 8;
pub const TIM_SMCR_ETF_Msk: u32 = 3840;
pub const TIM_SMCR_ETF: u32 = 3840;
pub const TIM_SMCR_ETF_0: u32 = 256;
pub const TIM_SMCR_ETF_1: u32 = 512;
pub const TIM_SMCR_ETF_2: u32 = 1024;
pub const TIM_SMCR_ETF_3: u32 = 2048;
pub const TIM_SMCR_ETPS_Pos: u32 = 12;
pub const TIM_SMCR_ETPS_Msk: u32 = 12288;
pub const TIM_SMCR_ETPS: u32 = 12288;
pub const TIM_SMCR_ETPS_0: u32 = 4096;
pub const TIM_SMCR_ETPS_1: u32 = 8192;
pub const TIM_SMCR_ECE_Pos: u32 = 14;
pub const TIM_SMCR_ECE_Msk: u32 = 16384;
pub const TIM_SMCR_ECE: u32 = 16384;
pub const TIM_SMCR_ETP_Pos: u32 = 15;
pub const TIM_SMCR_ETP_Msk: u32 = 32768;
pub const TIM_SMCR_ETP: u32 = 32768;
pub const TIM_DIER_UIE_Pos: u32 = 0;
pub const TIM_DIER_UIE_Msk: u32 = 1;
pub const TIM_DIER_UIE: u32 = 1;
pub const TIM_DIER_CC1IE_Pos: u32 = 1;
pub const TIM_DIER_CC1IE_Msk: u32 = 2;
pub const TIM_DIER_CC1IE: u32 = 2;
pub const TIM_DIER_CC2IE_Pos: u32 = 2;
pub const TIM_DIER_CC2IE_Msk: u32 = 4;
pub const TIM_DIER_CC2IE: u32 = 4;
pub const TIM_DIER_CC3IE_Pos: u32 = 3;
pub const TIM_DIER_CC3IE_Msk: u32 = 8;
pub const TIM_DIER_CC3IE: u32 = 8;
pub const TIM_DIER_CC4IE_Pos: u32 = 4;
pub const TIM_DIER_CC4IE_Msk: u32 = 16;
pub const TIM_DIER_CC4IE: u32 = 16;
pub const TIM_DIER_COMIE_Pos: u32 = 5;
pub const TIM_DIER_COMIE_Msk: u32 = 32;
pub const TIM_DIER_COMIE: u32 = 32;
pub const TIM_DIER_TIE_Pos: u32 = 6;
pub const TIM_DIER_TIE_Msk: u32 = 64;
pub const TIM_DIER_TIE: u32 = 64;
pub const TIM_DIER_BIE_Pos: u32 = 7;
pub const TIM_DIER_BIE_Msk: u32 = 128;
pub const TIM_DIER_BIE: u32 = 128;
pub const TIM_DIER_UDE_Pos: u32 = 8;
pub const TIM_DIER_UDE_Msk: u32 = 256;
pub const TIM_DIER_UDE: u32 = 256;
pub const TIM_DIER_CC1DE_Pos: u32 = 9;
pub const TIM_DIER_CC1DE_Msk: u32 = 512;
pub const TIM_DIER_CC1DE: u32 = 512;
pub const TIM_DIER_CC2DE_Pos: u32 = 10;
pub const TIM_DIER_CC2DE_Msk: u32 = 1024;
pub const TIM_DIER_CC2DE: u32 = 1024;
pub const TIM_DIER_CC3DE_Pos: u32 = 11;
pub const TIM_DIER_CC3DE_Msk: u32 = 2048;
pub const TIM_DIER_CC3DE: u32 = 2048;
pub const TIM_DIER_CC4DE_Pos: u32 = 12;
pub const TIM_DIER_CC4DE_Msk: u32 = 4096;
pub const TIM_DIER_CC4DE: u32 = 4096;
pub const TIM_DIER_COMDE_Pos: u32 = 13;
pub const TIM_DIER_COMDE_Msk: u32 = 8192;
pub const TIM_DIER_COMDE: u32 = 8192;
pub const TIM_DIER_TDE_Pos: u32 = 14;
pub const TIM_DIER_TDE_Msk: u32 = 16384;
pub const TIM_DIER_TDE: u32 = 16384;
pub const TIM_SR_UIF_Pos: u32 = 0;
pub const TIM_SR_UIF_Msk: u32 = 1;
pub const TIM_SR_UIF: u32 = 1;
pub const TIM_SR_CC1IF_Pos: u32 = 1;
pub const TIM_SR_CC1IF_Msk: u32 = 2;
pub const TIM_SR_CC1IF: u32 = 2;
pub const TIM_SR_CC2IF_Pos: u32 = 2;
pub const TIM_SR_CC2IF_Msk: u32 = 4;
pub const TIM_SR_CC2IF: u32 = 4;
pub const TIM_SR_CC3IF_Pos: u32 = 3;
pub const TIM_SR_CC3IF_Msk: u32 = 8;
pub const TIM_SR_CC3IF: u32 = 8;
pub const TIM_SR_CC4IF_Pos: u32 = 4;
pub const TIM_SR_CC4IF_Msk: u32 = 16;
pub const TIM_SR_CC4IF: u32 = 16;
pub const TIM_SR_COMIF_Pos: u32 = 5;
pub const TIM_SR_COMIF_Msk: u32 = 32;
pub const TIM_SR_COMIF: u32 = 32;
pub const TIM_SR_TIF_Pos: u32 = 6;
pub const TIM_SR_TIF_Msk: u32 = 64;
pub const TIM_SR_TIF: u32 = 64;
pub const TIM_SR_BIF_Pos: u32 = 7;
pub const TIM_SR_BIF_Msk: u32 = 128;
pub const TIM_SR_BIF: u32 = 128;
pub const TIM_SR_CC1OF_Pos: u32 = 9;
pub const TIM_SR_CC1OF_Msk: u32 = 512;
pub const TIM_SR_CC1OF: u32 = 512;
pub const TIM_SR_CC2OF_Pos: u32 = 10;
pub const TIM_SR_CC2OF_Msk: u32 = 1024;
pub const TIM_SR_CC2OF: u32 = 1024;
pub const TIM_SR_CC3OF_Pos: u32 = 11;
pub const TIM_SR_CC3OF_Msk: u32 = 2048;
pub const TIM_SR_CC3OF: u32 = 2048;
pub const TIM_SR_CC4OF_Pos: u32 = 12;
pub const TIM_SR_CC4OF_Msk: u32 = 4096;
pub const TIM_SR_CC4OF: u32 = 4096;
pub const TIM_EGR_UG_Pos: u32 = 0;
pub const TIM_EGR_UG_Msk: u32 = 1;
pub const TIM_EGR_UG: u32 = 1;
pub const TIM_EGR_CC1G_Pos: u32 = 1;
pub const TIM_EGR_CC1G_Msk: u32 = 2;
pub const TIM_EGR_CC1G: u32 = 2;
pub const TIM_EGR_CC2G_Pos: u32 = 2;
pub const TIM_EGR_CC2G_Msk: u32 = 4;
pub const TIM_EGR_CC2G: u32 = 4;
pub const TIM_EGR_CC3G_Pos: u32 = 3;
pub const TIM_EGR_CC3G_Msk: u32 = 8;
pub const TIM_EGR_CC3G: u32 = 8;
pub const TIM_EGR_CC4G_Pos: u32 = 4;
pub const TIM_EGR_CC4G_Msk: u32 = 16;
pub const TIM_EGR_CC4G: u32 = 16;
pub const TIM_EGR_COMG_Pos: u32 = 5;
pub const TIM_EGR_COMG_Msk: u32 = 32;
pub const TIM_EGR_COMG: u32 = 32;
pub const TIM_EGR_TG_Pos: u32 = 6;
pub const TIM_EGR_TG_Msk: u32 = 64;
pub const TIM_EGR_TG: u32 = 64;
pub const TIM_EGR_BG_Pos: u32 = 7;
pub const TIM_EGR_BG_Msk: u32 = 128;
pub const TIM_EGR_BG: u32 = 128;
pub const TIM_CCMR1_CC1S_Pos: u32 = 0;
pub const TIM_CCMR1_CC1S_Msk: u32 = 3;
pub const TIM_CCMR1_CC1S: u32 = 3;
pub const TIM_CCMR1_CC1S_0: u32 = 1;
pub const TIM_CCMR1_CC1S_1: u32 = 2;
pub const TIM_CCMR1_OC1FE_Pos: u32 = 2;
pub const TIM_CCMR1_OC1FE_Msk: u32 = 4;
pub const TIM_CCMR1_OC1FE: u32 = 4;
pub const TIM_CCMR1_OC1PE_Pos: u32 = 3;
pub const TIM_CCMR1_OC1PE_Msk: u32 = 8;
pub const TIM_CCMR1_OC1PE: u32 = 8;
pub const TIM_CCMR1_OC1M_Pos: u32 = 4;
pub const TIM_CCMR1_OC1M_Msk: u32 = 112;
pub const TIM_CCMR1_OC1M: u32 = 112;
pub const TIM_CCMR1_OC1M_0: u32 = 16;
pub const TIM_CCMR1_OC1M_1: u32 = 32;
pub const TIM_CCMR1_OC1M_2: u32 = 64;
pub const TIM_CCMR1_OC1CE_Pos: u32 = 7;
pub const TIM_CCMR1_OC1CE_Msk: u32 = 128;
pub const TIM_CCMR1_OC1CE: u32 = 128;
pub const TIM_CCMR1_CC2S_Pos: u32 = 8;
pub const TIM_CCMR1_CC2S_Msk: u32 = 768;
pub const TIM_CCMR1_CC2S: u32 = 768;
pub const TIM_CCMR1_CC2S_0: u32 = 256;
pub const TIM_CCMR1_CC2S_1: u32 = 512;
pub const TIM_CCMR1_OC2FE_Pos: u32 = 10;
pub const TIM_CCMR1_OC2FE_Msk: u32 = 1024;
pub const TIM_CCMR1_OC2FE: u32 = 1024;
pub const TIM_CCMR1_OC2PE_Pos: u32 = 11;
pub const TIM_CCMR1_OC2PE_Msk: u32 = 2048;
pub const TIM_CCMR1_OC2PE: u32 = 2048;
pub const TIM_CCMR1_OC2M_Pos: u32 = 12;
pub const TIM_CCMR1_OC2M_Msk: u32 = 28672;
pub const TIM_CCMR1_OC2M: u32 = 28672;
pub const TIM_CCMR1_OC2M_0: u32 = 4096;
pub const TIM_CCMR1_OC2M_1: u32 = 8192;
pub const TIM_CCMR1_OC2M_2: u32 = 16384;
pub const TIM_CCMR1_OC2CE_Pos: u32 = 15;
pub const TIM_CCMR1_OC2CE_Msk: u32 = 32768;
pub const TIM_CCMR1_OC2CE: u32 = 32768;
pub const TIM_CCMR1_IC1PSC_Pos: u32 = 2;
pub const TIM_CCMR1_IC1PSC_Msk: u32 = 12;
pub const TIM_CCMR1_IC1PSC: u32 = 12;
pub const TIM_CCMR1_IC1PSC_0: u32 = 4;
pub const TIM_CCMR1_IC1PSC_1: u32 = 8;
pub const TIM_CCMR1_IC1F_Pos: u32 = 4;
pub const TIM_CCMR1_IC1F_Msk: u32 = 240;
pub const TIM_CCMR1_IC1F: u32 = 240;
pub const TIM_CCMR1_IC1F_0: u32 = 16;
pub const TIM_CCMR1_IC1F_1: u32 = 32;
pub const TIM_CCMR1_IC1F_2: u32 = 64;
pub const TIM_CCMR1_IC1F_3: u32 = 128;
pub const TIM_CCMR1_IC2PSC_Pos: u32 = 10;
pub const TIM_CCMR1_IC2PSC_Msk: u32 = 3072;
pub const TIM_CCMR1_IC2PSC: u32 = 3072;
pub const TIM_CCMR1_IC2PSC_0: u32 = 1024;
pub const TIM_CCMR1_IC2PSC_1: u32 = 2048;
pub const TIM_CCMR1_IC2F_Pos: u32 = 12;
pub const TIM_CCMR1_IC2F_Msk: u32 = 61440;
pub const TIM_CCMR1_IC2F: u32 = 61440;
pub const TIM_CCMR1_IC2F_0: u32 = 4096;
pub const TIM_CCMR1_IC2F_1: u32 = 8192;
pub const TIM_CCMR1_IC2F_2: u32 = 16384;
pub const TIM_CCMR1_IC2F_3: u32 = 32768;
pub const TIM_CCMR2_CC3S_Pos: u32 = 0;
pub const TIM_CCMR2_CC3S_Msk: u32 = 3;
pub const TIM_CCMR2_CC3S: u32 = 3;
pub const TIM_CCMR2_CC3S_0: u32 = 1;
pub const TIM_CCMR2_CC3S_1: u32 = 2;
pub const TIM_CCMR2_OC3FE_Pos: u32 = 2;
pub const TIM_CCMR2_OC3FE_Msk: u32 = 4;
pub const TIM_CCMR2_OC3FE: u32 = 4;
pub const TIM_CCMR2_OC3PE_Pos: u32 = 3;
pub const TIM_CCMR2_OC3PE_Msk: u32 = 8;
pub const TIM_CCMR2_OC3PE: u32 = 8;
pub const TIM_CCMR2_OC3M_Pos: u32 = 4;
pub const TIM_CCMR2_OC3M_Msk: u32 = 112;
pub const TIM_CCMR2_OC3M: u32 = 112;
pub const TIM_CCMR2_OC3M_0: u32 = 16;
pub const TIM_CCMR2_OC3M_1: u32 = 32;
pub const TIM_CCMR2_OC3M_2: u32 = 64;
pub const TIM_CCMR2_OC3CE_Pos: u32 = 7;
pub const TIM_CCMR2_OC3CE_Msk: u32 = 128;
pub const TIM_CCMR2_OC3CE: u32 = 128;
pub const TIM_CCMR2_CC4S_Pos: u32 = 8;
pub const TIM_CCMR2_CC4S_Msk: u32 = 768;
pub const TIM_CCMR2_CC4S: u32 = 768;
pub const TIM_CCMR2_CC4S_0: u32 = 256;
pub const TIM_CCMR2_CC4S_1: u32 = 512;
pub const TIM_CCMR2_OC4FE_Pos: u32 = 10;
pub const TIM_CCMR2_OC4FE_Msk: u32 = 1024;
pub const TIM_CCMR2_OC4FE: u32 = 1024;
pub const TIM_CCMR2_OC4PE_Pos: u32 = 11;
pub const TIM_CCMR2_OC4PE_Msk: u32 = 2048;
pub const TIM_CCMR2_OC4PE: u32 = 2048;
pub const TIM_CCMR2_OC4M_Pos: u32 = 12;
pub const TIM_CCMR2_OC4M_Msk: u32 = 28672;
pub const TIM_CCMR2_OC4M: u32 = 28672;
pub const TIM_CCMR2_OC4M_0: u32 = 4096;
pub const TIM_CCMR2_OC4M_1: u32 = 8192;
pub const TIM_CCMR2_OC4M_2: u32 = 16384;
pub const TIM_CCMR2_OC4CE_Pos: u32 = 15;
pub const TIM_CCMR2_OC4CE_Msk: u32 = 32768;
pub const TIM_CCMR2_OC4CE: u32 = 32768;
pub const TIM_CCMR2_IC3PSC_Pos: u32 = 2;
pub const TIM_CCMR2_IC3PSC_Msk: u32 = 12;
pub const TIM_CCMR2_IC3PSC: u32 = 12;
pub const TIM_CCMR2_IC3PSC_0: u32 = 4;
pub const TIM_CCMR2_IC3PSC_1: u32 = 8;
pub const TIM_CCMR2_IC3F_Pos: u32 = 4;
pub const TIM_CCMR2_IC3F_Msk: u32 = 240;
pub const TIM_CCMR2_IC3F: u32 = 240;
pub const TIM_CCMR2_IC3F_0: u32 = 16;
pub const TIM_CCMR2_IC3F_1: u32 = 32;
pub const TIM_CCMR2_IC3F_2: u32 = 64;
pub const TIM_CCMR2_IC3F_3: u32 = 128;
pub const TIM_CCMR2_IC4PSC_Pos: u32 = 10;
pub const TIM_CCMR2_IC4PSC_Msk: u32 = 3072;
pub const TIM_CCMR2_IC4PSC: u32 = 3072;
pub const TIM_CCMR2_IC4PSC_0: u32 = 1024;
pub const TIM_CCMR2_IC4PSC_1: u32 = 2048;
pub const TIM_CCMR2_IC4F_Pos: u32 = 12;
pub const TIM_CCMR2_IC4F_Msk: u32 = 61440;
pub const TIM_CCMR2_IC4F: u32 = 61440;
pub const TIM_CCMR2_IC4F_0: u32 = 4096;
pub const TIM_CCMR2_IC4F_1: u32 = 8192;
pub const TIM_CCMR2_IC4F_2: u32 = 16384;
pub const TIM_CCMR2_IC4F_3: u32 = 32768;
pub const TIM_CCER_CC1E_Pos: u32 = 0;
pub const TIM_CCER_CC1E_Msk: u32 = 1;
pub const TIM_CCER_CC1E: u32 = 1;
pub const TIM_CCER_CC1P_Pos: u32 = 1;
pub const TIM_CCER_CC1P_Msk: u32 = 2;
pub const TIM_CCER_CC1P: u32 = 2;
pub const TIM_CCER_CC1NE_Pos: u32 = 2;
pub const TIM_CCER_CC1NE_Msk: u32 = 4;
pub const TIM_CCER_CC1NE: u32 = 4;
pub const TIM_CCER_CC1NP_Pos: u32 = 3;
pub const TIM_CCER_CC1NP_Msk: u32 = 8;
pub const TIM_CCER_CC1NP: u32 = 8;
pub const TIM_CCER_CC2E_Pos: u32 = 4;
pub const TIM_CCER_CC2E_Msk: u32 = 16;
pub const TIM_CCER_CC2E: u32 = 16;
pub const TIM_CCER_CC2P_Pos: u32 = 5;
pub const TIM_CCER_CC2P_Msk: u32 = 32;
pub const TIM_CCER_CC2P: u32 = 32;
pub const TIM_CCER_CC2NE_Pos: u32 = 6;
pub const TIM_CCER_CC2NE_Msk: u32 = 64;
pub const TIM_CCER_CC2NE: u32 = 64;
pub const TIM_CCER_CC2NP_Pos: u32 = 7;
pub const TIM_CCER_CC2NP_Msk: u32 = 128;
pub const TIM_CCER_CC2NP: u32 = 128;
pub const TIM_CCER_CC3E_Pos: u32 = 8;
pub const TIM_CCER_CC3E_Msk: u32 = 256;
pub const TIM_CCER_CC3E: u32 = 256;
pub const TIM_CCER_CC3P_Pos: u32 = 9;
pub const TIM_CCER_CC3P_Msk: u32 = 512;
pub const TIM_CCER_CC3P: u32 = 512;
pub const TIM_CCER_CC3NE_Pos: u32 = 10;
pub const TIM_CCER_CC3NE_Msk: u32 = 1024;
pub const TIM_CCER_CC3NE: u32 = 1024;
pub const TIM_CCER_CC3NP_Pos: u32 = 11;
pub const TIM_CCER_CC3NP_Msk: u32 = 2048;
pub const TIM_CCER_CC3NP: u32 = 2048;
pub const TIM_CCER_CC4E_Pos: u32 = 12;
pub const TIM_CCER_CC4E_Msk: u32 = 4096;
pub const TIM_CCER_CC4E: u32 = 4096;
pub const TIM_CCER_CC4P_Pos: u32 = 13;
pub const TIM_CCER_CC4P_Msk: u32 = 8192;
pub const TIM_CCER_CC4P: u32 = 8192;
pub const TIM_CCER_CC4NP_Pos: u32 = 15;
pub const TIM_CCER_CC4NP_Msk: u32 = 32768;
pub const TIM_CCER_CC4NP: u32 = 32768;
pub const TIM_CNT_CNT_Pos: u32 = 0;
pub const TIM_CNT_CNT_Msk: u32 = 4294967295;
pub const TIM_CNT_CNT: u32 = 4294967295;
pub const TIM_PSC_PSC_Pos: u32 = 0;
pub const TIM_PSC_PSC_Msk: u32 = 65535;
pub const TIM_PSC_PSC: u32 = 65535;
pub const TIM_ARR_ARR_Pos: u32 = 0;
pub const TIM_ARR_ARR_Msk: u32 = 4294967295;
pub const TIM_ARR_ARR: u32 = 4294967295;
pub const TIM_RCR_REP_Pos: u32 = 0;
pub const TIM_RCR_REP_Msk: u32 = 255;
pub const TIM_RCR_REP: u32 = 255;
pub const TIM_CCR1_CCR1_Pos: u32 = 0;
pub const TIM_CCR1_CCR1_Msk: u32 = 65535;
pub const TIM_CCR1_CCR1: u32 = 65535;
pub const TIM_CCR2_CCR2_Pos: u32 = 0;
pub const TIM_CCR2_CCR2_Msk: u32 = 65535;
pub const TIM_CCR2_CCR2: u32 = 65535;
pub const TIM_CCR3_CCR3_Pos: u32 = 0;
pub const TIM_CCR3_CCR3_Msk: u32 = 65535;
pub const TIM_CCR3_CCR3: u32 = 65535;
pub const TIM_CCR4_CCR4_Pos: u32 = 0;
pub const TIM_CCR4_CCR4_Msk: u32 = 65535;
pub const TIM_CCR4_CCR4: u32 = 65535;
pub const TIM_BDTR_DTG_Pos: u32 = 0;
pub const TIM_BDTR_DTG_Msk: u32 = 255;
pub const TIM_BDTR_DTG: u32 = 255;
pub const TIM_BDTR_DTG_0: u32 = 1;
pub const TIM_BDTR_DTG_1: u32 = 2;
pub const TIM_BDTR_DTG_2: u32 = 4;
pub const TIM_BDTR_DTG_3: u32 = 8;
pub const TIM_BDTR_DTG_4: u32 = 16;
pub const TIM_BDTR_DTG_5: u32 = 32;
pub const TIM_BDTR_DTG_6: u32 = 64;
pub const TIM_BDTR_DTG_7: u32 = 128;
pub const TIM_BDTR_LOCK_Pos: u32 = 8;
pub const TIM_BDTR_LOCK_Msk: u32 = 768;
pub const TIM_BDTR_LOCK: u32 = 768;
pub const TIM_BDTR_LOCK_0: u32 = 256;
pub const TIM_BDTR_LOCK_1: u32 = 512;
pub const TIM_BDTR_OSSI_Pos: u32 = 10;
pub const TIM_BDTR_OSSI_Msk: u32 = 1024;
pub const TIM_BDTR_OSSI: u32 = 1024;
pub const TIM_BDTR_OSSR_Pos: u32 = 11;
pub const TIM_BDTR_OSSR_Msk: u32 = 2048;
pub const TIM_BDTR_OSSR: u32 = 2048;
pub const TIM_BDTR_BKE_Pos: u32 = 12;
pub const TIM_BDTR_BKE_Msk: u32 = 4096;
pub const TIM_BDTR_BKE: u32 = 4096;
pub const TIM_BDTR_BKP_Pos: u32 = 13;
pub const TIM_BDTR_BKP_Msk: u32 = 8192;
pub const TIM_BDTR_BKP: u32 = 8192;
pub const TIM_BDTR_AOE_Pos: u32 = 14;
pub const TIM_BDTR_AOE_Msk: u32 = 16384;
pub const TIM_BDTR_AOE: u32 = 16384;
pub const TIM_BDTR_MOE_Pos: u32 = 15;
pub const TIM_BDTR_MOE_Msk: u32 = 32768;
pub const TIM_BDTR_MOE: u32 = 32768;
pub const TIM_DCR_DBA_Pos: u32 = 0;
pub const TIM_DCR_DBA_Msk: u32 = 31;
pub const TIM_DCR_DBA: u32 = 31;
pub const TIM_DCR_DBA_0: u32 = 1;
pub const TIM_DCR_DBA_1: u32 = 2;
pub const TIM_DCR_DBA_2: u32 = 4;
pub const TIM_DCR_DBA_3: u32 = 8;
pub const TIM_DCR_DBA_4: u32 = 16;
pub const TIM_DCR_DBL_Pos: u32 = 8;
pub const TIM_DCR_DBL_Msk: u32 = 7936;
pub const TIM_DCR_DBL: u32 = 7936;
pub const TIM_DCR_DBL_0: u32 = 256;
pub const TIM_DCR_DBL_1: u32 = 512;
pub const TIM_DCR_DBL_2: u32 = 1024;
pub const TIM_DCR_DBL_3: u32 = 2048;
pub const TIM_DCR_DBL_4: u32 = 4096;
pub const TIM_DMAR_DMAB_Pos: u32 = 0;
pub const TIM_DMAR_DMAB_Msk: u32 = 65535;
pub const TIM_DMAR_DMAB: u32 = 65535;
pub const TIM_OR_TI1_RMP_Pos: u32 = 0;
pub const TIM_OR_TI1_RMP_Msk: u32 = 3;
pub const TIM_OR_TI1_RMP: u32 = 3;
pub const TIM_OR_TI1_RMP_0: u32 = 1;
pub const TIM_OR_TI1_RMP_1: u32 = 2;
pub const TIM_OR_TI4_RMP_Pos: u32 = 6;
pub const TIM_OR_TI4_RMP_Msk: u32 = 192;
pub const TIM_OR_TI4_RMP: u32 = 192;
pub const TIM_OR_TI4_RMP_0: u32 = 64;
pub const TIM_OR_TI4_RMP_1: u32 = 128;
pub const TIM_OR_ITR1_RMP_Pos: u32 = 10;
pub const TIM_OR_ITR1_RMP_Msk: u32 = 3072;
pub const TIM_OR_ITR1_RMP: u32 = 3072;
pub const TIM_OR_ITR1_RMP_0: u32 = 1024;
pub const TIM_OR_ITR1_RMP_1: u32 = 2048;
pub const USART_SR_PE_Pos: u32 = 0;
pub const USART_SR_PE_Msk: u32 = 1;
pub const USART_SR_PE: u32 = 1;
pub const USART_SR_FE_Pos: u32 = 1;
pub const USART_SR_FE_Msk: u32 = 2;
pub const USART_SR_FE: u32 = 2;
pub const USART_SR_NE_Pos: u32 = 2;
pub const USART_SR_NE_Msk: u32 = 4;
pub const USART_SR_NE: u32 = 4;
pub const USART_SR_ORE_Pos: u32 = 3;
pub const USART_SR_ORE_Msk: u32 = 8;
pub const USART_SR_ORE: u32 = 8;
pub const USART_SR_IDLE_Pos: u32 = 4;
pub const USART_SR_IDLE_Msk: u32 = 16;
pub const USART_SR_IDLE: u32 = 16;
pub const USART_SR_RXNE_Pos: u32 = 5;
pub const USART_SR_RXNE_Msk: u32 = 32;
pub const USART_SR_RXNE: u32 = 32;
pub const USART_SR_TC_Pos: u32 = 6;
pub const USART_SR_TC_Msk: u32 = 64;
pub const USART_SR_TC: u32 = 64;
pub const USART_SR_TXE_Pos: u32 = 7;
pub const USART_SR_TXE_Msk: u32 = 128;
pub const USART_SR_TXE: u32 = 128;
pub const USART_SR_LBD_Pos: u32 = 8;
pub const USART_SR_LBD_Msk: u32 = 256;
pub const USART_SR_LBD: u32 = 256;
pub const USART_SR_CTS_Pos: u32 = 9;
pub const USART_SR_CTS_Msk: u32 = 512;
pub const USART_SR_CTS: u32 = 512;
pub const USART_DR_DR_Pos: u32 = 0;
pub const USART_DR_DR_Msk: u32 = 511;
pub const USART_DR_DR: u32 = 511;
pub const USART_BRR_DIV_Fraction_Pos: u32 = 0;
pub const USART_BRR_DIV_Fraction_Msk: u32 = 15;
pub const USART_BRR_DIV_Fraction: u32 = 15;
pub const USART_BRR_DIV_Mantissa_Pos: u32 = 4;
pub const USART_BRR_DIV_Mantissa_Msk: u32 = 65520;
pub const USART_BRR_DIV_Mantissa: u32 = 65520;
pub const USART_CR1_SBK_Pos: u32 = 0;
pub const USART_CR1_SBK_Msk: u32 = 1;
pub const USART_CR1_SBK: u32 = 1;
pub const USART_CR1_RWU_Pos: u32 = 1;
pub const USART_CR1_RWU_Msk: u32 = 2;
pub const USART_CR1_RWU: u32 = 2;
pub const USART_CR1_RE_Pos: u32 = 2;
pub const USART_CR1_RE_Msk: u32 = 4;
pub const USART_CR1_RE: u32 = 4;
pub const USART_CR1_TE_Pos: u32 = 3;
pub const USART_CR1_TE_Msk: u32 = 8;
pub const USART_CR1_TE: u32 = 8;
pub const USART_CR1_IDLEIE_Pos: u32 = 4;
pub const USART_CR1_IDLEIE_Msk: u32 = 16;
pub const USART_CR1_IDLEIE: u32 = 16;
pub const USART_CR1_RXNEIE_Pos: u32 = 5;
pub const USART_CR1_RXNEIE_Msk: u32 = 32;
pub const USART_CR1_RXNEIE: u32 = 32;
pub const USART_CR1_TCIE_Pos: u32 = 6;
pub const USART_CR1_TCIE_Msk: u32 = 64;
pub const USART_CR1_TCIE: u32 = 64;
pub const USART_CR1_TXEIE_Pos: u32 = 7;
pub const USART_CR1_TXEIE_Msk: u32 = 128;
pub const USART_CR1_TXEIE: u32 = 128;
pub const USART_CR1_PEIE_Pos: u32 = 8;
pub const USART_CR1_PEIE_Msk: u32 = 256;
pub const USART_CR1_PEIE: u32 = 256;
pub const USART_CR1_PS_Pos: u32 = 9;
pub const USART_CR1_PS_Msk: u32 = 512;
pub const USART_CR1_PS: u32 = 512;
pub const USART_CR1_PCE_Pos: u32 = 10;
pub const USART_CR1_PCE_Msk: u32 = 1024;
pub const USART_CR1_PCE: u32 = 1024;
pub const USART_CR1_WAKE_Pos: u32 = 11;
pub const USART_CR1_WAKE_Msk: u32 = 2048;
pub const USART_CR1_WAKE: u32 = 2048;
pub const USART_CR1_M_Pos: u32 = 12;
pub const USART_CR1_M_Msk: u32 = 4096;
pub const USART_CR1_M: u32 = 4096;
pub const USART_CR1_UE_Pos: u32 = 13;
pub const USART_CR1_UE_Msk: u32 = 8192;
pub const USART_CR1_UE: u32 = 8192;
pub const USART_CR1_OVER8_Pos: u32 = 15;
pub const USART_CR1_OVER8_Msk: u32 = 32768;
pub const USART_CR1_OVER8: u32 = 32768;
pub const USART_CR2_ADD_Pos: u32 = 0;
pub const USART_CR2_ADD_Msk: u32 = 15;
pub const USART_CR2_ADD: u32 = 15;
pub const USART_CR2_LBDL_Pos: u32 = 5;
pub const USART_CR2_LBDL_Msk: u32 = 32;
pub const USART_CR2_LBDL: u32 = 32;
pub const USART_CR2_LBDIE_Pos: u32 = 6;
pub const USART_CR2_LBDIE_Msk: u32 = 64;
pub const USART_CR2_LBDIE: u32 = 64;
pub const USART_CR2_LBCL_Pos: u32 = 8;
pub const USART_CR2_LBCL_Msk: u32 = 256;
pub const USART_CR2_LBCL: u32 = 256;
pub const USART_CR2_CPHA_Pos: u32 = 9;
pub const USART_CR2_CPHA_Msk: u32 = 512;
pub const USART_CR2_CPHA: u32 = 512;
pub const USART_CR2_CPOL_Pos: u32 = 10;
pub const USART_CR2_CPOL_Msk: u32 = 1024;
pub const USART_CR2_CPOL: u32 = 1024;
pub const USART_CR2_CLKEN_Pos: u32 = 11;
pub const USART_CR2_CLKEN_Msk: u32 = 2048;
pub const USART_CR2_CLKEN: u32 = 2048;
pub const USART_CR2_STOP_Pos: u32 = 12;
pub const USART_CR2_STOP_Msk: u32 = 12288;
pub const USART_CR2_STOP: u32 = 12288;
pub const USART_CR2_STOP_0: u32 = 4096;
pub const USART_CR2_STOP_1: u32 = 8192;
pub const USART_CR2_LINEN_Pos: u32 = 14;
pub const USART_CR2_LINEN_Msk: u32 = 16384;
pub const USART_CR2_LINEN: u32 = 16384;
pub const USART_CR3_EIE_Pos: u32 = 0;
pub const USART_CR3_EIE_Msk: u32 = 1;
pub const USART_CR3_EIE: u32 = 1;
pub const USART_CR3_IREN_Pos: u32 = 1;
pub const USART_CR3_IREN_Msk: u32 = 2;
pub const USART_CR3_IREN: u32 = 2;
pub const USART_CR3_IRLP_Pos: u32 = 2;
pub const USART_CR3_IRLP_Msk: u32 = 4;
pub const USART_CR3_IRLP: u32 = 4;
pub const USART_CR3_HDSEL_Pos: u32 = 3;
pub const USART_CR3_HDSEL_Msk: u32 = 8;
pub const USART_CR3_HDSEL: u32 = 8;
pub const USART_CR3_NACK_Pos: u32 = 4;
pub const USART_CR3_NACK_Msk: u32 = 16;
pub const USART_CR3_NACK: u32 = 16;
pub const USART_CR3_SCEN_Pos: u32 = 5;
pub const USART_CR3_SCEN_Msk: u32 = 32;
pub const USART_CR3_SCEN: u32 = 32;
pub const USART_CR3_DMAR_Pos: u32 = 6;
pub const USART_CR3_DMAR_Msk: u32 = 64;
pub const USART_CR3_DMAR: u32 = 64;
pub const USART_CR3_DMAT_Pos: u32 = 7;
pub const USART_CR3_DMAT_Msk: u32 = 128;
pub const USART_CR3_DMAT: u32 = 128;
pub const USART_CR3_RTSE_Pos: u32 = 8;
pub const USART_CR3_RTSE_Msk: u32 = 256;
pub const USART_CR3_RTSE: u32 = 256;
pub const USART_CR3_CTSE_Pos: u32 = 9;
pub const USART_CR3_CTSE_Msk: u32 = 512;
pub const USART_CR3_CTSE: u32 = 512;
pub const USART_CR3_CTSIE_Pos: u32 = 10;
pub const USART_CR3_CTSIE_Msk: u32 = 1024;
pub const USART_CR3_CTSIE: u32 = 1024;
pub const USART_CR3_ONEBIT_Pos: u32 = 11;
pub const USART_CR3_ONEBIT_Msk: u32 = 2048;
pub const USART_CR3_ONEBIT: u32 = 2048;
pub const USART_GTPR_PSC_Pos: u32 = 0;
pub const USART_GTPR_PSC_Msk: u32 = 255;
pub const USART_GTPR_PSC: u32 = 255;
pub const USART_GTPR_PSC_0: u32 = 1;
pub const USART_GTPR_PSC_1: u32 = 2;
pub const USART_GTPR_PSC_2: u32 = 4;
pub const USART_GTPR_PSC_3: u32 = 8;
pub const USART_GTPR_PSC_4: u32 = 16;
pub const USART_GTPR_PSC_5: u32 = 32;
pub const USART_GTPR_PSC_6: u32 = 64;
pub const USART_GTPR_PSC_7: u32 = 128;
pub const USART_GTPR_GT_Pos: u32 = 8;
pub const USART_GTPR_GT_Msk: u32 = 65280;
pub const USART_GTPR_GT: u32 = 65280;
pub const WWDG_CR_T_Pos: u32 = 0;
pub const WWDG_CR_T_Msk: u32 = 127;
pub const WWDG_CR_T: u32 = 127;
pub const WWDG_CR_T_0: u32 = 1;
pub const WWDG_CR_T_1: u32 = 2;
pub const WWDG_CR_T_2: u32 = 4;
pub const WWDG_CR_T_3: u32 = 8;
pub const WWDG_CR_T_4: u32 = 16;
pub const WWDG_CR_T_5: u32 = 32;
pub const WWDG_CR_T_6: u32 = 64;
pub const WWDG_CR_T0: u32 = 1;
pub const WWDG_CR_T1: u32 = 2;
pub const WWDG_CR_T2: u32 = 4;
pub const WWDG_CR_T3: u32 = 8;
pub const WWDG_CR_T4: u32 = 16;
pub const WWDG_CR_T5: u32 = 32;
pub const WWDG_CR_T6: u32 = 64;
pub const WWDG_CR_WDGA_Pos: u32 = 7;
pub const WWDG_CR_WDGA_Msk: u32 = 128;
pub const WWDG_CR_WDGA: u32 = 128;
pub const WWDG_CFR_W_Pos: u32 = 0;
pub const WWDG_CFR_W_Msk: u32 = 127;
pub const WWDG_CFR_W: u32 = 127;
pub const WWDG_CFR_W_0: u32 = 1;
pub const WWDG_CFR_W_1: u32 = 2;
pub const WWDG_CFR_W_2: u32 = 4;
pub const WWDG_CFR_W_3: u32 = 8;
pub const WWDG_CFR_W_4: u32 = 16;
pub const WWDG_CFR_W_5: u32 = 32;
pub const WWDG_CFR_W_6: u32 = 64;
pub const WWDG_CFR_W0: u32 = 1;
pub const WWDG_CFR_W1: u32 = 2;
pub const WWDG_CFR_W2: u32 = 4;
pub const WWDG_CFR_W3: u32 = 8;
pub const WWDG_CFR_W4: u32 = 16;
pub const WWDG_CFR_W5: u32 = 32;
pub const WWDG_CFR_W6: u32 = 64;
pub const WWDG_CFR_WDGTB_Pos: u32 = 7;
pub const WWDG_CFR_WDGTB_Msk: u32 = 384;
pub const WWDG_CFR_WDGTB: u32 = 384;
pub const WWDG_CFR_WDGTB_0: u32 = 128;
pub const WWDG_CFR_WDGTB_1: u32 = 256;
pub const WWDG_CFR_WDGTB0: u32 = 128;
pub const WWDG_CFR_WDGTB1: u32 = 256;
pub const WWDG_CFR_EWI_Pos: u32 = 9;
pub const WWDG_CFR_EWI_Msk: u32 = 512;
pub const WWDG_CFR_EWI: u32 = 512;
pub const WWDG_SR_EWIF_Pos: u32 = 0;
pub const WWDG_SR_EWIF_Msk: u32 = 1;
pub const WWDG_SR_EWIF: u32 = 1;
pub const DBGMCU_IDCODE_DEV_ID_Pos: u32 = 0;
pub const DBGMCU_IDCODE_DEV_ID_Msk: u32 = 4095;
pub const DBGMCU_IDCODE_DEV_ID: u32 = 4095;
pub const DBGMCU_IDCODE_REV_ID_Pos: u32 = 16;
pub const DBGMCU_IDCODE_REV_ID_Msk: u32 = 4294901760;
pub const DBGMCU_IDCODE_REV_ID: u32 = 4294901760;
pub const DBGMCU_CR_DBG_SLEEP_Pos: u32 = 0;
pub const DBGMCU_CR_DBG_SLEEP_Msk: u32 = 1;
pub const DBGMCU_CR_DBG_SLEEP: u32 = 1;
pub const DBGMCU_CR_DBG_STOP_Pos: u32 = 1;
pub const DBGMCU_CR_DBG_STOP_Msk: u32 = 2;
pub const DBGMCU_CR_DBG_STOP: u32 = 2;
pub const DBGMCU_CR_DBG_STANDBY_Pos: u32 = 2;
pub const DBGMCU_CR_DBG_STANDBY_Msk: u32 = 4;
pub const DBGMCU_CR_DBG_STANDBY: u32 = 4;
pub const DBGMCU_CR_TRACE_IOEN_Pos: u32 = 5;
pub const DBGMCU_CR_TRACE_IOEN_Msk: u32 = 32;
pub const DBGMCU_CR_TRACE_IOEN: u32 = 32;
pub const DBGMCU_CR_TRACE_MODE_Pos: u32 = 6;
pub const DBGMCU_CR_TRACE_MODE_Msk: u32 = 192;
pub const DBGMCU_CR_TRACE_MODE: u32 = 192;
pub const DBGMCU_CR_TRACE_MODE_0: u32 = 64;
pub const DBGMCU_CR_TRACE_MODE_1: u32 = 128;
pub const DBGMCU_APB1_FZ_DBG_TIM2_STOP_Pos: u32 = 0;
pub const DBGMCU_APB1_FZ_DBG_TIM2_STOP_Msk: u32 = 1;
pub const DBGMCU_APB1_FZ_DBG_TIM2_STOP: u32 = 1;
pub const DBGMCU_APB1_FZ_DBG_TIM3_STOP_Pos: u32 = 1;
pub const DBGMCU_APB1_FZ_DBG_TIM3_STOP_Msk: u32 = 2;
pub const DBGMCU_APB1_FZ_DBG_TIM3_STOP: u32 = 2;
pub const DBGMCU_APB1_FZ_DBG_TIM4_STOP_Pos: u32 = 2;
pub const DBGMCU_APB1_FZ_DBG_TIM4_STOP_Msk: u32 = 4;
pub const DBGMCU_APB1_FZ_DBG_TIM4_STOP: u32 = 4;
pub const DBGMCU_APB1_FZ_DBG_TIM5_STOP_Pos: u32 = 3;
pub const DBGMCU_APB1_FZ_DBG_TIM5_STOP_Msk: u32 = 8;
pub const DBGMCU_APB1_FZ_DBG_TIM5_STOP: u32 = 8;
pub const DBGMCU_APB1_FZ_DBG_RTC_STOP_Pos: u32 = 10;
pub const DBGMCU_APB1_FZ_DBG_RTC_STOP_Msk: u32 = 1024;
pub const DBGMCU_APB1_FZ_DBG_RTC_STOP: u32 = 1024;
pub const DBGMCU_APB1_FZ_DBG_WWDG_STOP_Pos: u32 = 11;
pub const DBGMCU_APB1_FZ_DBG_WWDG_STOP_Msk: u32 = 2048;
pub const DBGMCU_APB1_FZ_DBG_WWDG_STOP: u32 = 2048;
pub const DBGMCU_APB1_FZ_DBG_IWDG_STOP_Pos: u32 = 12;
pub const DBGMCU_APB1_FZ_DBG_IWDG_STOP_Msk: u32 = 4096;
pub const DBGMCU_APB1_FZ_DBG_IWDG_STOP: u32 = 4096;
pub const DBGMCU_APB1_FZ_DBG_I2C1_SMBUS_TIMEOUT_Pos: u32 = 21;
pub const DBGMCU_APB1_FZ_DBG_I2C1_SMBUS_TIMEOUT_Msk: u32 = 2097152;
pub const DBGMCU_APB1_FZ_DBG_I2C1_SMBUS_TIMEOUT: u32 = 2097152;
pub const DBGMCU_APB1_FZ_DBG_I2C2_SMBUS_TIMEOUT_Pos: u32 = 22;
pub const DBGMCU_APB1_FZ_DBG_I2C2_SMBUS_TIMEOUT_Msk: u32 = 4194304;
pub const DBGMCU_APB1_FZ_DBG_I2C2_SMBUS_TIMEOUT: u32 = 4194304;
pub const DBGMCU_APB1_FZ_DBG_I2C3_SMBUS_TIMEOUT_Pos: u32 = 23;
pub const DBGMCU_APB1_FZ_DBG_I2C3_SMBUS_TIMEOUT_Msk: u32 = 8388608;
pub const DBGMCU_APB1_FZ_DBG_I2C3_SMBUS_TIMEOUT: u32 = 8388608;
pub const DBGMCU_APB1_FZ_DBG_IWDEG_STOP: u32 = 4096;
pub const DBGMCU_APB2_FZ_DBG_TIM1_STOP_Pos: u32 = 0;
pub const DBGMCU_APB2_FZ_DBG_TIM1_STOP_Msk: u32 = 1;
pub const DBGMCU_APB2_FZ_DBG_TIM1_STOP: u32 = 1;
pub const DBGMCU_APB2_FZ_DBG_TIM9_STOP_Pos: u32 = 16;
pub const DBGMCU_APB2_FZ_DBG_TIM9_STOP_Msk: u32 = 65536;
pub const DBGMCU_APB2_FZ_DBG_TIM9_STOP: u32 = 65536;
pub const DBGMCU_APB2_FZ_DBG_TIM10_STOP_Pos: u32 = 17;
pub const DBGMCU_APB2_FZ_DBG_TIM10_STOP_Msk: u32 = 131072;
pub const DBGMCU_APB2_FZ_DBG_TIM10_STOP: u32 = 131072;
pub const DBGMCU_APB2_FZ_DBG_TIM11_STOP_Pos: u32 = 18;
pub const DBGMCU_APB2_FZ_DBG_TIM11_STOP_Msk: u32 = 262144;
pub const DBGMCU_APB2_FZ_DBG_TIM11_STOP: u32 = 262144;
pub const USB_OTG_GOTGCTL_SRQSCS_Pos: u32 = 0;
pub const USB_OTG_GOTGCTL_SRQSCS_Msk: u32 = 1;
pub const USB_OTG_GOTGCTL_SRQSCS: u32 = 1;
pub const USB_OTG_GOTGCTL_SRQ_Pos: u32 = 1;
pub const USB_OTG_GOTGCTL_SRQ_Msk: u32 = 2;
pub const USB_OTG_GOTGCTL_SRQ: u32 = 2;
pub const USB_OTG_GOTGCTL_HNGSCS_Pos: u32 = 8;
pub const USB_OTG_GOTGCTL_HNGSCS_Msk: u32 = 256;
pub const USB_OTG_GOTGCTL_HNGSCS: u32 = 256;
pub const USB_OTG_GOTGCTL_HNPRQ_Pos: u32 = 9;
pub const USB_OTG_GOTGCTL_HNPRQ_Msk: u32 = 512;
pub const USB_OTG_GOTGCTL_HNPRQ: u32 = 512;
pub const USB_OTG_GOTGCTL_HSHNPEN_Pos: u32 = 10;
pub const USB_OTG_GOTGCTL_HSHNPEN_Msk: u32 = 1024;
pub const USB_OTG_GOTGCTL_HSHNPEN: u32 = 1024;
pub const USB_OTG_GOTGCTL_DHNPEN_Pos: u32 = 11;
pub const USB_OTG_GOTGCTL_DHNPEN_Msk: u32 = 2048;
pub const USB_OTG_GOTGCTL_DHNPEN: u32 = 2048;
pub const USB_OTG_GOTGCTL_CIDSTS_Pos: u32 = 16;
pub const USB_OTG_GOTGCTL_CIDSTS_Msk: u32 = 65536;
pub const USB_OTG_GOTGCTL_CIDSTS: u32 = 65536;
pub const USB_OTG_GOTGCTL_DBCT_Pos: u32 = 17;
pub const USB_OTG_GOTGCTL_DBCT_Msk: u32 = 131072;
pub const USB_OTG_GOTGCTL_DBCT: u32 = 131072;
pub const USB_OTG_GOTGCTL_ASVLD_Pos: u32 = 18;
pub const USB_OTG_GOTGCTL_ASVLD_Msk: u32 = 262144;
pub const USB_OTG_GOTGCTL_ASVLD: u32 = 262144;
pub const USB_OTG_GOTGCTL_BSVLD_Pos: u32 = 19;
pub const USB_OTG_GOTGCTL_BSVLD_Msk: u32 = 524288;
pub const USB_OTG_GOTGCTL_BSVLD: u32 = 524288;
pub const USB_OTG_HCFG_FSLSPCS_Pos: u32 = 0;
pub const USB_OTG_HCFG_FSLSPCS_Msk: u32 = 3;
pub const USB_OTG_HCFG_FSLSPCS: u32 = 3;
pub const USB_OTG_HCFG_FSLSPCS_0: u32 = 1;
pub const USB_OTG_HCFG_FSLSPCS_1: u32 = 2;
pub const USB_OTG_HCFG_FSLSS_Pos: u32 = 2;
pub const USB_OTG_HCFG_FSLSS_Msk: u32 = 4;
pub const USB_OTG_HCFG_FSLSS: u32 = 4;
pub const USB_OTG_DCFG_DSPD_Pos: u32 = 0;
pub const USB_OTG_DCFG_DSPD_Msk: u32 = 3;
pub const USB_OTG_DCFG_DSPD: u32 = 3;
pub const USB_OTG_DCFG_DSPD_0: u32 = 1;
pub const USB_OTG_DCFG_DSPD_1: u32 = 2;
pub const USB_OTG_DCFG_NZLSOHSK_Pos: u32 = 2;
pub const USB_OTG_DCFG_NZLSOHSK_Msk: u32 = 4;
pub const USB_OTG_DCFG_NZLSOHSK: u32 = 4;
pub const USB_OTG_DCFG_DAD_Pos: u32 = 4;
pub const USB_OTG_DCFG_DAD_Msk: u32 = 2032;
pub const USB_OTG_DCFG_DAD: u32 = 2032;
pub const USB_OTG_DCFG_DAD_0: u32 = 16;
pub const USB_OTG_DCFG_DAD_1: u32 = 32;
pub const USB_OTG_DCFG_DAD_2: u32 = 64;
pub const USB_OTG_DCFG_DAD_3: u32 = 128;
pub const USB_OTG_DCFG_DAD_4: u32 = 256;
pub const USB_OTG_DCFG_DAD_5: u32 = 512;
pub const USB_OTG_DCFG_DAD_6: u32 = 1024;
pub const USB_OTG_DCFG_PFIVL_Pos: u32 = 11;
pub const USB_OTG_DCFG_PFIVL_Msk: u32 = 6144;
pub const USB_OTG_DCFG_PFIVL: u32 = 6144;
pub const USB_OTG_DCFG_PFIVL_0: u32 = 2048;
pub const USB_OTG_DCFG_PFIVL_1: u32 = 4096;
pub const USB_OTG_DCFG_PERSCHIVL_Pos: u32 = 24;
pub const USB_OTG_DCFG_PERSCHIVL_Msk: u32 = 50331648;
pub const USB_OTG_DCFG_PERSCHIVL: u32 = 50331648;
pub const USB_OTG_DCFG_PERSCHIVL_0: u32 = 16777216;
pub const USB_OTG_DCFG_PERSCHIVL_1: u32 = 33554432;
pub const USB_OTG_PCGCR_STPPCLK_Pos: u32 = 0;
pub const USB_OTG_PCGCR_STPPCLK_Msk: u32 = 1;
pub const USB_OTG_PCGCR_STPPCLK: u32 = 1;
pub const USB_OTG_PCGCR_GATEHCLK_Pos: u32 = 1;
pub const USB_OTG_PCGCR_GATEHCLK_Msk: u32 = 2;
pub const USB_OTG_PCGCR_GATEHCLK: u32 = 2;
pub const USB_OTG_PCGCR_PHYSUSP_Pos: u32 = 4;
pub const USB_OTG_PCGCR_PHYSUSP_Msk: u32 = 16;
pub const USB_OTG_PCGCR_PHYSUSP: u32 = 16;
pub const USB_OTG_GOTGINT_SEDET_Pos: u32 = 2;
pub const USB_OTG_GOTGINT_SEDET_Msk: u32 = 4;
pub const USB_OTG_GOTGINT_SEDET: u32 = 4;
pub const USB_OTG_GOTGINT_SRSSCHG_Pos: u32 = 8;
pub const USB_OTG_GOTGINT_SRSSCHG_Msk: u32 = 256;
pub const USB_OTG_GOTGINT_SRSSCHG: u32 = 256;
pub const USB_OTG_GOTGINT_HNSSCHG_Pos: u32 = 9;
pub const USB_OTG_GOTGINT_HNSSCHG_Msk: u32 = 512;
pub const USB_OTG_GOTGINT_HNSSCHG: u32 = 512;
pub const USB_OTG_GOTGINT_HNGDET_Pos: u32 = 17;
pub const USB_OTG_GOTGINT_HNGDET_Msk: u32 = 131072;
pub const USB_OTG_GOTGINT_HNGDET: u32 = 131072;
pub const USB_OTG_GOTGINT_ADTOCHG_Pos: u32 = 18;
pub const USB_OTG_GOTGINT_ADTOCHG_Msk: u32 = 262144;
pub const USB_OTG_GOTGINT_ADTOCHG: u32 = 262144;
pub const USB_OTG_GOTGINT_DBCDNE_Pos: u32 = 19;
pub const USB_OTG_GOTGINT_DBCDNE_Msk: u32 = 524288;
pub const USB_OTG_GOTGINT_DBCDNE: u32 = 524288;
pub const USB_OTG_DCTL_RWUSIG_Pos: u32 = 0;
pub const USB_OTG_DCTL_RWUSIG_Msk: u32 = 1;
pub const USB_OTG_DCTL_RWUSIG: u32 = 1;
pub const USB_OTG_DCTL_SDIS_Pos: u32 = 1;
pub const USB_OTG_DCTL_SDIS_Msk: u32 = 2;
pub const USB_OTG_DCTL_SDIS: u32 = 2;
pub const USB_OTG_DCTL_GINSTS_Pos: u32 = 2;
pub const USB_OTG_DCTL_GINSTS_Msk: u32 = 4;
pub const USB_OTG_DCTL_GINSTS: u32 = 4;
pub const USB_OTG_DCTL_GONSTS_Pos: u32 = 3;
pub const USB_OTG_DCTL_GONSTS_Msk: u32 = 8;
pub const USB_OTG_DCTL_GONSTS: u32 = 8;
pub const USB_OTG_DCTL_TCTL_Pos: u32 = 4;
pub const USB_OTG_DCTL_TCTL_Msk: u32 = 112;
pub const USB_OTG_DCTL_TCTL: u32 = 112;
pub const USB_OTG_DCTL_TCTL_0: u32 = 16;
pub const USB_OTG_DCTL_TCTL_1: u32 = 32;
pub const USB_OTG_DCTL_TCTL_2: u32 = 64;
pub const USB_OTG_DCTL_SGINAK_Pos: u32 = 7;
pub const USB_OTG_DCTL_SGINAK_Msk: u32 = 128;
pub const USB_OTG_DCTL_SGINAK: u32 = 128;
pub const USB_OTG_DCTL_CGINAK_Pos: u32 = 8;
pub const USB_OTG_DCTL_CGINAK_Msk: u32 = 256;
pub const USB_OTG_DCTL_CGINAK: u32 = 256;
pub const USB_OTG_DCTL_SGONAK_Pos: u32 = 9;
pub const USB_OTG_DCTL_SGONAK_Msk: u32 = 512;
pub const USB_OTG_DCTL_SGONAK: u32 = 512;
pub const USB_OTG_DCTL_CGONAK_Pos: u32 = 10;
pub const USB_OTG_DCTL_CGONAK_Msk: u32 = 1024;
pub const USB_OTG_DCTL_CGONAK: u32 = 1024;
pub const USB_OTG_DCTL_POPRGDNE_Pos: u32 = 11;
pub const USB_OTG_DCTL_POPRGDNE_Msk: u32 = 2048;
pub const USB_OTG_DCTL_POPRGDNE: u32 = 2048;
pub const USB_OTG_HFIR_FRIVL_Pos: u32 = 0;
pub const USB_OTG_HFIR_FRIVL_Msk: u32 = 65535;
pub const USB_OTG_HFIR_FRIVL: u32 = 65535;
pub const USB_OTG_HFNUM_FRNUM_Pos: u32 = 0;
pub const USB_OTG_HFNUM_FRNUM_Msk: u32 = 65535;
pub const USB_OTG_HFNUM_FRNUM: u32 = 65535;
pub const USB_OTG_HFNUM_FTREM_Pos: u32 = 16;
pub const USB_OTG_HFNUM_FTREM_Msk: u32 = 4294901760;
pub const USB_OTG_HFNUM_FTREM: u32 = 4294901760;
pub const USB_OTG_DSTS_SUSPSTS_Pos: u32 = 0;
pub const USB_OTG_DSTS_SUSPSTS_Msk: u32 = 1;
pub const USB_OTG_DSTS_SUSPSTS: u32 = 1;
pub const USB_OTG_DSTS_ENUMSPD_Pos: u32 = 1;
pub const USB_OTG_DSTS_ENUMSPD_Msk: u32 = 6;
pub const USB_OTG_DSTS_ENUMSPD: u32 = 6;
pub const USB_OTG_DSTS_ENUMSPD_0: u32 = 2;
pub const USB_OTG_DSTS_ENUMSPD_1: u32 = 4;
pub const USB_OTG_DSTS_EERR_Pos: u32 = 3;
pub const USB_OTG_DSTS_EERR_Msk: u32 = 8;
pub const USB_OTG_DSTS_EERR: u32 = 8;
pub const USB_OTG_DSTS_FNSOF_Pos: u32 = 8;
pub const USB_OTG_DSTS_FNSOF_Msk: u32 = 4194048;
pub const USB_OTG_DSTS_FNSOF: u32 = 4194048;
pub const USB_OTG_GAHBCFG_GINT_Pos: u32 = 0;
pub const USB_OTG_GAHBCFG_GINT_Msk: u32 = 1;
pub const USB_OTG_GAHBCFG_GINT: u32 = 1;
pub const USB_OTG_GAHBCFG_HBSTLEN_Pos: u32 = 1;
pub const USB_OTG_GAHBCFG_HBSTLEN_Msk: u32 = 30;
pub const USB_OTG_GAHBCFG_HBSTLEN: u32 = 30;
pub const USB_OTG_GAHBCFG_HBSTLEN_0: u32 = 0;
pub const USB_OTG_GAHBCFG_HBSTLEN_1: u32 = 2;
pub const USB_OTG_GAHBCFG_HBSTLEN_2: u32 = 6;
pub const USB_OTG_GAHBCFG_HBSTLEN_3: u32 = 10;
pub const USB_OTG_GAHBCFG_HBSTLEN_4: u32 = 14;
pub const USB_OTG_GAHBCFG_DMAEN_Pos: u32 = 5;
pub const USB_OTG_GAHBCFG_DMAEN_Msk: u32 = 32;
pub const USB_OTG_GAHBCFG_DMAEN: u32 = 32;
pub const USB_OTG_GAHBCFG_TXFELVL_Pos: u32 = 7;
pub const USB_OTG_GAHBCFG_TXFELVL_Msk: u32 = 128;
pub const USB_OTG_GAHBCFG_TXFELVL: u32 = 128;
pub const USB_OTG_GAHBCFG_PTXFELVL_Pos: u32 = 8;
pub const USB_OTG_GAHBCFG_PTXFELVL_Msk: u32 = 256;
pub const USB_OTG_GAHBCFG_PTXFELVL: u32 = 256;
pub const USB_OTG_GUSBCFG_TOCAL_Pos: u32 = 0;
pub const USB_OTG_GUSBCFG_TOCAL_Msk: u32 = 7;
pub const USB_OTG_GUSBCFG_TOCAL: u32 = 7;
pub const USB_OTG_GUSBCFG_TOCAL_0: u32 = 1;
pub const USB_OTG_GUSBCFG_TOCAL_1: u32 = 2;
pub const USB_OTG_GUSBCFG_TOCAL_2: u32 = 4;
pub const USB_OTG_GUSBCFG_PHYSEL_Pos: u32 = 6;
pub const USB_OTG_GUSBCFG_PHYSEL_Msk: u32 = 64;
pub const USB_OTG_GUSBCFG_PHYSEL: u32 = 64;
pub const USB_OTG_GUSBCFG_SRPCAP_Pos: u32 = 8;
pub const USB_OTG_GUSBCFG_SRPCAP_Msk: u32 = 256;
pub const USB_OTG_GUSBCFG_SRPCAP: u32 = 256;
pub const USB_OTG_GUSBCFG_HNPCAP_Pos: u32 = 9;
pub const USB_OTG_GUSBCFG_HNPCAP_Msk: u32 = 512;
pub const USB_OTG_GUSBCFG_HNPCAP: u32 = 512;
pub const USB_OTG_GUSBCFG_TRDT_Pos: u32 = 10;
pub const USB_OTG_GUSBCFG_TRDT_Msk: u32 = 15360;
pub const USB_OTG_GUSBCFG_TRDT: u32 = 15360;
pub const USB_OTG_GUSBCFG_TRDT_0: u32 = 1024;
pub const USB_OTG_GUSBCFG_TRDT_1: u32 = 2048;
pub const USB_OTG_GUSBCFG_TRDT_2: u32 = 4096;
pub const USB_OTG_GUSBCFG_TRDT_3: u32 = 8192;
pub const USB_OTG_GUSBCFG_PHYLPCS_Pos: u32 = 15;
pub const USB_OTG_GUSBCFG_PHYLPCS_Msk: u32 = 32768;
pub const USB_OTG_GUSBCFG_PHYLPCS: u32 = 32768;
pub const USB_OTG_GUSBCFG_ULPIFSLS_Pos: u32 = 17;
pub const USB_OTG_GUSBCFG_ULPIFSLS_Msk: u32 = 131072;
pub const USB_OTG_GUSBCFG_ULPIFSLS: u32 = 131072;
pub const USB_OTG_GUSBCFG_ULPIAR_Pos: u32 = 18;
pub const USB_OTG_GUSBCFG_ULPIAR_Msk: u32 = 262144;
pub const USB_OTG_GUSBCFG_ULPIAR: u32 = 262144;
pub const USB_OTG_GUSBCFG_ULPICSM_Pos: u32 = 19;
pub const USB_OTG_GUSBCFG_ULPICSM_Msk: u32 = 524288;
pub const USB_OTG_GUSBCFG_ULPICSM: u32 = 524288;
pub const USB_OTG_GUSBCFG_ULPIEVBUSD_Pos: u32 = 20;
pub const USB_OTG_GUSBCFG_ULPIEVBUSD_Msk: u32 = 1048576;
pub const USB_OTG_GUSBCFG_ULPIEVBUSD: u32 = 1048576;
pub const USB_OTG_GUSBCFG_ULPIEVBUSI_Pos: u32 = 21;
pub const USB_OTG_GUSBCFG_ULPIEVBUSI_Msk: u32 = 2097152;
pub const USB_OTG_GUSBCFG_ULPIEVBUSI: u32 = 2097152;
pub const USB_OTG_GUSBCFG_TSDPS_Pos: u32 = 22;
pub const USB_OTG_GUSBCFG_TSDPS_Msk: u32 = 4194304;
pub const USB_OTG_GUSBCFG_TSDPS: u32 = 4194304;
pub const USB_OTG_GUSBCFG_PCCI_Pos: u32 = 23;
pub const USB_OTG_GUSBCFG_PCCI_Msk: u32 = 8388608;
pub const USB_OTG_GUSBCFG_PCCI: u32 = 8388608;
pub const USB_OTG_GUSBCFG_PTCI_Pos: u32 = 24;
pub const USB_OTG_GUSBCFG_PTCI_Msk: u32 = 16777216;
pub const USB_OTG_GUSBCFG_PTCI: u32 = 16777216;
pub const USB_OTG_GUSBCFG_ULPIIPD_Pos: u32 = 25;
pub const USB_OTG_GUSBCFG_ULPIIPD_Msk: u32 = 33554432;
pub const USB_OTG_GUSBCFG_ULPIIPD: u32 = 33554432;
pub const USB_OTG_GUSBCFG_FHMOD_Pos: u32 = 29;
pub const USB_OTG_GUSBCFG_FHMOD_Msk: u32 = 536870912;
pub const USB_OTG_GUSBCFG_FHMOD: u32 = 536870912;
pub const USB_OTG_GUSBCFG_FDMOD_Pos: u32 = 30;
pub const USB_OTG_GUSBCFG_FDMOD_Msk: u32 = 1073741824;
pub const USB_OTG_GUSBCFG_FDMOD: u32 = 1073741824;
pub const USB_OTG_GUSBCFG_CTXPKT_Pos: u32 = 31;
pub const USB_OTG_GUSBCFG_CTXPKT_Msk: u32 = 2147483648;
pub const USB_OTG_GUSBCFG_CTXPKT: u32 = 2147483648;
pub const USB_OTG_GRSTCTL_CSRST_Pos: u32 = 0;
pub const USB_OTG_GRSTCTL_CSRST_Msk: u32 = 1;
pub const USB_OTG_GRSTCTL_CSRST: u32 = 1;
pub const USB_OTG_GRSTCTL_HSRST_Pos: u32 = 1;
pub const USB_OTG_GRSTCTL_HSRST_Msk: u32 = 2;
pub const USB_OTG_GRSTCTL_HSRST: u32 = 2;
pub const USB_OTG_GRSTCTL_FCRST_Pos: u32 = 2;
pub const USB_OTG_GRSTCTL_FCRST_Msk: u32 = 4;
pub const USB_OTG_GRSTCTL_FCRST: u32 = 4;
pub const USB_OTG_GRSTCTL_RXFFLSH_Pos: u32 = 4;
pub const USB_OTG_GRSTCTL_RXFFLSH_Msk: u32 = 16;
pub const USB_OTG_GRSTCTL_RXFFLSH: u32 = 16;
pub const USB_OTG_GRSTCTL_TXFFLSH_Pos: u32 = 5;
pub const USB_OTG_GRSTCTL_TXFFLSH_Msk: u32 = 32;
pub const USB_OTG_GRSTCTL_TXFFLSH: u32 = 32;
pub const USB_OTG_GRSTCTL_TXFNUM_Pos: u32 = 6;
pub const USB_OTG_GRSTCTL_TXFNUM_Msk: u32 = 1984;
pub const USB_OTG_GRSTCTL_TXFNUM: u32 = 1984;
pub const USB_OTG_GRSTCTL_TXFNUM_0: u32 = 64;
pub const USB_OTG_GRSTCTL_TXFNUM_1: u32 = 128;
pub const USB_OTG_GRSTCTL_TXFNUM_2: u32 = 256;
pub const USB_OTG_GRSTCTL_TXFNUM_3: u32 = 512;
pub const USB_OTG_GRSTCTL_TXFNUM_4: u32 = 1024;
pub const USB_OTG_GRSTCTL_DMAREQ_Pos: u32 = 30;
pub const USB_OTG_GRSTCTL_DMAREQ_Msk: u32 = 1073741824;
pub const USB_OTG_GRSTCTL_DMAREQ: u32 = 1073741824;
pub const USB_OTG_GRSTCTL_AHBIDL_Pos: u32 = 31;
pub const USB_OTG_GRSTCTL_AHBIDL_Msk: u32 = 2147483648;
pub const USB_OTG_GRSTCTL_AHBIDL: u32 = 2147483648;
pub const USB_OTG_DIEPMSK_XFRCM_Pos: u32 = 0;
pub const USB_OTG_DIEPMSK_XFRCM_Msk: u32 = 1;
pub const USB_OTG_DIEPMSK_XFRCM: u32 = 1;
pub const USB_OTG_DIEPMSK_EPDM_Pos: u32 = 1;
pub const USB_OTG_DIEPMSK_EPDM_Msk: u32 = 2;
pub const USB_OTG_DIEPMSK_EPDM: u32 = 2;
pub const USB_OTG_DIEPMSK_TOM_Pos: u32 = 3;
pub const USB_OTG_DIEPMSK_TOM_Msk: u32 = 8;
pub const USB_OTG_DIEPMSK_TOM: u32 = 8;
pub const USB_OTG_DIEPMSK_ITTXFEMSK_Pos: u32 = 4;
pub const USB_OTG_DIEPMSK_ITTXFEMSK_Msk: u32 = 16;
pub const USB_OTG_DIEPMSK_ITTXFEMSK: u32 = 16;
pub const USB_OTG_DIEPMSK_INEPNMM_Pos: u32 = 5;
pub const USB_OTG_DIEPMSK_INEPNMM_Msk: u32 = 32;
pub const USB_OTG_DIEPMSK_INEPNMM: u32 = 32;
pub const USB_OTG_DIEPMSK_INEPNEM_Pos: u32 = 6;
pub const USB_OTG_DIEPMSK_INEPNEM_Msk: u32 = 64;
pub const USB_OTG_DIEPMSK_INEPNEM: u32 = 64;
pub const USB_OTG_DIEPMSK_TXFURM_Pos: u32 = 8;
pub const USB_OTG_DIEPMSK_TXFURM_Msk: u32 = 256;
pub const USB_OTG_DIEPMSK_TXFURM: u32 = 256;
pub const USB_OTG_DIEPMSK_BIM_Pos: u32 = 9;
pub const USB_OTG_DIEPMSK_BIM_Msk: u32 = 512;
pub const USB_OTG_DIEPMSK_BIM: u32 = 512;
pub const USB_OTG_HPTXSTS_PTXFSAVL_Pos: u32 = 0;
pub const USB_OTG_HPTXSTS_PTXFSAVL_Msk: u32 = 65535;
pub const USB_OTG_HPTXSTS_PTXFSAVL: u32 = 65535;
pub const USB_OTG_HPTXSTS_PTXQSAV_Pos: u32 = 16;
pub const USB_OTG_HPTXSTS_PTXQSAV_Msk: u32 = 16711680;
pub const USB_OTG_HPTXSTS_PTXQSAV: u32 = 16711680;
pub const USB_OTG_HPTXSTS_PTXQSAV_0: u32 = 65536;
pub const USB_OTG_HPTXSTS_PTXQSAV_1: u32 = 131072;
pub const USB_OTG_HPTXSTS_PTXQSAV_2: u32 = 262144;
pub const USB_OTG_HPTXSTS_PTXQSAV_3: u32 = 524288;
pub const USB_OTG_HPTXSTS_PTXQSAV_4: u32 = 1048576;
pub const USB_OTG_HPTXSTS_PTXQSAV_5: u32 = 2097152;
pub const USB_OTG_HPTXSTS_PTXQSAV_6: u32 = 4194304;
pub const USB_OTG_HPTXSTS_PTXQSAV_7: u32 = 8388608;
pub const USB_OTG_HPTXSTS_PTXQTOP_Pos: u32 = 24;
pub const USB_OTG_HPTXSTS_PTXQTOP_Msk: u32 = 4278190080;
pub const USB_OTG_HPTXSTS_PTXQTOP: u32 = 4278190080;
pub const USB_OTG_HPTXSTS_PTXQTOP_0: u32 = 16777216;
pub const USB_OTG_HPTXSTS_PTXQTOP_1: u32 = 33554432;
pub const USB_OTG_HPTXSTS_PTXQTOP_2: u32 = 67108864;
pub const USB_OTG_HPTXSTS_PTXQTOP_3: u32 = 134217728;
pub const USB_OTG_HPTXSTS_PTXQTOP_4: u32 = 268435456;
pub const USB_OTG_HPTXSTS_PTXQTOP_5: u32 = 536870912;
pub const USB_OTG_HPTXSTS_PTXQTOP_6: u32 = 1073741824;
pub const USB_OTG_HPTXSTS_PTXQTOP_7: u32 = 2147483648;
pub const USB_OTG_HAINT_HAINT_Pos: u32 = 0;
pub const USB_OTG_HAINT_HAINT_Msk: u32 = 65535;
pub const USB_OTG_HAINT_HAINT: u32 = 65535;
pub const USB_OTG_DOEPMSK_XFRCM_Pos: u32 = 0;
pub const USB_OTG_DOEPMSK_XFRCM_Msk: u32 = 1;
pub const USB_OTG_DOEPMSK_XFRCM: u32 = 1;
pub const USB_OTG_DOEPMSK_EPDM_Pos: u32 = 1;
pub const USB_OTG_DOEPMSK_EPDM_Msk: u32 = 2;
pub const USB_OTG_DOEPMSK_EPDM: u32 = 2;
pub const USB_OTG_DOEPMSK_STUPM_Pos: u32 = 3;
pub const USB_OTG_DOEPMSK_STUPM_Msk: u32 = 8;
pub const USB_OTG_DOEPMSK_STUPM: u32 = 8;
pub const USB_OTG_DOEPMSK_OTEPDM_Pos: u32 = 4;
pub const USB_OTG_DOEPMSK_OTEPDM_Msk: u32 = 16;
pub const USB_OTG_DOEPMSK_OTEPDM: u32 = 16;
pub const USB_OTG_DOEPMSK_B2BSTUP_Pos: u32 = 6;
pub const USB_OTG_DOEPMSK_B2BSTUP_Msk: u32 = 64;
pub const USB_OTG_DOEPMSK_B2BSTUP: u32 = 64;
pub const USB_OTG_DOEPMSK_OPEM_Pos: u32 = 8;
pub const USB_OTG_DOEPMSK_OPEM_Msk: u32 = 256;
pub const USB_OTG_DOEPMSK_OPEM: u32 = 256;
pub const USB_OTG_DOEPMSK_BOIM_Pos: u32 = 9;
pub const USB_OTG_DOEPMSK_BOIM_Msk: u32 = 512;
pub const USB_OTG_DOEPMSK_BOIM: u32 = 512;
pub const USB_OTG_GINTSTS_CMOD_Pos: u32 = 0;
pub const USB_OTG_GINTSTS_CMOD_Msk: u32 = 1;
pub const USB_OTG_GINTSTS_CMOD: u32 = 1;
pub const USB_OTG_GINTSTS_MMIS_Pos: u32 = 1;
pub const USB_OTG_GINTSTS_MMIS_Msk: u32 = 2;
pub const USB_OTG_GINTSTS_MMIS: u32 = 2;
pub const USB_OTG_GINTSTS_OTGINT_Pos: u32 = 2;
pub const USB_OTG_GINTSTS_OTGINT_Msk: u32 = 4;
pub const USB_OTG_GINTSTS_OTGINT: u32 = 4;
pub const USB_OTG_GINTSTS_SOF_Pos: u32 = 3;
pub const USB_OTG_GINTSTS_SOF_Msk: u32 = 8;
pub const USB_OTG_GINTSTS_SOF: u32 = 8;
pub const USB_OTG_GINTSTS_RXFLVL_Pos: u32 = 4;
pub const USB_OTG_GINTSTS_RXFLVL_Msk: u32 = 16;
pub const USB_OTG_GINTSTS_RXFLVL: u32 = 16;
pub const USB_OTG_GINTSTS_NPTXFE_Pos: u32 = 5;
pub const USB_OTG_GINTSTS_NPTXFE_Msk: u32 = 32;
pub const USB_OTG_GINTSTS_NPTXFE: u32 = 32;
pub const USB_OTG_GINTSTS_GINAKEFF_Pos: u32 = 6;
pub const USB_OTG_GINTSTS_GINAKEFF_Msk: u32 = 64;
pub const USB_OTG_GINTSTS_GINAKEFF: u32 = 64;
pub const USB_OTG_GINTSTS_BOUTNAKEFF_Pos: u32 = 7;
pub const USB_OTG_GINTSTS_BOUTNAKEFF_Msk: u32 = 128;
pub const USB_OTG_GINTSTS_BOUTNAKEFF: u32 = 128;
pub const USB_OTG_GINTSTS_ESUSP_Pos: u32 = 10;
pub const USB_OTG_GINTSTS_ESUSP_Msk: u32 = 1024;
pub const USB_OTG_GINTSTS_ESUSP: u32 = 1024;
pub const USB_OTG_GINTSTS_USBSUSP_Pos: u32 = 11;
pub const USB_OTG_GINTSTS_USBSUSP_Msk: u32 = 2048;
pub const USB_OTG_GINTSTS_USBSUSP: u32 = 2048;
pub const USB_OTG_GINTSTS_USBRST_Pos: u32 = 12;
pub const USB_OTG_GINTSTS_USBRST_Msk: u32 = 4096;
pub const USB_OTG_GINTSTS_USBRST: u32 = 4096;
pub const USB_OTG_GINTSTS_ENUMDNE_Pos: u32 = 13;
pub const USB_OTG_GINTSTS_ENUMDNE_Msk: u32 = 8192;
pub const USB_OTG_GINTSTS_ENUMDNE: u32 = 8192;
pub const USB_OTG_GINTSTS_ISOODRP_Pos: u32 = 14;
pub const USB_OTG_GINTSTS_ISOODRP_Msk: u32 = 16384;
pub const USB_OTG_GINTSTS_ISOODRP: u32 = 16384;
pub const USB_OTG_GINTSTS_EOPF_Pos: u32 = 15;
pub const USB_OTG_GINTSTS_EOPF_Msk: u32 = 32768;
pub const USB_OTG_GINTSTS_EOPF: u32 = 32768;
pub const USB_OTG_GINTSTS_IEPINT_Pos: u32 = 18;
pub const USB_OTG_GINTSTS_IEPINT_Msk: u32 = 262144;
pub const USB_OTG_GINTSTS_IEPINT: u32 = 262144;
pub const USB_OTG_GINTSTS_OEPINT_Pos: u32 = 19;
pub const USB_OTG_GINTSTS_OEPINT_Msk: u32 = 524288;
pub const USB_OTG_GINTSTS_OEPINT: u32 = 524288;
pub const USB_OTG_GINTSTS_IISOIXFR_Pos: u32 = 20;
pub const USB_OTG_GINTSTS_IISOIXFR_Msk: u32 = 1048576;
pub const USB_OTG_GINTSTS_IISOIXFR: u32 = 1048576;
pub const USB_OTG_GINTSTS_PXFR_INCOMPISOOUT_Pos: u32 = 21;
pub const USB_OTG_GINTSTS_PXFR_INCOMPISOOUT_Msk: u32 = 2097152;
pub const USB_OTG_GINTSTS_PXFR_INCOMPISOOUT: u32 = 2097152;
pub const USB_OTG_GINTSTS_DATAFSUSP_Pos: u32 = 22;
pub const USB_OTG_GINTSTS_DATAFSUSP_Msk: u32 = 4194304;
pub const USB_OTG_GINTSTS_DATAFSUSP: u32 = 4194304;
pub const USB_OTG_GINTSTS_HPRTINT_Pos: u32 = 24;
pub const USB_OTG_GINTSTS_HPRTINT_Msk: u32 = 16777216;
pub const USB_OTG_GINTSTS_HPRTINT: u32 = 16777216;
pub const USB_OTG_GINTSTS_HCINT_Pos: u32 = 25;
pub const USB_OTG_GINTSTS_HCINT_Msk: u32 = 33554432;
pub const USB_OTG_GINTSTS_HCINT: u32 = 33554432;
pub const USB_OTG_GINTSTS_PTXFE_Pos: u32 = 26;
pub const USB_OTG_GINTSTS_PTXFE_Msk: u32 = 67108864;
pub const USB_OTG_GINTSTS_PTXFE: u32 = 67108864;
pub const USB_OTG_GINTSTS_CIDSCHG_Pos: u32 = 28;
pub const USB_OTG_GINTSTS_CIDSCHG_Msk: u32 = 268435456;
pub const USB_OTG_GINTSTS_CIDSCHG: u32 = 268435456;
pub const USB_OTG_GINTSTS_DISCINT_Pos: u32 = 29;
pub const USB_OTG_GINTSTS_DISCINT_Msk: u32 = 536870912;
pub const USB_OTG_GINTSTS_DISCINT: u32 = 536870912;
pub const USB_OTG_GINTSTS_SRQINT_Pos: u32 = 30;
pub const USB_OTG_GINTSTS_SRQINT_Msk: u32 = 1073741824;
pub const USB_OTG_GINTSTS_SRQINT: u32 = 1073741824;
pub const USB_OTG_GINTSTS_WKUINT_Pos: u32 = 31;
pub const USB_OTG_GINTSTS_WKUINT_Msk: u32 = 2147483648;
pub const USB_OTG_GINTSTS_WKUINT: u32 = 2147483648;
pub const USB_OTG_GINTMSK_MMISM_Pos: u32 = 1;
pub const USB_OTG_GINTMSK_MMISM_Msk: u32 = 2;
pub const USB_OTG_GINTMSK_MMISM: u32 = 2;
pub const USB_OTG_GINTMSK_OTGINT_Pos: u32 = 2;
pub const USB_OTG_GINTMSK_OTGINT_Msk: u32 = 4;
pub const USB_OTG_GINTMSK_OTGINT: u32 = 4;
pub const USB_OTG_GINTMSK_SOFM_Pos: u32 = 3;
pub const USB_OTG_GINTMSK_SOFM_Msk: u32 = 8;
pub const USB_OTG_GINTMSK_SOFM: u32 = 8;
pub const USB_OTG_GINTMSK_RXFLVLM_Pos: u32 = 4;
pub const USB_OTG_GINTMSK_RXFLVLM_Msk: u32 = 16;
pub const USB_OTG_GINTMSK_RXFLVLM: u32 = 16;
pub const USB_OTG_GINTMSK_NPTXFEM_Pos: u32 = 5;
pub const USB_OTG_GINTMSK_NPTXFEM_Msk: u32 = 32;
pub const USB_OTG_GINTMSK_NPTXFEM: u32 = 32;
pub const USB_OTG_GINTMSK_GINAKEFFM_Pos: u32 = 6;
pub const USB_OTG_GINTMSK_GINAKEFFM_Msk: u32 = 64;
pub const USB_OTG_GINTMSK_GINAKEFFM: u32 = 64;
pub const USB_OTG_GINTMSK_GONAKEFFM_Pos: u32 = 7;
pub const USB_OTG_GINTMSK_GONAKEFFM_Msk: u32 = 128;
pub const USB_OTG_GINTMSK_GONAKEFFM: u32 = 128;
pub const USB_OTG_GINTMSK_ESUSPM_Pos: u32 = 10;
pub const USB_OTG_GINTMSK_ESUSPM_Msk: u32 = 1024;
pub const USB_OTG_GINTMSK_ESUSPM: u32 = 1024;
pub const USB_OTG_GINTMSK_USBSUSPM_Pos: u32 = 11;
pub const USB_OTG_GINTMSK_USBSUSPM_Msk: u32 = 2048;
pub const USB_OTG_GINTMSK_USBSUSPM: u32 = 2048;
pub const USB_OTG_GINTMSK_USBRST_Pos: u32 = 12;
pub const USB_OTG_GINTMSK_USBRST_Msk: u32 = 4096;
pub const USB_OTG_GINTMSK_USBRST: u32 = 4096;
pub const USB_OTG_GINTMSK_ENUMDNEM_Pos: u32 = 13;
pub const USB_OTG_GINTMSK_ENUMDNEM_Msk: u32 = 8192;
pub const USB_OTG_GINTMSK_ENUMDNEM: u32 = 8192;
pub const USB_OTG_GINTMSK_ISOODRPM_Pos: u32 = 14;
pub const USB_OTG_GINTMSK_ISOODRPM_Msk: u32 = 16384;
pub const USB_OTG_GINTMSK_ISOODRPM: u32 = 16384;
pub const USB_OTG_GINTMSK_EOPFM_Pos: u32 = 15;
pub const USB_OTG_GINTMSK_EOPFM_Msk: u32 = 32768;
pub const USB_OTG_GINTMSK_EOPFM: u32 = 32768;
pub const USB_OTG_GINTMSK_EPMISM_Pos: u32 = 17;
pub const USB_OTG_GINTMSK_EPMISM_Msk: u32 = 131072;
pub const USB_OTG_GINTMSK_EPMISM: u32 = 131072;
pub const USB_OTG_GINTMSK_IEPINT_Pos: u32 = 18;
pub const USB_OTG_GINTMSK_IEPINT_Msk: u32 = 262144;
pub const USB_OTG_GINTMSK_IEPINT: u32 = 262144;
pub const USB_OTG_GINTMSK_OEPINT_Pos: u32 = 19;
pub const USB_OTG_GINTMSK_OEPINT_Msk: u32 = 524288;
pub const USB_OTG_GINTMSK_OEPINT: u32 = 524288;
pub const USB_OTG_GINTMSK_IISOIXFRM_Pos: u32 = 20;
pub const USB_OTG_GINTMSK_IISOIXFRM_Msk: u32 = 1048576;
pub const USB_OTG_GINTMSK_IISOIXFRM: u32 = 1048576;
pub const USB_OTG_GINTMSK_PXFRM_IISOOXFRM_Pos: u32 = 21;
pub const USB_OTG_GINTMSK_PXFRM_IISOOXFRM_Msk: u32 = 2097152;
pub const USB_OTG_GINTMSK_PXFRM_IISOOXFRM: u32 = 2097152;
pub const USB_OTG_GINTMSK_FSUSPM_Pos: u32 = 22;
pub const USB_OTG_GINTMSK_FSUSPM_Msk: u32 = 4194304;
pub const USB_OTG_GINTMSK_FSUSPM: u32 = 4194304;
pub const USB_OTG_GINTMSK_PRTIM_Pos: u32 = 24;
pub const USB_OTG_GINTMSK_PRTIM_Msk: u32 = 16777216;
pub const USB_OTG_GINTMSK_PRTIM: u32 = 16777216;
pub const USB_OTG_GINTMSK_HCIM_Pos: u32 = 25;
pub const USB_OTG_GINTMSK_HCIM_Msk: u32 = 33554432;
pub const USB_OTG_GINTMSK_HCIM: u32 = 33554432;
pub const USB_OTG_GINTMSK_PTXFEM_Pos: u32 = 26;
pub const USB_OTG_GINTMSK_PTXFEM_Msk: u32 = 67108864;
pub const USB_OTG_GINTMSK_PTXFEM: u32 = 67108864;
pub const USB_OTG_GINTMSK_CIDSCHGM_Pos: u32 = 28;
pub const USB_OTG_GINTMSK_CIDSCHGM_Msk: u32 = 268435456;
pub const USB_OTG_GINTMSK_CIDSCHGM: u32 = 268435456;
pub const USB_OTG_GINTMSK_DISCINT_Pos: u32 = 29;
pub const USB_OTG_GINTMSK_DISCINT_Msk: u32 = 536870912;
pub const USB_OTG_GINTMSK_DISCINT: u32 = 536870912;
pub const USB_OTG_GINTMSK_SRQIM_Pos: u32 = 30;
pub const USB_OTG_GINTMSK_SRQIM_Msk: u32 = 1073741824;
pub const USB_OTG_GINTMSK_SRQIM: u32 = 1073741824;
pub const USB_OTG_GINTMSK_WUIM_Pos: u32 = 31;
pub const USB_OTG_GINTMSK_WUIM_Msk: u32 = 2147483648;
pub const USB_OTG_GINTMSK_WUIM: u32 = 2147483648;
pub const USB_OTG_DAINT_IEPINT_Pos: u32 = 0;
pub const USB_OTG_DAINT_IEPINT_Msk: u32 = 65535;
pub const USB_OTG_DAINT_IEPINT: u32 = 65535;
pub const USB_OTG_DAINT_OEPINT_Pos: u32 = 16;
pub const USB_OTG_DAINT_OEPINT_Msk: u32 = 4294901760;
pub const USB_OTG_DAINT_OEPINT: u32 = 4294901760;
pub const USB_OTG_HAINTMSK_HAINTM_Pos: u32 = 0;
pub const USB_OTG_HAINTMSK_HAINTM_Msk: u32 = 65535;
pub const USB_OTG_HAINTMSK_HAINTM: u32 = 65535;
pub const USB_OTG_GRXSTSP_EPNUM_Pos: u32 = 0;
pub const USB_OTG_GRXSTSP_EPNUM_Msk: u32 = 15;
pub const USB_OTG_GRXSTSP_EPNUM: u32 = 15;
pub const USB_OTG_GRXSTSP_BCNT_Pos: u32 = 4;
pub const USB_OTG_GRXSTSP_BCNT_Msk: u32 = 32752;
pub const USB_OTG_GRXSTSP_BCNT: u32 = 32752;
pub const USB_OTG_GRXSTSP_DPID_Pos: u32 = 15;
pub const USB_OTG_GRXSTSP_DPID_Msk: u32 = 98304;
pub const USB_OTG_GRXSTSP_DPID: u32 = 98304;
pub const USB_OTG_GRXSTSP_PKTSTS_Pos: u32 = 17;
pub const USB_OTG_GRXSTSP_PKTSTS_Msk: u32 = 1966080;
pub const USB_OTG_GRXSTSP_PKTSTS: u32 = 1966080;
pub const USB_OTG_DAINTMSK_IEPM_Pos: u32 = 0;
pub const USB_OTG_DAINTMSK_IEPM_Msk: u32 = 65535;
pub const USB_OTG_DAINTMSK_IEPM: u32 = 65535;
pub const USB_OTG_DAINTMSK_OEPM_Pos: u32 = 16;
pub const USB_OTG_DAINTMSK_OEPM_Msk: u32 = 4294901760;
pub const USB_OTG_DAINTMSK_OEPM: u32 = 4294901760;
pub const USB_OTG_CHNUM_Pos: u32 = 0;
pub const USB_OTG_CHNUM_Msk: u32 = 15;
pub const USB_OTG_CHNUM: u32 = 15;
pub const USB_OTG_CHNUM_0: u32 = 1;
pub const USB_OTG_CHNUM_1: u32 = 2;
pub const USB_OTG_CHNUM_2: u32 = 4;
pub const USB_OTG_CHNUM_3: u32 = 8;
pub const USB_OTG_BCNT_Pos: u32 = 4;
pub const USB_OTG_BCNT_Msk: u32 = 32752;
pub const USB_OTG_BCNT: u32 = 32752;
pub const USB_OTG_DPID_Pos: u32 = 15;
pub const USB_OTG_DPID_Msk: u32 = 98304;
pub const USB_OTG_DPID: u32 = 98304;
pub const USB_OTG_DPID_0: u32 = 32768;
pub const USB_OTG_DPID_1: u32 = 65536;
pub const USB_OTG_PKTSTS_Pos: u32 = 17;
pub const USB_OTG_PKTSTS_Msk: u32 = 1966080;
pub const USB_OTG_PKTSTS: u32 = 1966080;
pub const USB_OTG_PKTSTS_0: u32 = 131072;
pub const USB_OTG_PKTSTS_1: u32 = 262144;
pub const USB_OTG_PKTSTS_2: u32 = 524288;
pub const USB_OTG_PKTSTS_3: u32 = 1048576;
pub const USB_OTG_EPNUM_Pos: u32 = 0;
pub const USB_OTG_EPNUM_Msk: u32 = 15;
pub const USB_OTG_EPNUM: u32 = 15;
pub const USB_OTG_EPNUM_0: u32 = 1;
pub const USB_OTG_EPNUM_1: u32 = 2;
pub const USB_OTG_EPNUM_2: u32 = 4;
pub const USB_OTG_EPNUM_3: u32 = 8;
pub const USB_OTG_FRMNUM_Pos: u32 = 21;
pub const USB_OTG_FRMNUM_Msk: u32 = 31457280;
pub const USB_OTG_FRMNUM: u32 = 31457280;
pub const USB_OTG_FRMNUM_0: u32 = 2097152;
pub const USB_OTG_FRMNUM_1: u32 = 4194304;
pub const USB_OTG_FRMNUM_2: u32 = 8388608;
pub const USB_OTG_FRMNUM_3: u32 = 16777216;
pub const USB_OTG_GRXFSIZ_RXFD_Pos: u32 = 0;
pub const USB_OTG_GRXFSIZ_RXFD_Msk: u32 = 65535;
pub const USB_OTG_GRXFSIZ_RXFD: u32 = 65535;
pub const USB_OTG_DVBUSDIS_VBUSDT_Pos: u32 = 0;
pub const USB_OTG_DVBUSDIS_VBUSDT_Msk: u32 = 65535;
pub const USB_OTG_DVBUSDIS_VBUSDT: u32 = 65535;
pub const USB_OTG_NPTXFSA_Pos: u32 = 0;
pub const USB_OTG_NPTXFSA_Msk: u32 = 65535;
pub const USB_OTG_NPTXFSA: u32 = 65535;
pub const USB_OTG_NPTXFD_Pos: u32 = 16;
pub const USB_OTG_NPTXFD_Msk: u32 = 4294901760;
pub const USB_OTG_NPTXFD: u32 = 4294901760;
pub const USB_OTG_TX0FSA_Pos: u32 = 0;
pub const USB_OTG_TX0FSA_Msk: u32 = 65535;
pub const USB_OTG_TX0FSA: u32 = 65535;
pub const USB_OTG_TX0FD_Pos: u32 = 16;
pub const USB_OTG_TX0FD_Msk: u32 = 4294901760;
pub const USB_OTG_TX0FD: u32 = 4294901760;
pub const USB_OTG_DVBUSPULSE_DVBUSP_Pos: u32 = 0;
pub const USB_OTG_DVBUSPULSE_DVBUSP_Msk: u32 = 4095;
pub const USB_OTG_DVBUSPULSE_DVBUSP: u32 = 4095;
pub const USB_OTG_GNPTXSTS_NPTXFSAV_Pos: u32 = 0;
pub const USB_OTG_GNPTXSTS_NPTXFSAV_Msk: u32 = 65535;
pub const USB_OTG_GNPTXSTS_NPTXFSAV: u32 = 65535;
pub const USB_OTG_GNPTXSTS_NPTQXSAV_Pos: u32 = 16;
pub const USB_OTG_GNPTXSTS_NPTQXSAV_Msk: u32 = 16711680;
pub const USB_OTG_GNPTXSTS_NPTQXSAV: u32 = 16711680;
pub const USB_OTG_GNPTXSTS_NPTQXSAV_0: u32 = 65536;
pub const USB_OTG_GNPTXSTS_NPTQXSAV_1: u32 = 131072;
pub const USB_OTG_GNPTXSTS_NPTQXSAV_2: u32 = 262144;
pub const USB_OTG_GNPTXSTS_NPTQXSAV_3: u32 = 524288;
pub const USB_OTG_GNPTXSTS_NPTQXSAV_4: u32 = 1048576;
pub const USB_OTG_GNPTXSTS_NPTQXSAV_5: u32 = 2097152;
pub const USB_OTG_GNPTXSTS_NPTQXSAV_6: u32 = 4194304;
pub const USB_OTG_GNPTXSTS_NPTQXSAV_7: u32 = 8388608;
pub const USB_OTG_GNPTXSTS_NPTXQTOP_Pos: u32 = 24;
pub const USB_OTG_GNPTXSTS_NPTXQTOP_Msk: u32 = 2130706432;
pub const USB_OTG_GNPTXSTS_NPTXQTOP: u32 = 2130706432;
pub const USB_OTG_GNPTXSTS_NPTXQTOP_0: u32 = 16777216;
pub const USB_OTG_GNPTXSTS_NPTXQTOP_1: u32 = 33554432;
pub const USB_OTG_GNPTXSTS_NPTXQTOP_2: u32 = 67108864;
pub const USB_OTG_GNPTXSTS_NPTXQTOP_3: u32 = 134217728;
pub const USB_OTG_GNPTXSTS_NPTXQTOP_4: u32 = 268435456;
pub const USB_OTG_GNPTXSTS_NPTXQTOP_5: u32 = 536870912;
pub const USB_OTG_GNPTXSTS_NPTXQTOP_6: u32 = 1073741824;
pub const USB_OTG_DTHRCTL_NONISOTHREN_Pos: u32 = 0;
pub const USB_OTG_DTHRCTL_NONISOTHREN_Msk: u32 = 1;
pub const USB_OTG_DTHRCTL_NONISOTHREN: u32 = 1;
pub const USB_OTG_DTHRCTL_ISOTHREN_Pos: u32 = 1;
pub const USB_OTG_DTHRCTL_ISOTHREN_Msk: u32 = 2;
pub const USB_OTG_DTHRCTL_ISOTHREN: u32 = 2;
pub const USB_OTG_DTHRCTL_TXTHRLEN_Pos: u32 = 2;
pub const USB_OTG_DTHRCTL_TXTHRLEN_Msk: u32 = 2044;
pub const USB_OTG_DTHRCTL_TXTHRLEN: u32 = 2044;
pub const USB_OTG_DTHRCTL_TXTHRLEN_0: u32 = 4;
pub const USB_OTG_DTHRCTL_TXTHRLEN_1: u32 = 8;
pub const USB_OTG_DTHRCTL_TXTHRLEN_2: u32 = 16;
pub const USB_OTG_DTHRCTL_TXTHRLEN_3: u32 = 32;
pub const USB_OTG_DTHRCTL_TXTHRLEN_4: u32 = 64;
pub const USB_OTG_DTHRCTL_TXTHRLEN_5: u32 = 128;
pub const USB_OTG_DTHRCTL_TXTHRLEN_6: u32 = 256;
pub const USB_OTG_DTHRCTL_TXTHRLEN_7: u32 = 512;
pub const USB_OTG_DTHRCTL_TXTHRLEN_8: u32 = 1024;
pub const USB_OTG_DTHRCTL_RXTHREN_Pos: u32 = 16;
pub const USB_OTG_DTHRCTL_RXTHREN_Msk: u32 = 65536;
pub const USB_OTG_DTHRCTL_RXTHREN: u32 = 65536;
pub const USB_OTG_DTHRCTL_RXTHRLEN_Pos: u32 = 17;
pub const USB_OTG_DTHRCTL_RXTHRLEN_Msk: u32 = 66977792;
pub const USB_OTG_DTHRCTL_RXTHRLEN: u32 = 66977792;
pub const USB_OTG_DTHRCTL_RXTHRLEN_0: u32 = 131072;
pub const USB_OTG_DTHRCTL_RXTHRLEN_1: u32 = 262144;
pub const USB_OTG_DTHRCTL_RXTHRLEN_2: u32 = 524288;
pub const USB_OTG_DTHRCTL_RXTHRLEN_3: u32 = 1048576;
pub const USB_OTG_DTHRCTL_RXTHRLEN_4: u32 = 2097152;
pub const USB_OTG_DTHRCTL_RXTHRLEN_5: u32 = 4194304;
pub const USB_OTG_DTHRCTL_RXTHRLEN_6: u32 = 8388608;
pub const USB_OTG_DTHRCTL_RXTHRLEN_7: u32 = 16777216;
pub const USB_OTG_DTHRCTL_RXTHRLEN_8: u32 = 33554432;
pub const USB_OTG_DTHRCTL_ARPEN_Pos: u32 = 27;
pub const USB_OTG_DTHRCTL_ARPEN_Msk: u32 = 134217728;
pub const USB_OTG_DTHRCTL_ARPEN: u32 = 134217728;
pub const USB_OTG_DIEPEMPMSK_INEPTXFEM_Pos: u32 = 0;
pub const USB_OTG_DIEPEMPMSK_INEPTXFEM_Msk: u32 = 65535;
pub const USB_OTG_DIEPEMPMSK_INEPTXFEM: u32 = 65535;
pub const USB_OTG_DEACHINT_IEP1INT_Pos: u32 = 1;
pub const USB_OTG_DEACHINT_IEP1INT_Msk: u32 = 2;
pub const USB_OTG_DEACHINT_IEP1INT: u32 = 2;
pub const USB_OTG_DEACHINT_OEP1INT_Pos: u32 = 17;
pub const USB_OTG_DEACHINT_OEP1INT_Msk: u32 = 131072;
pub const USB_OTG_DEACHINT_OEP1INT: u32 = 131072;
pub const USB_OTG_GCCFG_PWRDWN_Pos: u32 = 16;
pub const USB_OTG_GCCFG_PWRDWN_Msk: u32 = 65536;
pub const USB_OTG_GCCFG_PWRDWN: u32 = 65536;
pub const USB_OTG_GCCFG_I2CPADEN_Pos: u32 = 17;
pub const USB_OTG_GCCFG_I2CPADEN_Msk: u32 = 131072;
pub const USB_OTG_GCCFG_I2CPADEN: u32 = 131072;
pub const USB_OTG_GCCFG_VBUSASEN_Pos: u32 = 18;
pub const USB_OTG_GCCFG_VBUSASEN_Msk: u32 = 262144;
pub const USB_OTG_GCCFG_VBUSASEN: u32 = 262144;
pub const USB_OTG_GCCFG_VBUSBSEN_Pos: u32 = 19;
pub const USB_OTG_GCCFG_VBUSBSEN_Msk: u32 = 524288;
pub const USB_OTG_GCCFG_VBUSBSEN: u32 = 524288;
pub const USB_OTG_GCCFG_SOFOUTEN_Pos: u32 = 20;
pub const USB_OTG_GCCFG_SOFOUTEN_Msk: u32 = 1048576;
pub const USB_OTG_GCCFG_SOFOUTEN: u32 = 1048576;
pub const USB_OTG_GCCFG_NOVBUSSENS_Pos: u32 = 21;
pub const USB_OTG_GCCFG_NOVBUSSENS_Msk: u32 = 2097152;
pub const USB_OTG_GCCFG_NOVBUSSENS: u32 = 2097152;
pub const USB_OTG_DEACHINTMSK_IEP1INTM_Pos: u32 = 1;
pub const USB_OTG_DEACHINTMSK_IEP1INTM_Msk: u32 = 2;
pub const USB_OTG_DEACHINTMSK_IEP1INTM: u32 = 2;
pub const USB_OTG_DEACHINTMSK_OEP1INTM_Pos: u32 = 17;
pub const USB_OTG_DEACHINTMSK_OEP1INTM_Msk: u32 = 131072;
pub const USB_OTG_DEACHINTMSK_OEP1INTM: u32 = 131072;
pub const USB_OTG_CID_PRODUCT_ID_Pos: u32 = 0;
pub const USB_OTG_CID_PRODUCT_ID_Msk: u32 = 4294967295;
pub const USB_OTG_CID_PRODUCT_ID: u32 = 4294967295;
pub const USB_OTG_DIEPEACHMSK1_XFRCM_Pos: u32 = 0;
pub const USB_OTG_DIEPEACHMSK1_XFRCM_Msk: u32 = 1;
pub const USB_OTG_DIEPEACHMSK1_XFRCM: u32 = 1;
pub const USB_OTG_DIEPEACHMSK1_EPDM_Pos: u32 = 1;
pub const USB_OTG_DIEPEACHMSK1_EPDM_Msk: u32 = 2;
pub const USB_OTG_DIEPEACHMSK1_EPDM: u32 = 2;
pub const USB_OTG_DIEPEACHMSK1_TOM_Pos: u32 = 3;
pub const USB_OTG_DIEPEACHMSK1_TOM_Msk: u32 = 8;
pub const USB_OTG_DIEPEACHMSK1_TOM: u32 = 8;
pub const USB_OTG_DIEPEACHMSK1_ITTXFEMSK_Pos: u32 = 4;
pub const USB_OTG_DIEPEACHMSK1_ITTXFEMSK_Msk: u32 = 16;
pub const USB_OTG_DIEPEACHMSK1_ITTXFEMSK: u32 = 16;
pub const USB_OTG_DIEPEACHMSK1_INEPNMM_Pos: u32 = 5;
pub const USB_OTG_DIEPEACHMSK1_INEPNMM_Msk: u32 = 32;
pub const USB_OTG_DIEPEACHMSK1_INEPNMM: u32 = 32;
pub const USB_OTG_DIEPEACHMSK1_INEPNEM_Pos: u32 = 6;
pub const USB_OTG_DIEPEACHMSK1_INEPNEM_Msk: u32 = 64;
pub const USB_OTG_DIEPEACHMSK1_INEPNEM: u32 = 64;
pub const USB_OTG_DIEPEACHMSK1_TXFURM_Pos: u32 = 8;
pub const USB_OTG_DIEPEACHMSK1_TXFURM_Msk: u32 = 256;
pub const USB_OTG_DIEPEACHMSK1_TXFURM: u32 = 256;
pub const USB_OTG_DIEPEACHMSK1_BIM_Pos: u32 = 9;
pub const USB_OTG_DIEPEACHMSK1_BIM_Msk: u32 = 512;
pub const USB_OTG_DIEPEACHMSK1_BIM: u32 = 512;
pub const USB_OTG_DIEPEACHMSK1_NAKM_Pos: u32 = 13;
pub const USB_OTG_DIEPEACHMSK1_NAKM_Msk: u32 = 8192;
pub const USB_OTG_DIEPEACHMSK1_NAKM: u32 = 8192;
pub const USB_OTG_HPRT_PCSTS_Pos: u32 = 0;
pub const USB_OTG_HPRT_PCSTS_Msk: u32 = 1;
pub const USB_OTG_HPRT_PCSTS: u32 = 1;
pub const USB_OTG_HPRT_PCDET_Pos: u32 = 1;
pub const USB_OTG_HPRT_PCDET_Msk: u32 = 2;
pub const USB_OTG_HPRT_PCDET: u32 = 2;
pub const USB_OTG_HPRT_PENA_Pos: u32 = 2;
pub const USB_OTG_HPRT_PENA_Msk: u32 = 4;
pub const USB_OTG_HPRT_PENA: u32 = 4;
pub const USB_OTG_HPRT_PENCHNG_Pos: u32 = 3;
pub const USB_OTG_HPRT_PENCHNG_Msk: u32 = 8;
pub const USB_OTG_HPRT_PENCHNG: u32 = 8;
pub const USB_OTG_HPRT_POCA_Pos: u32 = 4;
pub const USB_OTG_HPRT_POCA_Msk: u32 = 16;
pub const USB_OTG_HPRT_POCA: u32 = 16;
pub const USB_OTG_HPRT_POCCHNG_Pos: u32 = 5;
pub const USB_OTG_HPRT_POCCHNG_Msk: u32 = 32;
pub const USB_OTG_HPRT_POCCHNG: u32 = 32;
pub const USB_OTG_HPRT_PRES_Pos: u32 = 6;
pub const USB_OTG_HPRT_PRES_Msk: u32 = 64;
pub const USB_OTG_HPRT_PRES: u32 = 64;
pub const USB_OTG_HPRT_PSUSP_Pos: u32 = 7;
pub const USB_OTG_HPRT_PSUSP_Msk: u32 = 128;
pub const USB_OTG_HPRT_PSUSP: u32 = 128;
pub const USB_OTG_HPRT_PRST_Pos: u32 = 8;
pub const USB_OTG_HPRT_PRST_Msk: u32 = 256;
pub const USB_OTG_HPRT_PRST: u32 = 256;
pub const USB_OTG_HPRT_PLSTS_Pos: u32 = 10;
pub const USB_OTG_HPRT_PLSTS_Msk: u32 = 3072;
pub const USB_OTG_HPRT_PLSTS: u32 = 3072;
pub const USB_OTG_HPRT_PLSTS_0: u32 = 1024;
pub const USB_OTG_HPRT_PLSTS_1: u32 = 2048;
pub const USB_OTG_HPRT_PPWR_Pos: u32 = 12;
pub const USB_OTG_HPRT_PPWR_Msk: u32 = 4096;
pub const USB_OTG_HPRT_PPWR: u32 = 4096;
pub const USB_OTG_HPRT_PTCTL_Pos: u32 = 13;
pub const USB_OTG_HPRT_PTCTL_Msk: u32 = 122880;
pub const USB_OTG_HPRT_PTCTL: u32 = 122880;
pub const USB_OTG_HPRT_PTCTL_0: u32 = 8192;
pub const USB_OTG_HPRT_PTCTL_1: u32 = 16384;
pub const USB_OTG_HPRT_PTCTL_2: u32 = 32768;
pub const USB_OTG_HPRT_PTCTL_3: u32 = 65536;
pub const USB_OTG_HPRT_PSPD_Pos: u32 = 17;
pub const USB_OTG_HPRT_PSPD_Msk: u32 = 393216;
pub const USB_OTG_HPRT_PSPD: u32 = 393216;
pub const USB_OTG_HPRT_PSPD_0: u32 = 131072;
pub const USB_OTG_HPRT_PSPD_1: u32 = 262144;
pub const USB_OTG_DOEPEACHMSK1_XFRCM_Pos: u32 = 0;
pub const USB_OTG_DOEPEACHMSK1_XFRCM_Msk: u32 = 1;
pub const USB_OTG_DOEPEACHMSK1_XFRCM: u32 = 1;
pub const USB_OTG_DOEPEACHMSK1_EPDM_Pos: u32 = 1;
pub const USB_OTG_DOEPEACHMSK1_EPDM_Msk: u32 = 2;
pub const USB_OTG_DOEPEACHMSK1_EPDM: u32 = 2;
pub const USB_OTG_DOEPEACHMSK1_TOM_Pos: u32 = 3;
pub const USB_OTG_DOEPEACHMSK1_TOM_Msk: u32 = 8;
pub const USB_OTG_DOEPEACHMSK1_TOM: u32 = 8;
pub const USB_OTG_DOEPEACHMSK1_ITTXFEMSK_Pos: u32 = 4;
pub const USB_OTG_DOEPEACHMSK1_ITTXFEMSK_Msk: u32 = 16;
pub const USB_OTG_DOEPEACHMSK1_ITTXFEMSK: u32 = 16;
pub const USB_OTG_DOEPEACHMSK1_INEPNMM_Pos: u32 = 5;
pub const USB_OTG_DOEPEACHMSK1_INEPNMM_Msk: u32 = 32;
pub const USB_OTG_DOEPEACHMSK1_INEPNMM: u32 = 32;
pub const USB_OTG_DOEPEACHMSK1_INEPNEM_Pos: u32 = 6;
pub const USB_OTG_DOEPEACHMSK1_INEPNEM_Msk: u32 = 64;
pub const USB_OTG_DOEPEACHMSK1_INEPNEM: u32 = 64;
pub const USB_OTG_DOEPEACHMSK1_TXFURM_Pos: u32 = 8;
pub const USB_OTG_DOEPEACHMSK1_TXFURM_Msk: u32 = 256;
pub const USB_OTG_DOEPEACHMSK1_TXFURM: u32 = 256;
pub const USB_OTG_DOEPEACHMSK1_BIM_Pos: u32 = 9;
pub const USB_OTG_DOEPEACHMSK1_BIM_Msk: u32 = 512;
pub const USB_OTG_DOEPEACHMSK1_BIM: u32 = 512;
pub const USB_OTG_DOEPEACHMSK1_BERRM_Pos: u32 = 12;
pub const USB_OTG_DOEPEACHMSK1_BERRM_Msk: u32 = 4096;
pub const USB_OTG_DOEPEACHMSK1_BERRM: u32 = 4096;
pub const USB_OTG_DOEPEACHMSK1_NAKM_Pos: u32 = 13;
pub const USB_OTG_DOEPEACHMSK1_NAKM_Msk: u32 = 8192;
pub const USB_OTG_DOEPEACHMSK1_NAKM: u32 = 8192;
pub const USB_OTG_DOEPEACHMSK1_NYETM_Pos: u32 = 14;
pub const USB_OTG_DOEPEACHMSK1_NYETM_Msk: u32 = 16384;
pub const USB_OTG_DOEPEACHMSK1_NYETM: u32 = 16384;
pub const USB_OTG_HPTXFSIZ_PTXSA_Pos: u32 = 0;
pub const USB_OTG_HPTXFSIZ_PTXSA_Msk: u32 = 65535;
pub const USB_OTG_HPTXFSIZ_PTXSA: u32 = 65535;
pub const USB_OTG_HPTXFSIZ_PTXFD_Pos: u32 = 16;
pub const USB_OTG_HPTXFSIZ_PTXFD_Msk: u32 = 4294901760;
pub const USB_OTG_HPTXFSIZ_PTXFD: u32 = 4294901760;
pub const USB_OTG_DIEPCTL_MPSIZ_Pos: u32 = 0;
pub const USB_OTG_DIEPCTL_MPSIZ_Msk: u32 = 2047;
pub const USB_OTG_DIEPCTL_MPSIZ: u32 = 2047;
pub const USB_OTG_DIEPCTL_USBAEP_Pos: u32 = 15;
pub const USB_OTG_DIEPCTL_USBAEP_Msk: u32 = 32768;
pub const USB_OTG_DIEPCTL_USBAEP: u32 = 32768;
pub const USB_OTG_DIEPCTL_EONUM_DPID_Pos: u32 = 16;
pub const USB_OTG_DIEPCTL_EONUM_DPID_Msk: u32 = 65536;
pub const USB_OTG_DIEPCTL_EONUM_DPID: u32 = 65536;
pub const USB_OTG_DIEPCTL_NAKSTS_Pos: u32 = 17;
pub const USB_OTG_DIEPCTL_NAKSTS_Msk: u32 = 131072;
pub const USB_OTG_DIEPCTL_NAKSTS: u32 = 131072;
pub const USB_OTG_DIEPCTL_EPTYP_Pos: u32 = 18;
pub const USB_OTG_DIEPCTL_EPTYP_Msk: u32 = 786432;
pub const USB_OTG_DIEPCTL_EPTYP: u32 = 786432;
pub const USB_OTG_DIEPCTL_EPTYP_0: u32 = 262144;
pub const USB_OTG_DIEPCTL_EPTYP_1: u32 = 524288;
pub const USB_OTG_DIEPCTL_STALL_Pos: u32 = 21;
pub const USB_OTG_DIEPCTL_STALL_Msk: u32 = 2097152;
pub const USB_OTG_DIEPCTL_STALL: u32 = 2097152;
pub const USB_OTG_DIEPCTL_TXFNUM_Pos: u32 = 22;
pub const USB_OTG_DIEPCTL_TXFNUM_Msk: u32 = 62914560;
pub const USB_OTG_DIEPCTL_TXFNUM: u32 = 62914560;
pub const USB_OTG_DIEPCTL_TXFNUM_0: u32 = 4194304;
pub const USB_OTG_DIEPCTL_TXFNUM_1: u32 = 8388608;
pub const USB_OTG_DIEPCTL_TXFNUM_2: u32 = 16777216;
pub const USB_OTG_DIEPCTL_TXFNUM_3: u32 = 33554432;
pub const USB_OTG_DIEPCTL_CNAK_Pos: u32 = 26;
pub const USB_OTG_DIEPCTL_CNAK_Msk: u32 = 67108864;
pub const USB_OTG_DIEPCTL_CNAK: u32 = 67108864;
pub const USB_OTG_DIEPCTL_SNAK_Pos: u32 = 27;
pub const USB_OTG_DIEPCTL_SNAK_Msk: u32 = 134217728;
pub const USB_OTG_DIEPCTL_SNAK: u32 = 134217728;
pub const USB_OTG_DIEPCTL_SD0PID_SEVNFRM_Pos: u32 = 28;
pub const USB_OTG_DIEPCTL_SD0PID_SEVNFRM_Msk: u32 = 268435456;
pub const USB_OTG_DIEPCTL_SD0PID_SEVNFRM: u32 = 268435456;
pub const USB_OTG_DIEPCTL_SODDFRM_Pos: u32 = 29;
pub const USB_OTG_DIEPCTL_SODDFRM_Msk: u32 = 536870912;
pub const USB_OTG_DIEPCTL_SODDFRM: u32 = 536870912;
pub const USB_OTG_DIEPCTL_EPDIS_Pos: u32 = 30;
pub const USB_OTG_DIEPCTL_EPDIS_Msk: u32 = 1073741824;
pub const USB_OTG_DIEPCTL_EPDIS: u32 = 1073741824;
pub const USB_OTG_DIEPCTL_EPENA_Pos: u32 = 31;
pub const USB_OTG_DIEPCTL_EPENA_Msk: u32 = 2147483648;
pub const USB_OTG_DIEPCTL_EPENA: u32 = 2147483648;
pub const USB_OTG_HCCHAR_MPSIZ_Pos: u32 = 0;
pub const USB_OTG_HCCHAR_MPSIZ_Msk: u32 = 2047;
pub const USB_OTG_HCCHAR_MPSIZ: u32 = 2047;
pub const USB_OTG_HCCHAR_EPNUM_Pos: u32 = 11;
pub const USB_OTG_HCCHAR_EPNUM_Msk: u32 = 30720;
pub const USB_OTG_HCCHAR_EPNUM: u32 = 30720;
pub const USB_OTG_HCCHAR_EPNUM_0: u32 = 2048;
pub const USB_OTG_HCCHAR_EPNUM_1: u32 = 4096;
pub const USB_OTG_HCCHAR_EPNUM_2: u32 = 8192;
pub const USB_OTG_HCCHAR_EPNUM_3: u32 = 16384;
pub const USB_OTG_HCCHAR_EPDIR_Pos: u32 = 15;
pub const USB_OTG_HCCHAR_EPDIR_Msk: u32 = 32768;
pub const USB_OTG_HCCHAR_EPDIR: u32 = 32768;
pub const USB_OTG_HCCHAR_LSDEV_Pos: u32 = 17;
pub const USB_OTG_HCCHAR_LSDEV_Msk: u32 = 131072;
pub const USB_OTG_HCCHAR_LSDEV: u32 = 131072;
pub const USB_OTG_HCCHAR_EPTYP_Pos: u32 = 18;
pub const USB_OTG_HCCHAR_EPTYP_Msk: u32 = 786432;
pub const USB_OTG_HCCHAR_EPTYP: u32 = 786432;
pub const USB_OTG_HCCHAR_EPTYP_0: u32 = 262144;
pub const USB_OTG_HCCHAR_EPTYP_1: u32 = 524288;
pub const USB_OTG_HCCHAR_MC_Pos: u32 = 20;
pub const USB_OTG_HCCHAR_MC_Msk: u32 = 3145728;
pub const USB_OTG_HCCHAR_MC: u32 = 3145728;
pub const USB_OTG_HCCHAR_MC_0: u32 = 1048576;
pub const USB_OTG_HCCHAR_MC_1: u32 = 2097152;
pub const USB_OTG_HCCHAR_DAD_Pos: u32 = 22;
pub const USB_OTG_HCCHAR_DAD_Msk: u32 = 532676608;
pub const USB_OTG_HCCHAR_DAD: u32 = 532676608;
pub const USB_OTG_HCCHAR_DAD_0: u32 = 4194304;
pub const USB_OTG_HCCHAR_DAD_1: u32 = 8388608;
pub const USB_OTG_HCCHAR_DAD_2: u32 = 16777216;
pub const USB_OTG_HCCHAR_DAD_3: u32 = 33554432;
pub const USB_OTG_HCCHAR_DAD_4: u32 = 67108864;
pub const USB_OTG_HCCHAR_DAD_5: u32 = 134217728;
pub const USB_OTG_HCCHAR_DAD_6: u32 = 268435456;
pub const USB_OTG_HCCHAR_ODDFRM_Pos: u32 = 29;
pub const USB_OTG_HCCHAR_ODDFRM_Msk: u32 = 536870912;
pub const USB_OTG_HCCHAR_ODDFRM: u32 = 536870912;
pub const USB_OTG_HCCHAR_CHDIS_Pos: u32 = 30;
pub const USB_OTG_HCCHAR_CHDIS_Msk: u32 = 1073741824;
pub const USB_OTG_HCCHAR_CHDIS: u32 = 1073741824;
pub const USB_OTG_HCCHAR_CHENA_Pos: u32 = 31;
pub const USB_OTG_HCCHAR_CHENA_Msk: u32 = 2147483648;
pub const USB_OTG_HCCHAR_CHENA: u32 = 2147483648;
pub const USB_OTG_HCSPLT_PRTADDR_Pos: u32 = 0;
pub const USB_OTG_HCSPLT_PRTADDR_Msk: u32 = 127;
pub const USB_OTG_HCSPLT_PRTADDR: u32 = 127;
pub const USB_OTG_HCSPLT_PRTADDR_0: u32 = 1;
pub const USB_OTG_HCSPLT_PRTADDR_1: u32 = 2;
pub const USB_OTG_HCSPLT_PRTADDR_2: u32 = 4;
pub const USB_OTG_HCSPLT_PRTADDR_3: u32 = 8;
pub const USB_OTG_HCSPLT_PRTADDR_4: u32 = 16;
pub const USB_OTG_HCSPLT_PRTADDR_5: u32 = 32;
pub const USB_OTG_HCSPLT_PRTADDR_6: u32 = 64;
pub const USB_OTG_HCSPLT_HUBADDR_Pos: u32 = 7;
pub const USB_OTG_HCSPLT_HUBADDR_Msk: u32 = 16256;
pub const USB_OTG_HCSPLT_HUBADDR: u32 = 16256;
pub const USB_OTG_HCSPLT_HUBADDR_0: u32 = 128;
pub const USB_OTG_HCSPLT_HUBADDR_1: u32 = 256;
pub const USB_OTG_HCSPLT_HUBADDR_2: u32 = 512;
pub const USB_OTG_HCSPLT_HUBADDR_3: u32 = 1024;
pub const USB_OTG_HCSPLT_HUBADDR_4: u32 = 2048;
pub const USB_OTG_HCSPLT_HUBADDR_5: u32 = 4096;
pub const USB_OTG_HCSPLT_HUBADDR_6: u32 = 8192;
pub const USB_OTG_HCSPLT_XACTPOS_Pos: u32 = 14;
pub const USB_OTG_HCSPLT_XACTPOS_Msk: u32 = 49152;
pub const USB_OTG_HCSPLT_XACTPOS: u32 = 49152;
pub const USB_OTG_HCSPLT_XACTPOS_0: u32 = 16384;
pub const USB_OTG_HCSPLT_XACTPOS_1: u32 = 32768;
pub const USB_OTG_HCSPLT_COMPLSPLT_Pos: u32 = 16;
pub const USB_OTG_HCSPLT_COMPLSPLT_Msk: u32 = 65536;
pub const USB_OTG_HCSPLT_COMPLSPLT: u32 = 65536;
pub const USB_OTG_HCSPLT_SPLITEN_Pos: u32 = 31;
pub const USB_OTG_HCSPLT_SPLITEN_Msk: u32 = 2147483648;
pub const USB_OTG_HCSPLT_SPLITEN: u32 = 2147483648;
pub const USB_OTG_HCINT_XFRC_Pos: u32 = 0;
pub const USB_OTG_HCINT_XFRC_Msk: u32 = 1;
pub const USB_OTG_HCINT_XFRC: u32 = 1;
pub const USB_OTG_HCINT_CHH_Pos: u32 = 1;
pub const USB_OTG_HCINT_CHH_Msk: u32 = 2;
pub const USB_OTG_HCINT_CHH: u32 = 2;
pub const USB_OTG_HCINT_AHBERR_Pos: u32 = 2;
pub const USB_OTG_HCINT_AHBERR_Msk: u32 = 4;
pub const USB_OTG_HCINT_AHBERR: u32 = 4;
pub const USB_OTG_HCINT_STALL_Pos: u32 = 3;
pub const USB_OTG_HCINT_STALL_Msk: u32 = 8;
pub const USB_OTG_HCINT_STALL: u32 = 8;
pub const USB_OTG_HCINT_NAK_Pos: u32 = 4;
pub const USB_OTG_HCINT_NAK_Msk: u32 = 16;
pub const USB_OTG_HCINT_NAK: u32 = 16;
pub const USB_OTG_HCINT_ACK_Pos: u32 = 5;
pub const USB_OTG_HCINT_ACK_Msk: u32 = 32;
pub const USB_OTG_HCINT_ACK: u32 = 32;
pub const USB_OTG_HCINT_NYET_Pos: u32 = 6;
pub const USB_OTG_HCINT_NYET_Msk: u32 = 64;
pub const USB_OTG_HCINT_NYET: u32 = 64;
pub const USB_OTG_HCINT_TXERR_Pos: u32 = 7;
pub const USB_OTG_HCINT_TXERR_Msk: u32 = 128;
pub const USB_OTG_HCINT_TXERR: u32 = 128;
pub const USB_OTG_HCINT_BBERR_Pos: u32 = 8;
pub const USB_OTG_HCINT_BBERR_Msk: u32 = 256;
pub const USB_OTG_HCINT_BBERR: u32 = 256;
pub const USB_OTG_HCINT_FRMOR_Pos: u32 = 9;
pub const USB_OTG_HCINT_FRMOR_Msk: u32 = 512;
pub const USB_OTG_HCINT_FRMOR: u32 = 512;
pub const USB_OTG_HCINT_DTERR_Pos: u32 = 10;
pub const USB_OTG_HCINT_DTERR_Msk: u32 = 1024;
pub const USB_OTG_HCINT_DTERR: u32 = 1024;
pub const USB_OTG_DIEPINT_XFRC_Pos: u32 = 0;
pub const USB_OTG_DIEPINT_XFRC_Msk: u32 = 1;
pub const USB_OTG_DIEPINT_XFRC: u32 = 1;
pub const USB_OTG_DIEPINT_EPDISD_Pos: u32 = 1;
pub const USB_OTG_DIEPINT_EPDISD_Msk: u32 = 2;
pub const USB_OTG_DIEPINT_EPDISD: u32 = 2;
pub const USB_OTG_DIEPINT_TOC_Pos: u32 = 3;
pub const USB_OTG_DIEPINT_TOC_Msk: u32 = 8;
pub const USB_OTG_DIEPINT_TOC: u32 = 8;
pub const USB_OTG_DIEPINT_ITTXFE_Pos: u32 = 4;
pub const USB_OTG_DIEPINT_ITTXFE_Msk: u32 = 16;
pub const USB_OTG_DIEPINT_ITTXFE: u32 = 16;
pub const USB_OTG_DIEPINT_INEPNE_Pos: u32 = 6;
pub const USB_OTG_DIEPINT_INEPNE_Msk: u32 = 64;
pub const USB_OTG_DIEPINT_INEPNE: u32 = 64;
pub const USB_OTG_DIEPINT_TXFE_Pos: u32 = 7;
pub const USB_OTG_DIEPINT_TXFE_Msk: u32 = 128;
pub const USB_OTG_DIEPINT_TXFE: u32 = 128;
pub const USB_OTG_DIEPINT_TXFIFOUDRN_Pos: u32 = 8;
pub const USB_OTG_DIEPINT_TXFIFOUDRN_Msk: u32 = 256;
pub const USB_OTG_DIEPINT_TXFIFOUDRN: u32 = 256;
pub const USB_OTG_DIEPINT_BNA_Pos: u32 = 9;
pub const USB_OTG_DIEPINT_BNA_Msk: u32 = 512;
pub const USB_OTG_DIEPINT_BNA: u32 = 512;
pub const USB_OTG_DIEPINT_PKTDRPSTS_Pos: u32 = 11;
pub const USB_OTG_DIEPINT_PKTDRPSTS_Msk: u32 = 2048;
pub const USB_OTG_DIEPINT_PKTDRPSTS: u32 = 2048;
pub const USB_OTG_DIEPINT_BERR_Pos: u32 = 12;
pub const USB_OTG_DIEPINT_BERR_Msk: u32 = 4096;
pub const USB_OTG_DIEPINT_BERR: u32 = 4096;
pub const USB_OTG_DIEPINT_NAK_Pos: u32 = 13;
pub const USB_OTG_DIEPINT_NAK_Msk: u32 = 8192;
pub const USB_OTG_DIEPINT_NAK: u32 = 8192;
pub const USB_OTG_HCINTMSK_XFRCM_Pos: u32 = 0;
pub const USB_OTG_HCINTMSK_XFRCM_Msk: u32 = 1;
pub const USB_OTG_HCINTMSK_XFRCM: u32 = 1;
pub const USB_OTG_HCINTMSK_CHHM_Pos: u32 = 1;
pub const USB_OTG_HCINTMSK_CHHM_Msk: u32 = 2;
pub const USB_OTG_HCINTMSK_CHHM: u32 = 2;
pub const USB_OTG_HCINTMSK_AHBERR_Pos: u32 = 2;
pub const USB_OTG_HCINTMSK_AHBERR_Msk: u32 = 4;
pub const USB_OTG_HCINTMSK_AHBERR: u32 = 4;
pub const USB_OTG_HCINTMSK_STALLM_Pos: u32 = 3;
pub const USB_OTG_HCINTMSK_STALLM_Msk: u32 = 8;
pub const USB_OTG_HCINTMSK_STALLM: u32 = 8;
pub const USB_OTG_HCINTMSK_NAKM_Pos: u32 = 4;
pub const USB_OTG_HCINTMSK_NAKM_Msk: u32 = 16;
pub const USB_OTG_HCINTMSK_NAKM: u32 = 16;
pub const USB_OTG_HCINTMSK_ACKM_Pos: u32 = 5;
pub const USB_OTG_HCINTMSK_ACKM_Msk: u32 = 32;
pub const USB_OTG_HCINTMSK_ACKM: u32 = 32;
pub const USB_OTG_HCINTMSK_NYET_Pos: u32 = 6;
pub const USB_OTG_HCINTMSK_NYET_Msk: u32 = 64;
pub const USB_OTG_HCINTMSK_NYET: u32 = 64;
pub const USB_OTG_HCINTMSK_TXERRM_Pos: u32 = 7;
pub const USB_OTG_HCINTMSK_TXERRM_Msk: u32 = 128;
pub const USB_OTG_HCINTMSK_TXERRM: u32 = 128;
pub const USB_OTG_HCINTMSK_BBERRM_Pos: u32 = 8;
pub const USB_OTG_HCINTMSK_BBERRM_Msk: u32 = 256;
pub const USB_OTG_HCINTMSK_BBERRM: u32 = 256;
pub const USB_OTG_HCINTMSK_FRMORM_Pos: u32 = 9;
pub const USB_OTG_HCINTMSK_FRMORM_Msk: u32 = 512;
pub const USB_OTG_HCINTMSK_FRMORM: u32 = 512;
pub const USB_OTG_HCINTMSK_DTERRM_Pos: u32 = 10;
pub const USB_OTG_HCINTMSK_DTERRM_Msk: u32 = 1024;
pub const USB_OTG_HCINTMSK_DTERRM: u32 = 1024;
pub const USB_OTG_DIEPTSIZ_XFRSIZ_Pos: u32 = 0;
pub const USB_OTG_DIEPTSIZ_XFRSIZ_Msk: u32 = 524287;
pub const USB_OTG_DIEPTSIZ_XFRSIZ: u32 = 524287;
pub const USB_OTG_DIEPTSIZ_PKTCNT_Pos: u32 = 19;
pub const USB_OTG_DIEPTSIZ_PKTCNT_Msk: u32 = 536346624;
pub const USB_OTG_DIEPTSIZ_PKTCNT: u32 = 536346624;
pub const USB_OTG_DIEPTSIZ_MULCNT_Pos: u32 = 29;
pub const USB_OTG_DIEPTSIZ_MULCNT_Msk: u32 = 1610612736;
pub const USB_OTG_DIEPTSIZ_MULCNT: u32 = 1610612736;
pub const USB_OTG_HCTSIZ_XFRSIZ_Pos: u32 = 0;
pub const USB_OTG_HCTSIZ_XFRSIZ_Msk: u32 = 524287;
pub const USB_OTG_HCTSIZ_XFRSIZ: u32 = 524287;
pub const USB_OTG_HCTSIZ_PKTCNT_Pos: u32 = 19;
pub const USB_OTG_HCTSIZ_PKTCNT_Msk: u32 = 536346624;
pub const USB_OTG_HCTSIZ_PKTCNT: u32 = 536346624;
pub const USB_OTG_HCTSIZ_DOPING_Pos: u32 = 31;
pub const USB_OTG_HCTSIZ_DOPING_Msk: u32 = 2147483648;
pub const USB_OTG_HCTSIZ_DOPING: u32 = 2147483648;
pub const USB_OTG_HCTSIZ_DPID_Pos: u32 = 29;
pub const USB_OTG_HCTSIZ_DPID_Msk: u32 = 1610612736;
pub const USB_OTG_HCTSIZ_DPID: u32 = 1610612736;
pub const USB_OTG_HCTSIZ_DPID_0: u32 = 536870912;
pub const USB_OTG_HCTSIZ_DPID_1: u32 = 1073741824;
pub const USB_OTG_DIEPDMA_DMAADDR_Pos: u32 = 0;
pub const USB_OTG_DIEPDMA_DMAADDR_Msk: u32 = 4294967295;
pub const USB_OTG_DIEPDMA_DMAADDR: u32 = 4294967295;
pub const USB_OTG_HCDMA_DMAADDR_Pos: u32 = 0;
pub const USB_OTG_HCDMA_DMAADDR_Msk: u32 = 4294967295;
pub const USB_OTG_HCDMA_DMAADDR: u32 = 4294967295;
pub const USB_OTG_DTXFSTS_INEPTFSAV_Pos: u32 = 0;
pub const USB_OTG_DTXFSTS_INEPTFSAV_Msk: u32 = 65535;
pub const USB_OTG_DTXFSTS_INEPTFSAV: u32 = 65535;
pub const USB_OTG_DIEPTXF_INEPTXSA_Pos: u32 = 0;
pub const USB_OTG_DIEPTXF_INEPTXSA_Msk: u32 = 65535;
pub const USB_OTG_DIEPTXF_INEPTXSA: u32 = 65535;
pub const USB_OTG_DIEPTXF_INEPTXFD_Pos: u32 = 16;
pub const USB_OTG_DIEPTXF_INEPTXFD_Msk: u32 = 4294901760;
pub const USB_OTG_DIEPTXF_INEPTXFD: u32 = 4294901760;
pub const USB_OTG_DOEPCTL_MPSIZ_Pos: u32 = 0;
pub const USB_OTG_DOEPCTL_MPSIZ_Msk: u32 = 2047;
pub const USB_OTG_DOEPCTL_MPSIZ: u32 = 2047;
pub const USB_OTG_DOEPCTL_USBAEP_Pos: u32 = 15;
pub const USB_OTG_DOEPCTL_USBAEP_Msk: u32 = 32768;
pub const USB_OTG_DOEPCTL_USBAEP: u32 = 32768;
pub const USB_OTG_DOEPCTL_NAKSTS_Pos: u32 = 17;
pub const USB_OTG_DOEPCTL_NAKSTS_Msk: u32 = 131072;
pub const USB_OTG_DOEPCTL_NAKSTS: u32 = 131072;
pub const USB_OTG_DOEPCTL_SD0PID_SEVNFRM_Pos: u32 = 28;
pub const USB_OTG_DOEPCTL_SD0PID_SEVNFRM_Msk: u32 = 268435456;
pub const USB_OTG_DOEPCTL_SD0PID_SEVNFRM: u32 = 268435456;
pub const USB_OTG_DOEPCTL_SODDFRM_Pos: u32 = 29;
pub const USB_OTG_DOEPCTL_SODDFRM_Msk: u32 = 536870912;
pub const USB_OTG_DOEPCTL_SODDFRM: u32 = 536870912;
pub const USB_OTG_DOEPCTL_EPTYP_Pos: u32 = 18;
pub const USB_OTG_DOEPCTL_EPTYP_Msk: u32 = 786432;
pub const USB_OTG_DOEPCTL_EPTYP: u32 = 786432;
pub const USB_OTG_DOEPCTL_EPTYP_0: u32 = 262144;
pub const USB_OTG_DOEPCTL_EPTYP_1: u32 = 524288;
pub const USB_OTG_DOEPCTL_SNPM_Pos: u32 = 20;
pub const USB_OTG_DOEPCTL_SNPM_Msk: u32 = 1048576;
pub const USB_OTG_DOEPCTL_SNPM: u32 = 1048576;
pub const USB_OTG_DOEPCTL_STALL_Pos: u32 = 21;
pub const USB_OTG_DOEPCTL_STALL_Msk: u32 = 2097152;
pub const USB_OTG_DOEPCTL_STALL: u32 = 2097152;
pub const USB_OTG_DOEPCTL_CNAK_Pos: u32 = 26;
pub const USB_OTG_DOEPCTL_CNAK_Msk: u32 = 67108864;
pub const USB_OTG_DOEPCTL_CNAK: u32 = 67108864;
pub const USB_OTG_DOEPCTL_SNAK_Pos: u32 = 27;
pub const USB_OTG_DOEPCTL_SNAK_Msk: u32 = 134217728;
pub const USB_OTG_DOEPCTL_SNAK: u32 = 134217728;
pub const USB_OTG_DOEPCTL_EPDIS_Pos: u32 = 30;
pub const USB_OTG_DOEPCTL_EPDIS_Msk: u32 = 1073741824;
pub const USB_OTG_DOEPCTL_EPDIS: u32 = 1073741824;
pub const USB_OTG_DOEPCTL_EPENA_Pos: u32 = 31;
pub const USB_OTG_DOEPCTL_EPENA_Msk: u32 = 2147483648;
pub const USB_OTG_DOEPCTL_EPENA: u32 = 2147483648;
pub const USB_OTG_DOEPINT_XFRC_Pos: u32 = 0;
pub const USB_OTG_DOEPINT_XFRC_Msk: u32 = 1;
pub const USB_OTG_DOEPINT_XFRC: u32 = 1;
pub const USB_OTG_DOEPINT_EPDISD_Pos: u32 = 1;
pub const USB_OTG_DOEPINT_EPDISD_Msk: u32 = 2;
pub const USB_OTG_DOEPINT_EPDISD: u32 = 2;
pub const USB_OTG_DOEPINT_STUP_Pos: u32 = 3;
pub const USB_OTG_DOEPINT_STUP_Msk: u32 = 8;
pub const USB_OTG_DOEPINT_STUP: u32 = 8;
pub const USB_OTG_DOEPINT_OTEPDIS_Pos: u32 = 4;
pub const USB_OTG_DOEPINT_OTEPDIS_Msk: u32 = 16;
pub const USB_OTG_DOEPINT_OTEPDIS: u32 = 16;
pub const USB_OTG_DOEPINT_B2BSTUP_Pos: u32 = 6;
pub const USB_OTG_DOEPINT_B2BSTUP_Msk: u32 = 64;
pub const USB_OTG_DOEPINT_B2BSTUP: u32 = 64;
pub const USB_OTG_DOEPINT_NYET_Pos: u32 = 14;
pub const USB_OTG_DOEPINT_NYET_Msk: u32 = 16384;
pub const USB_OTG_DOEPINT_NYET: u32 = 16384;
pub const USB_OTG_DOEPTSIZ_XFRSIZ_Pos: u32 = 0;
pub const USB_OTG_DOEPTSIZ_XFRSIZ_Msk: u32 = 524287;
pub const USB_OTG_DOEPTSIZ_XFRSIZ: u32 = 524287;
pub const USB_OTG_DOEPTSIZ_PKTCNT_Pos: u32 = 19;
pub const USB_OTG_DOEPTSIZ_PKTCNT_Msk: u32 = 536346624;
pub const USB_OTG_DOEPTSIZ_PKTCNT: u32 = 536346624;
pub const USB_OTG_DOEPTSIZ_STUPCNT_Pos: u32 = 29;
pub const USB_OTG_DOEPTSIZ_STUPCNT_Msk: u32 = 1610612736;
pub const USB_OTG_DOEPTSIZ_STUPCNT: u32 = 1610612736;
pub const USB_OTG_DOEPTSIZ_STUPCNT_0: u32 = 536870912;
pub const USB_OTG_DOEPTSIZ_STUPCNT_1: u32 = 1073741824;
pub const USB_OTG_PCGCCTL_STOPCLK_Pos: u32 = 0;
pub const USB_OTG_PCGCCTL_STOPCLK_Msk: u32 = 1;
pub const USB_OTG_PCGCCTL_STOPCLK: u32 = 1;
pub const USB_OTG_PCGCCTL_GATECLK_Pos: u32 = 1;
pub const USB_OTG_PCGCCTL_GATECLK_Msk: u32 = 2;
pub const USB_OTG_PCGCCTL_GATECLK: u32 = 2;
pub const USB_OTG_PCGCCTL_PHYSUSP_Pos: u32 = 4;
pub const USB_OTG_PCGCCTL_PHYSUSP_Msk: u32 = 16;
pub const USB_OTG_PCGCCTL_PHYSUSP: u32 = 16;
pub const USB_OTG_FS_HOST_MAX_CHANNEL_NBR: u32 = 8;
pub const USB_OTG_FS_MAX_IN_ENDPOINTS: u32 = 4;
pub const USB_OTG_FS_MAX_OUT_ENDPOINTS: u32 = 4;
pub const USB_OTG_FS_TOTAL_FIFO_SIZE: u32 = 1280;
pub const RCC_PLLCFGR_RST_VALUE: u32 = 603992080;
pub const RCC_PLLI2SCFGR_RST_VALUE: u32 = 536883200;
pub const RCC_MAX_FREQUENCY: u32 = 84000000;
pub const RCC_MAX_FREQUENCY_SCALE3: u32 = 60000000;
pub const RCC_MAX_FREQUENCY_SCALE2: u32 = 84000000;
pub const RCC_PLLVCO_OUTPUT_MIN: u32 = 192000000;
pub const RCC_PLLVCO_INPUT_MIN: u32 = 950000;
pub const RCC_PLLVCO_INPUT_MAX: u32 = 2100000;
pub const RCC_PLLVCO_OUTPUT_MAX: u32 = 432000000;
pub const RCC_PLLN_MIN_VALUE: u32 = 192;
pub const RCC_PLLN_MAX_VALUE: u32 = 432;
pub const FLASH_SCALE2_LATENCY1_FREQ: u32 = 30000000;
pub const FLASH_SCALE2_LATENCY2_FREQ: u32 = 60000000;
pub const FLASH_SCALE3_LATENCY1_FREQ: u32 = 30000000;
pub const FLASH_SCALE3_LATENCY2_FREQ: u32 = 60000000;
/// < 2 Non Maskable Interrupt
pub const IRQn_Type_NonMaskableInt_IRQn: IRQn_Type = -14;
/// < 4 Cortex-M4 Memory Management Interrupt
pub const IRQn_Type_MemoryManagement_IRQn: IRQn_Type = -12;
/// < 5 Cortex-M4 Bus Fault Interrupt
pub const IRQn_Type_BusFault_IRQn: IRQn_Type = -11;
/// < 6 Cortex-M4 Usage Fault Interrupt
pub const IRQn_Type_UsageFault_IRQn: IRQn_Type = -10;
/// < 11 Cortex-M4 SV Call Interrupt
pub const IRQn_Type_SVCall_IRQn: IRQn_Type = -5;
/// < 12 Cortex-M4 Debug Monitor Interrupt
pub const IRQn_Type_DebugMonitor_IRQn: IRQn_Type = -4;
/// < 14 Cortex-M4 Pend SV Interrupt
pub const IRQn_Type_PendSV_IRQn: IRQn_Type = -2;
/// < 15 Cortex-M4 System Tick Interrupt
pub const IRQn_Type_SysTick_IRQn: IRQn_Type = -1;
/// < Window WatchDog Interrupt
pub const IRQn_Type_WWDG_IRQn: IRQn_Type = 0;
/// < PVD through EXTI Line detection Interrupt
pub const IRQn_Type_PVD_IRQn: IRQn_Type = 1;
/// < Tamper and TimeStamp interrupts through the EXTI line
pub const IRQn_Type_TAMP_STAMP_IRQn: IRQn_Type = 2;
/// < RTC Wakeup interrupt through the EXTI line
pub const IRQn_Type_RTC_WKUP_IRQn: IRQn_Type = 3;
/// < FLASH global Interrupt
pub const IRQn_Type_FLASH_IRQn: IRQn_Type = 4;
/// < RCC global Interrupt
pub const IRQn_Type_RCC_IRQn: IRQn_Type = 5;
/// < EXTI Line0 Interrupt
pub const IRQn_Type_EXTI0_IRQn: IRQn_Type = 6;
/// < EXTI Line1 Interrupt
pub const IRQn_Type_EXTI1_IRQn: IRQn_Type = 7;
/// < EXTI Line2 Interrupt
pub const IRQn_Type_EXTI2_IRQn: IRQn_Type = 8;
/// < EXTI Line3 Interrupt
pub const IRQn_Type_EXTI3_IRQn: IRQn_Type = 9;
/// < EXTI Line4 Interrupt
pub const IRQn_Type_EXTI4_IRQn: IRQn_Type = 10;
/// < DMA1 Stream 0 global Interrupt
pub const IRQn_Type_DMA1_Stream0_IRQn: IRQn_Type = 11;
/// < DMA1 Stream 1 global Interrupt
pub const IRQn_Type_DMA1_Stream1_IRQn: IRQn_Type = 12;
/// < DMA1 Stream 2 global Interrupt
pub const IRQn_Type_DMA1_Stream2_IRQn: IRQn_Type = 13;
/// < DMA1 Stream 3 global Interrupt
pub const IRQn_Type_DMA1_Stream3_IRQn: IRQn_Type = 14;
/// < DMA1 Stream 4 global Interrupt
pub const IRQn_Type_DMA1_Stream4_IRQn: IRQn_Type = 15;
/// < DMA1 Stream 5 global Interrupt
pub const IRQn_Type_DMA1_Stream5_IRQn: IRQn_Type = 16;
/// < DMA1 Stream 6 global Interrupt
pub const IRQn_Type_DMA1_Stream6_IRQn: IRQn_Type = 17;
/// < ADC1, ADC2 and ADC3 global Interrupts
pub const IRQn_Type_ADC_IRQn: IRQn_Type = 18;
/// < External Line[9:5] Interrupts
pub const IRQn_Type_EXTI9_5_IRQn: IRQn_Type = 23;
/// < TIM1 Break interrupt and TIM9 global interrupt
pub const IRQn_Type_TIM1_BRK_TIM9_IRQn: IRQn_Type = 24;
/// < TIM1 Update Interrupt and TIM10 global interrupt
pub const IRQn_Type_TIM1_UP_TIM10_IRQn: IRQn_Type = 25;
/// < TIM1 Trigger and Commutation Interrupt and TIM11 global interrupt
pub const IRQn_Type_TIM1_TRG_COM_TIM11_IRQn: IRQn_Type = 26;
/// < TIM1 Capture Compare Interrupt
pub const IRQn_Type_TIM1_CC_IRQn: IRQn_Type = 27;
/// < TIM2 global Interrupt
pub const IRQn_Type_TIM2_IRQn: IRQn_Type = 28;
/// < TIM3 global Interrupt
pub const IRQn_Type_TIM3_IRQn: IRQn_Type = 29;
/// < TIM4 global Interrupt
pub const IRQn_Type_TIM4_IRQn: IRQn_Type = 30;
/// < I2C1 Event Interrupt
pub const IRQn_Type_I2C1_EV_IRQn: IRQn_Type = 31;
/// < I2C1 Error Interrupt
pub const IRQn_Type_I2C1_ER_IRQn: IRQn_Type = 32;
/// < I2C2 Event Interrupt
pub const IRQn_Type_I2C2_EV_IRQn: IRQn_Type = 33;
/// < I2C2 Error Interrupt
pub const IRQn_Type_I2C2_ER_IRQn: IRQn_Type = 34;
/// < SPI1 global Interrupt
pub const IRQn_Type_SPI1_IRQn: IRQn_Type = 35;
/// < SPI2 global Interrupt
pub const IRQn_Type_SPI2_IRQn: IRQn_Type = 36;
/// < USART1 global Interrupt
pub const IRQn_Type_USART1_IRQn: IRQn_Type = 37;
/// < USART2 global Interrupt
pub const IRQn_Type_USART2_IRQn: IRQn_Type = 38;
/// < External Line[15:10] Interrupts
pub const IRQn_Type_EXTI15_10_IRQn: IRQn_Type = 40;
/// < RTC Alarm (A and B) through EXTI Line Interrupt
pub const IRQn_Type_RTC_Alarm_IRQn: IRQn_Type = 41;
/// < USB OTG FS Wakeup through EXTI line interrupt
pub const IRQn_Type_OTG_FS_WKUP_IRQn: IRQn_Type = 42;
/// < DMA1 Stream7 Interrupt
pub const IRQn_Type_DMA1_Stream7_IRQn: IRQn_Type = 47;
/// < SDIO global Interrupt
pub const IRQn_Type_SDIO_IRQn: IRQn_Type = 49;
/// < TIM5 global Interrupt
pub const IRQn_Type_TIM5_IRQn: IRQn_Type = 50;
/// < SPI3 global Interrupt
pub const IRQn_Type_SPI3_IRQn: IRQn_Type = 51;
/// < DMA2 Stream 0 global Interrupt
pub const IRQn_Type_DMA2_Stream0_IRQn: IRQn_Type = 56;
/// < DMA2 Stream 1 global Interrupt
pub const IRQn_Type_DMA2_Stream1_IRQn: IRQn_Type = 57;
/// < DMA2 Stream 2 global Interrupt
pub const IRQn_Type_DMA2_Stream2_IRQn: IRQn_Type = 58;
/// < DMA2 Stream 3 global Interrupt
pub const IRQn_Type_DMA2_Stream3_IRQn: IRQn_Type = 59;
/// < DMA2 Stream 4 global Interrupt
pub const IRQn_Type_DMA2_Stream4_IRQn: IRQn_Type = 60;
/// < USB OTG FS global Interrupt
pub const IRQn_Type_OTG_FS_IRQn: IRQn_Type = 67;
/// < DMA2 Stream 5 global interrupt
pub const IRQn_Type_DMA2_Stream5_IRQn: IRQn_Type = 68;
/// < DMA2 Stream 6 global interrupt
pub const IRQn_Type_DMA2_Stream6_IRQn: IRQn_Type = 69;
/// < DMA2 Stream 7 global interrupt
pub const IRQn_Type_DMA2_Stream7_IRQn: IRQn_Type = 70;
/// < USART6 global interrupt
pub const IRQn_Type_USART6_IRQn: IRQn_Type = 71;
/// < I2C3 event interrupt
pub const IRQn_Type_I2C3_EV_IRQn: IRQn_Type = 72;
/// < I2C3 error interrupt
pub const IRQn_Type_I2C3_ER_IRQn: IRQn_Type = 73;
/// < FPU global interrupt
pub const IRQn_Type_FPU_IRQn: IRQn_Type = 81;
/// < SPI4 global Interrupt
pub const IRQn_Type_SPI4_IRQn: IRQn_Type = 84;
/// @brief STM32F4XX Interrupt Number Definition, according to the selected device
/// in @ref Library_configuration_section
pub type IRQn_Type = i32;
pub type __u_char = ::ctypes::c_uchar;
pub type __u_short = ::ctypes::c_ushort;
pub type __u_int = ::ctypes::c_uint;
pub type __u_long = ::ctypes::c_ulong;
pub type __int8_t = ::ctypes::c_schar;
pub type __uint8_t = ::ctypes::c_uchar;
pub type __int16_t = ::ctypes::c_short;
pub type __uint16_t = ::ctypes::c_ushort;
pub type __int32_t = ::ctypes::c_int;
pub type __uint32_t = ::ctypes::c_uint;
pub type __int64_t = ::ctypes::c_long;
pub type __uint64_t = ::ctypes::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::ctypes::c_long;
pub type __u_quad_t = ::ctypes::c_ulong;
pub type __intmax_t = ::ctypes::c_long;
pub type __uintmax_t = ::ctypes::c_ulong;
pub type __dev_t = ::ctypes::c_ulong;
pub type __uid_t = ::ctypes::c_uint;
pub type __gid_t = ::ctypes::c_uint;
pub type __ino_t = ::ctypes::c_ulong;
pub type __ino64_t = ::ctypes::c_ulong;
pub type __mode_t = ::ctypes::c_uint;
pub type __nlink_t = ::ctypes::c_ulong;
pub type __off_t = ::ctypes::c_long;
pub type __off64_t = ::ctypes::c_long;
pub type __pid_t = ::ctypes::c_int;
#[repr(C)]
pub struct __fsid_t {
    pub __val: [::ctypes::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::core::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::core::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::ctypes::c_long;
pub type __rlim_t = ::ctypes::c_ulong;
pub type __rlim64_t = ::ctypes::c_ulong;
pub type __id_t = ::ctypes::c_uint;
pub type __time_t = ::ctypes::c_long;
pub type __useconds_t = ::ctypes::c_uint;
pub type __suseconds_t = ::ctypes::c_long;
pub type __daddr_t = ::ctypes::c_int;
pub type __key_t = ::ctypes::c_int;
pub type __clockid_t = ::ctypes::c_int;
pub type __timer_t = *mut ::ctypes::c_void;
pub type __blksize_t = ::ctypes::c_long;
pub type __blkcnt_t = ::ctypes::c_long;
pub type __blkcnt64_t = ::ctypes::c_long;
pub type __fsblkcnt_t = ::ctypes::c_ulong;
pub type __fsblkcnt64_t = ::ctypes::c_ulong;
pub type __fsfilcnt_t = ::ctypes::c_ulong;
pub type __fsfilcnt64_t = ::ctypes::c_ulong;
pub type __fsword_t = ::ctypes::c_long;
pub type __ssize_t = ::ctypes::c_long;
pub type __syscall_slong_t = ::ctypes::c_long;
pub type __syscall_ulong_t = ::ctypes::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::ctypes::c_char;
pub type __intptr_t = ::ctypes::c_long;
pub type __socklen_t = ::ctypes::c_uint;
pub type __sig_atomic_t = ::ctypes::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::ctypes::c_schar;
pub type int_fast16_t = ::ctypes::c_long;
pub type int_fast32_t = ::ctypes::c_long;
pub type int_fast64_t = ::ctypes::c_long;
pub type uint_fast8_t = ::ctypes::c_uchar;
pub type uint_fast16_t = ::ctypes::c_ulong;
pub type uint_fast32_t = ::ctypes::c_ulong;
pub type uint_fast64_t = ::ctypes::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
/// \brief  Union type to access the Application Program Status Register (APSR).
#[repr(C)]
pub struct APSR_Type {
    /// < Structure used for bit  access
    pub b: __BindgenUnionField<APSR_Type__bindgen_ty_1>,
    /// < Type      used for word access
    pub w: __BindgenUnionField<u32>,
    pub bindgen_union_field: u32,
}
#[repr(C)]
pub struct APSR_Type__bindgen_ty_1 {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u16>,
    pub __bindgen_align: [u32; 0usize],
}
#[test]
fn bindgen_test_layout_APSR_Type__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<APSR_Type__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(APSR_Type__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<APSR_Type__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(APSR_Type__bindgen_ty_1))
    );
}
impl APSR_Type__bindgen_ty_1 {
    #[inline]
    pub fn _reserved0(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set__reserved0(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn GE(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_GE(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn _reserved1(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(20usize, 7u8) as u32) }
    }
    #[inline]
    pub fn set__reserved1(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(20usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub fn Q(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(27usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_Q(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(27usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn V(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(28usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_V(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(28usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn C(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(29usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_C(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(29usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn Z(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(30usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_Z(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(30usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn N(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_N(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        _reserved0: u32,
        GE: u32,
        _reserved1: u32,
        Q: u32,
        V: u32,
        C: u32,
        Z: u32,
        N: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u16> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u16> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let _reserved0: u32 = unsafe { ::core::mem::transmute(_reserved0) };
            _reserved0 as u64
        });
        __bindgen_bitfield_unit.set(16usize, 4u8, {
            let GE: u32 = unsafe { ::core::mem::transmute(GE) };
            GE as u64
        });
        __bindgen_bitfield_unit.set(20usize, 7u8, {
            let _reserved1: u32 = unsafe { ::core::mem::transmute(_reserved1) };
            _reserved1 as u64
        });
        __bindgen_bitfield_unit.set(27usize, 1u8, {
            let Q: u32 = unsafe { ::core::mem::transmute(Q) };
            Q as u64
        });
        __bindgen_bitfield_unit.set(28usize, 1u8, {
            let V: u32 = unsafe { ::core::mem::transmute(V) };
            V as u64
        });
        __bindgen_bitfield_unit.set(29usize, 1u8, {
            let C: u32 = unsafe { ::core::mem::transmute(C) };
            C as u64
        });
        __bindgen_bitfield_unit.set(30usize, 1u8, {
            let Z: u32 = unsafe { ::core::mem::transmute(Z) };
            Z as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let N: u32 = unsafe { ::core::mem::transmute(N) };
            N as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_APSR_Type() {
    assert_eq!(
        ::core::mem::size_of::<APSR_Type>(),
        4usize,
        concat!("Size of: ", stringify!(APSR_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<APSR_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(APSR_Type))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<APSR_Type>())).b as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(APSR_Type),
            "::",
            stringify!(b)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<APSR_Type>())).w as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(APSR_Type),
            "::",
            stringify!(w)
        )
    );
}
/// \brief  Union type to access the Interrupt Program Status Register (IPSR).
#[repr(C)]
pub struct IPSR_Type {
    /// < Structure used for bit  access
    pub b: __BindgenUnionField<IPSR_Type__bindgen_ty_1>,
    /// < Type      used for word access
    pub w: __BindgenUnionField<u32>,
    pub bindgen_union_field: u32,
}
#[repr(C)]
pub struct IPSR_Type__bindgen_ty_1 {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u32>,
    pub __bindgen_align: [u32; 0usize],
}
#[test]
fn bindgen_test_layout_IPSR_Type__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<IPSR_Type__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(IPSR_Type__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<IPSR_Type__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(IPSR_Type__bindgen_ty_1))
    );
}
impl IPSR_Type__bindgen_ty_1 {
    #[inline]
    pub fn ISR(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 9u8) as u32) }
    }
    #[inline]
    pub fn set_ISR(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 9u8, val as u64)
        }
    }
    #[inline]
    pub fn _reserved0(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 23u8) as u32) }
    }
    #[inline]
    pub fn set__reserved0(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 23u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(ISR: u32, _reserved0: u32) -> __BindgenBitfieldUnit<[u8; 4usize], u32> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u32> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 9u8, {
            let ISR: u32 = unsafe { ::core::mem::transmute(ISR) };
            ISR as u64
        });
        __bindgen_bitfield_unit.set(9usize, 23u8, {
            let _reserved0: u32 = unsafe { ::core::mem::transmute(_reserved0) };
            _reserved0 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_IPSR_Type() {
    assert_eq!(
        ::core::mem::size_of::<IPSR_Type>(),
        4usize,
        concat!("Size of: ", stringify!(IPSR_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<IPSR_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(IPSR_Type))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<IPSR_Type>())).b as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IPSR_Type),
            "::",
            stringify!(b)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<IPSR_Type>())).w as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IPSR_Type),
            "::",
            stringify!(w)
        )
    );
}
/// \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
#[repr(C)]
pub struct xPSR_Type {
    /// < Structure used for bit  access
    pub b: __BindgenUnionField<xPSR_Type__bindgen_ty_1>,
    /// < Type      used for word access
    pub w: __BindgenUnionField<u32>,
    pub bindgen_union_field: u32,
}
#[repr(C)]
pub struct xPSR_Type__bindgen_ty_1 {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u16>,
    pub __bindgen_align: [u32; 0usize],
}
#[test]
fn bindgen_test_layout_xPSR_Type__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<xPSR_Type__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(xPSR_Type__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<xPSR_Type__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(xPSR_Type__bindgen_ty_1))
    );
}
impl xPSR_Type__bindgen_ty_1 {
    #[inline]
    pub fn ISR(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 9u8) as u32) }
    }
    #[inline]
    pub fn set_ISR(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 9u8, val as u64)
        }
    }
    #[inline]
    pub fn _reserved0(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 7u8) as u32) }
    }
    #[inline]
    pub fn set__reserved0(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub fn GE(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_GE(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn _reserved1(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(20usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set__reserved1(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(20usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn T(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(24usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_T(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(24usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn IT(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(25usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_IT(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(25usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn Q(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(27usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_Q(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(27usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn V(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(28usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_V(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(28usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn C(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(29usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_C(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(29usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn Z(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(30usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_Z(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(30usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn N(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_N(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        ISR: u32,
        _reserved0: u32,
        GE: u32,
        _reserved1: u32,
        T: u32,
        IT: u32,
        Q: u32,
        V: u32,
        C: u32,
        Z: u32,
        N: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u16> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u16> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 9u8, {
            let ISR: u32 = unsafe { ::core::mem::transmute(ISR) };
            ISR as u64
        });
        __bindgen_bitfield_unit.set(9usize, 7u8, {
            let _reserved0: u32 = unsafe { ::core::mem::transmute(_reserved0) };
            _reserved0 as u64
        });
        __bindgen_bitfield_unit.set(16usize, 4u8, {
            let GE: u32 = unsafe { ::core::mem::transmute(GE) };
            GE as u64
        });
        __bindgen_bitfield_unit.set(20usize, 4u8, {
            let _reserved1: u32 = unsafe { ::core::mem::transmute(_reserved1) };
            _reserved1 as u64
        });
        __bindgen_bitfield_unit.set(24usize, 1u8, {
            let T: u32 = unsafe { ::core::mem::transmute(T) };
            T as u64
        });
        __bindgen_bitfield_unit.set(25usize, 2u8, {
            let IT: u32 = unsafe { ::core::mem::transmute(IT) };
            IT as u64
        });
        __bindgen_bitfield_unit.set(27usize, 1u8, {
            let Q: u32 = unsafe { ::core::mem::transmute(Q) };
            Q as u64
        });
        __bindgen_bitfield_unit.set(28usize, 1u8, {
            let V: u32 = unsafe { ::core::mem::transmute(V) };
            V as u64
        });
        __bindgen_bitfield_unit.set(29usize, 1u8, {
            let C: u32 = unsafe { ::core::mem::transmute(C) };
            C as u64
        });
        __bindgen_bitfield_unit.set(30usize, 1u8, {
            let Z: u32 = unsafe { ::core::mem::transmute(Z) };
            Z as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let N: u32 = unsafe { ::core::mem::transmute(N) };
            N as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_xPSR_Type() {
    assert_eq!(
        ::core::mem::size_of::<xPSR_Type>(),
        4usize,
        concat!("Size of: ", stringify!(xPSR_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<xPSR_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(xPSR_Type))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xPSR_Type>())).b as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xPSR_Type),
            "::",
            stringify!(b)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xPSR_Type>())).w as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xPSR_Type),
            "::",
            stringify!(w)
        )
    );
}
/// \brief  Union type to access the Control Registers (CONTROL).
#[repr(C)]
pub struct CONTROL_Type {
    /// < Structure used for bit  access
    pub b: __BindgenUnionField<CONTROL_Type__bindgen_ty_1>,
    /// < Type      used for word access
    pub w: __BindgenUnionField<u32>,
    pub bindgen_union_field: u32,
}
#[repr(C)]
pub struct CONTROL_Type__bindgen_ty_1 {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u32>,
    pub __bindgen_align: [u32; 0usize],
}
#[test]
fn bindgen_test_layout_CONTROL_Type__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<CONTROL_Type__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(CONTROL_Type__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<CONTROL_Type__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(CONTROL_Type__bindgen_ty_1))
    );
}
impl CONTROL_Type__bindgen_ty_1 {
    #[inline]
    pub fn nPRIV(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_nPRIV(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn SPSEL(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_SPSEL(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn FPCA(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_FPCA(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn _reserved0(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 29u8) as u32) }
    }
    #[inline]
    pub fn set__reserved0(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 29u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        nPRIV: u32,
        SPSEL: u32,
        FPCA: u32,
        _reserved0: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u32> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u32> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let nPRIV: u32 = unsafe { ::core::mem::transmute(nPRIV) };
            nPRIV as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let SPSEL: u32 = unsafe { ::core::mem::transmute(SPSEL) };
            SPSEL as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let FPCA: u32 = unsafe { ::core::mem::transmute(FPCA) };
            FPCA as u64
        });
        __bindgen_bitfield_unit.set(3usize, 29u8, {
            let _reserved0: u32 = unsafe { ::core::mem::transmute(_reserved0) };
            _reserved0 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_CONTROL_Type() {
    assert_eq!(
        ::core::mem::size_of::<CONTROL_Type>(),
        4usize,
        concat!("Size of: ", stringify!(CONTROL_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<CONTROL_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(CONTROL_Type))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<CONTROL_Type>())).b as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CONTROL_Type),
            "::",
            stringify!(b)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<CONTROL_Type>())).w as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CONTROL_Type),
            "::",
            stringify!(w)
        )
    );
}
/// \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
#[repr(C)]
pub struct NVIC_Type {
    /// < Offset: 0x000 (R/W)  Interrupt Set Enable Register
    pub ISER: [u32; 8usize],
    pub RESERVED0: [u32; 24usize],
    /// < Offset: 0x080 (R/W)  Interrupt Clear Enable Register
    pub ICER: [u32; 8usize],
    pub RSERVED1: [u32; 24usize],
    /// < Offset: 0x100 (R/W)  Interrupt Set Pending Register
    pub ISPR: [u32; 8usize],
    pub RESERVED2: [u32; 24usize],
    /// < Offset: 0x180 (R/W)  Interrupt Clear Pending Register
    pub ICPR: [u32; 8usize],
    pub RESERVED3: [u32; 24usize],
    /// < Offset: 0x200 (R/W)  Interrupt Active bit Register
    pub IABR: [u32; 8usize],
    pub RESERVED4: [u32; 56usize],
    /// < Offset: 0x300 (R/W)  Interrupt Priority Register (8Bit wide)
    pub IP: [u8; 240usize],
    pub RESERVED5: [u32; 644usize],
    /// < Offset: 0xE00 ( /W)  Software Trigger Interrupt Register
    pub STIR: u32,
}
#[test]
fn bindgen_test_layout_NVIC_Type() {
    assert_eq!(
        ::core::mem::size_of::<NVIC_Type>(),
        3588usize,
        concat!("Size of: ", stringify!(NVIC_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<NVIC_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(NVIC_Type))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<NVIC_Type>())).ISER as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NVIC_Type),
            "::",
            stringify!(ISER)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<NVIC_Type>())).RESERVED0 as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(NVIC_Type),
            "::",
            stringify!(RESERVED0)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<NVIC_Type>())).ICER as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(NVIC_Type),
            "::",
            stringify!(ICER)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<NVIC_Type>())).RSERVED1 as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(NVIC_Type),
            "::",
            stringify!(RSERVED1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<NVIC_Type>())).ISPR as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(NVIC_Type),
            "::",
            stringify!(ISPR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<NVIC_Type>())).RESERVED2 as *const _ as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(NVIC_Type),
            "::",
            stringify!(RESERVED2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<NVIC_Type>())).ICPR as *const _ as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(NVIC_Type),
            "::",
            stringify!(ICPR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<NVIC_Type>())).RESERVED3 as *const _ as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(NVIC_Type),
            "::",
            stringify!(RESERVED3)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<NVIC_Type>())).IABR as *const _ as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(NVIC_Type),
            "::",
            stringify!(IABR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<NVIC_Type>())).RESERVED4 as *const _ as usize },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(NVIC_Type),
            "::",
            stringify!(RESERVED4)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<NVIC_Type>())).IP as *const _ as usize },
        768usize,
        concat!(
            "Offset of field: ",
            stringify!(NVIC_Type),
            "::",
            stringify!(IP)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<NVIC_Type>())).RESERVED5 as *const _ as usize },
        1008usize,
        concat!(
            "Offset of field: ",
            stringify!(NVIC_Type),
            "::",
            stringify!(RESERVED5)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<NVIC_Type>())).STIR as *const _ as usize },
        3584usize,
        concat!(
            "Offset of field: ",
            stringify!(NVIC_Type),
            "::",
            stringify!(STIR)
        )
    );
}
/// \brief  Structure type to access the System Control Block (SCB).
#[repr(C)]
pub struct SCB_Type {
    /// < Offset: 0x000 (R/ )  CPUID Base Register
    pub CPUID: u32,
    /// < Offset: 0x004 (R/W)  Interrupt Control and State Register
    pub ICSR: u32,
    /// < Offset: 0x008 (R/W)  Vector Table Offset Register
    pub VTOR: u32,
    /// < Offset: 0x00C (R/W)  Application Interrupt and Reset Control Register
    pub AIRCR: u32,
    /// < Offset: 0x010 (R/W)  System Control Register
    pub SCR: u32,
    /// < Offset: 0x014 (R/W)  Configuration Control Register
    pub CCR: u32,
    /// < Offset: 0x018 (R/W)  System Handlers Priority Registers (4-7, 8-11, 12-15)
    pub SHP: [u8; 12usize],
    /// < Offset: 0x024 (R/W)  System Handler Control and State Register
    pub SHCSR: u32,
    /// < Offset: 0x028 (R/W)  Configurable Fault Status Register
    pub CFSR: u32,
    /// < Offset: 0x02C (R/W)  HardFault Status Register
    pub HFSR: u32,
    /// < Offset: 0x030 (R/W)  Debug Fault Status Register
    pub DFSR: u32,
    /// < Offset: 0x034 (R/W)  MemManage Fault Address Register
    pub MMFAR: u32,
    /// < Offset: 0x038 (R/W)  BusFault Address Register
    pub BFAR: u32,
    /// < Offset: 0x03C (R/W)  Auxiliary Fault Status Register
    pub AFSR: u32,
    /// < Offset: 0x040 (R/ )  Processor Feature Register
    pub PFR: [u32; 2usize],
    /// < Offset: 0x048 (R/ )  Debug Feature Register
    pub DFR: u32,
    /// < Offset: 0x04C (R/ )  Auxiliary Feature Register
    pub ADR: u32,
    /// < Offset: 0x050 (R/ )  Memory Model Feature Register
    pub MMFR: [u32; 4usize],
    /// < Offset: 0x060 (R/ )  Instruction Set Attributes Register
    pub ISAR: [u32; 5usize],
    pub RESERVED0: [u32; 5usize],
    /// < Offset: 0x088 (R/W)  Coprocessor Access Control Register
    pub CPACR: u32,
}
#[test]
fn bindgen_test_layout_SCB_Type() {
    assert_eq!(
        ::core::mem::size_of::<SCB_Type>(),
        140usize,
        concat!("Size of: ", stringify!(SCB_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<SCB_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(SCB_Type))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SCB_Type>())).CPUID as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SCB_Type),
            "::",
            stringify!(CPUID)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SCB_Type>())).ICSR as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SCB_Type),
            "::",
            stringify!(ICSR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SCB_Type>())).VTOR as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SCB_Type),
            "::",
            stringify!(VTOR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SCB_Type>())).AIRCR as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SCB_Type),
            "::",
            stringify!(AIRCR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SCB_Type>())).SCR as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SCB_Type),
            "::",
            stringify!(SCR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SCB_Type>())).CCR as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SCB_Type),
            "::",
            stringify!(CCR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SCB_Type>())).SHP as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SCB_Type),
            "::",
            stringify!(SHP)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SCB_Type>())).SHCSR as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(SCB_Type),
            "::",
            stringify!(SHCSR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SCB_Type>())).CFSR as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SCB_Type),
            "::",
            stringify!(CFSR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SCB_Type>())).HFSR as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(SCB_Type),
            "::",
            stringify!(HFSR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SCB_Type>())).DFSR as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(SCB_Type),
            "::",
            stringify!(DFSR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SCB_Type>())).MMFAR as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(SCB_Type),
            "::",
            stringify!(MMFAR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SCB_Type>())).BFAR as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(SCB_Type),
            "::",
            stringify!(BFAR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SCB_Type>())).AFSR as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(SCB_Type),
            "::",
            stringify!(AFSR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SCB_Type>())).PFR as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(SCB_Type),
            "::",
            stringify!(PFR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SCB_Type>())).DFR as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(SCB_Type),
            "::",
            stringify!(DFR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SCB_Type>())).ADR as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(SCB_Type),
            "::",
            stringify!(ADR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SCB_Type>())).MMFR as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(SCB_Type),
            "::",
            stringify!(MMFR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SCB_Type>())).ISAR as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(SCB_Type),
            "::",
            stringify!(ISAR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SCB_Type>())).RESERVED0 as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(SCB_Type),
            "::",
            stringify!(RESERVED0)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SCB_Type>())).CPACR as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(SCB_Type),
            "::",
            stringify!(CPACR)
        )
    );
}
/// \brief  Structure type to access the System Control and ID Register not in the SCB.
#[repr(C)]
pub struct SCnSCB_Type {
    pub RESERVED0: [u32; 1usize],
    /// < Offset: 0x004 (R/ )  Interrupt Controller Type Register
    pub ICTR: u32,
    /// < Offset: 0x008 (R/W)  Auxiliary Control Register
    pub ACTLR: u32,
}
#[test]
fn bindgen_test_layout_SCnSCB_Type() {
    assert_eq!(
        ::core::mem::size_of::<SCnSCB_Type>(),
        12usize,
        concat!("Size of: ", stringify!(SCnSCB_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<SCnSCB_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(SCnSCB_Type))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SCnSCB_Type>())).RESERVED0 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SCnSCB_Type),
            "::",
            stringify!(RESERVED0)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SCnSCB_Type>())).ICTR as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SCnSCB_Type),
            "::",
            stringify!(ICTR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SCnSCB_Type>())).ACTLR as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SCnSCB_Type),
            "::",
            stringify!(ACTLR)
        )
    );
}
/// \brief  Structure type to access the System Timer (SysTick).
#[repr(C)]
pub struct SysTick_Type {
    /// < Offset: 0x000 (R/W)  SysTick Control and Status Register
    pub CTRL: u32,
    /// < Offset: 0x004 (R/W)  SysTick Reload Value Register
    pub LOAD: u32,
    /// < Offset: 0x008 (R/W)  SysTick Current Value Register
    pub VAL: u32,
    /// < Offset: 0x00C (R/ )  SysTick Calibration Register
    pub CALIB: u32,
}
#[test]
fn bindgen_test_layout_SysTick_Type() {
    assert_eq!(
        ::core::mem::size_of::<SysTick_Type>(),
        16usize,
        concat!("Size of: ", stringify!(SysTick_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<SysTick_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(SysTick_Type))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SysTick_Type>())).CTRL as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SysTick_Type),
            "::",
            stringify!(CTRL)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SysTick_Type>())).LOAD as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SysTick_Type),
            "::",
            stringify!(LOAD)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SysTick_Type>())).VAL as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SysTick_Type),
            "::",
            stringify!(VAL)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SysTick_Type>())).CALIB as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SysTick_Type),
            "::",
            stringify!(CALIB)
        )
    );
}
/// \brief  Structure type to access the Instrumentation Trace Macrocell Register (ITM).
#[repr(C)]
pub struct ITM_Type {
    /// < Offset: 0x000 ( /W)  ITM Stimulus Port Registers
    pub PORT: [ITM_Type__bindgen_ty_1; 32usize],
    pub RESERVED0: [u32; 864usize],
    /// < Offset: 0xE00 (R/W)  ITM Trace Enable Register
    pub TER: u32,
    pub RESERVED1: [u32; 15usize],
    /// < Offset: 0xE40 (R/W)  ITM Trace Privilege Register
    pub TPR: u32,
    pub RESERVED2: [u32; 15usize],
    /// < Offset: 0xE80 (R/W)  ITM Trace Control Register
    pub TCR: u32,
    pub RESERVED3: [u32; 29usize],
    /// < Offset: 0xEF8 ( /W)  ITM Integration Write Register
    pub IWR: u32,
    /// < Offset: 0xEFC (R/ )  ITM Integration Read Register
    pub IRR: u32,
    /// < Offset: 0xF00 (R/W)  ITM Integration Mode Control Register
    pub IMCR: u32,
    pub RESERVED4: [u32; 43usize],
    /// < Offset: 0xFB0 ( /W)  ITM Lock Access Register
    pub LAR: u32,
    /// < Offset: 0xFB4 (R/ )  ITM Lock Status Register
    pub LSR: u32,
    pub RESERVED5: [u32; 6usize],
    /// < Offset: 0xFD0 (R/ )  ITM Peripheral Identification Register #4
    pub PID4: u32,
    /// < Offset: 0xFD4 (R/ )  ITM Peripheral Identification Register #5
    pub PID5: u32,
    /// < Offset: 0xFD8 (R/ )  ITM Peripheral Identification Register #6
    pub PID6: u32,
    /// < Offset: 0xFDC (R/ )  ITM Peripheral Identification Register #7
    pub PID7: u32,
    /// < Offset: 0xFE0 (R/ )  ITM Peripheral Identification Register #0
    pub PID0: u32,
    /// < Offset: 0xFE4 (R/ )  ITM Peripheral Identification Register #1
    pub PID1: u32,
    /// < Offset: 0xFE8 (R/ )  ITM Peripheral Identification Register #2
    pub PID2: u32,
    /// < Offset: 0xFEC (R/ )  ITM Peripheral Identification Register #3
    pub PID3: u32,
    /// < Offset: 0xFF0 (R/ )  ITM Component  Identification Register #0
    pub CID0: u32,
    /// < Offset: 0xFF4 (R/ )  ITM Component  Identification Register #1
    pub CID1: u32,
    /// < Offset: 0xFF8 (R/ )  ITM Component  Identification Register #2
    pub CID2: u32,
    /// < Offset: 0xFFC (R/ )  ITM Component  Identification Register #3
    pub CID3: u32,
}
#[repr(C)]
pub struct ITM_Type__bindgen_ty_1 {
    /// < Offset: 0x000 ( /W)  ITM Stimulus Port 8-bit
    pub u8: __BindgenUnionField<u8>,
    /// < Offset: 0x000 ( /W)  ITM Stimulus Port 16-bit
    pub u16: __BindgenUnionField<u16>,
    /// < Offset: 0x000 ( /W)  ITM Stimulus Port 32-bit
    pub u32: __BindgenUnionField<u32>,
    pub bindgen_union_field: u32,
}
#[test]
fn bindgen_test_layout_ITM_Type__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<ITM_Type__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(ITM_Type__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<ITM_Type__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(ITM_Type__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ITM_Type__bindgen_ty_1>())).u8 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type__bindgen_ty_1),
            "::",
            stringify!(u8)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ITM_Type__bindgen_ty_1>())).u16 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type__bindgen_ty_1),
            "::",
            stringify!(u16)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ITM_Type__bindgen_ty_1>())).u32 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type__bindgen_ty_1),
            "::",
            stringify!(u32)
        )
    );
}
#[test]
fn bindgen_test_layout_ITM_Type() {
    assert_eq!(
        ::core::mem::size_of::<ITM_Type>(),
        4096usize,
        concat!("Size of: ", stringify!(ITM_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<ITM_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(ITM_Type))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ITM_Type>())).PORT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(PORT)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ITM_Type>())).RESERVED0 as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(RESERVED0)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ITM_Type>())).TER as *const _ as usize },
        3584usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(TER)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ITM_Type>())).RESERVED1 as *const _ as usize },
        3588usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(RESERVED1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ITM_Type>())).TPR as *const _ as usize },
        3648usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(TPR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ITM_Type>())).RESERVED2 as *const _ as usize },
        3652usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(RESERVED2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ITM_Type>())).TCR as *const _ as usize },
        3712usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(TCR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ITM_Type>())).RESERVED3 as *const _ as usize },
        3716usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(RESERVED3)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ITM_Type>())).IWR as *const _ as usize },
        3832usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(IWR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ITM_Type>())).IRR as *const _ as usize },
        3836usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(IRR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ITM_Type>())).IMCR as *const _ as usize },
        3840usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(IMCR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ITM_Type>())).RESERVED4 as *const _ as usize },
        3844usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(RESERVED4)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ITM_Type>())).LAR as *const _ as usize },
        4016usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(LAR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ITM_Type>())).LSR as *const _ as usize },
        4020usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(LSR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ITM_Type>())).RESERVED5 as *const _ as usize },
        4024usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(RESERVED5)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ITM_Type>())).PID4 as *const _ as usize },
        4048usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(PID4)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ITM_Type>())).PID5 as *const _ as usize },
        4052usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(PID5)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ITM_Type>())).PID6 as *const _ as usize },
        4056usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(PID6)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ITM_Type>())).PID7 as *const _ as usize },
        4060usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(PID7)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ITM_Type>())).PID0 as *const _ as usize },
        4064usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(PID0)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ITM_Type>())).PID1 as *const _ as usize },
        4068usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(PID1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ITM_Type>())).PID2 as *const _ as usize },
        4072usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(PID2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ITM_Type>())).PID3 as *const _ as usize },
        4076usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(PID3)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ITM_Type>())).CID0 as *const _ as usize },
        4080usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(CID0)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ITM_Type>())).CID1 as *const _ as usize },
        4084usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(CID1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ITM_Type>())).CID2 as *const _ as usize },
        4088usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(CID2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ITM_Type>())).CID3 as *const _ as usize },
        4092usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(CID3)
        )
    );
}
/// \brief  Structure type to access the Data Watchpoint and Trace Register (DWT).
#[repr(C)]
pub struct DWT_Type {
    /// < Offset: 0x000 (R/W)  Control Register
    pub CTRL: u32,
    /// < Offset: 0x004 (R/W)  Cycle Count Register
    pub CYCCNT: u32,
    /// < Offset: 0x008 (R/W)  CPI Count Register
    pub CPICNT: u32,
    /// < Offset: 0x00C (R/W)  Exception Overhead Count Register
    pub EXCCNT: u32,
    /// < Offset: 0x010 (R/W)  Sleep Count Register
    pub SLEEPCNT: u32,
    /// < Offset: 0x014 (R/W)  LSU Count Register
    pub LSUCNT: u32,
    /// < Offset: 0x018 (R/W)  Folded-instruction Count Register
    pub FOLDCNT: u32,
    /// < Offset: 0x01C (R/ )  Program Counter Sample Register
    pub PCSR: u32,
    /// < Offset: 0x020 (R/W)  Comparator Register 0
    pub COMP0: u32,
    /// < Offset: 0x024 (R/W)  Mask Register 0
    pub MASK0: u32,
    /// < Offset: 0x028 (R/W)  Function Register 0
    pub FUNCTION0: u32,
    pub RESERVED0: [u32; 1usize],
    /// < Offset: 0x030 (R/W)  Comparator Register 1
    pub COMP1: u32,
    /// < Offset: 0x034 (R/W)  Mask Register 1
    pub MASK1: u32,
    /// < Offset: 0x038 (R/W)  Function Register 1
    pub FUNCTION1: u32,
    pub RESERVED1: [u32; 1usize],
    /// < Offset: 0x040 (R/W)  Comparator Register 2
    pub COMP2: u32,
    /// < Offset: 0x044 (R/W)  Mask Register 2
    pub MASK2: u32,
    /// < Offset: 0x048 (R/W)  Function Register 2
    pub FUNCTION2: u32,
    pub RESERVED2: [u32; 1usize],
    /// < Offset: 0x050 (R/W)  Comparator Register 3
    pub COMP3: u32,
    /// < Offset: 0x054 (R/W)  Mask Register 3
    pub MASK3: u32,
    /// < Offset: 0x058 (R/W)  Function Register 3
    pub FUNCTION3: u32,
}
#[test]
fn bindgen_test_layout_DWT_Type() {
    assert_eq!(
        ::core::mem::size_of::<DWT_Type>(),
        92usize,
        concat!("Size of: ", stringify!(DWT_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<DWT_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(DWT_Type))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<DWT_Type>())).CTRL as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DWT_Type),
            "::",
            stringify!(CTRL)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<DWT_Type>())).CYCCNT as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DWT_Type),
            "::",
            stringify!(CYCCNT)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<DWT_Type>())).CPICNT as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DWT_Type),
            "::",
            stringify!(CPICNT)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<DWT_Type>())).EXCCNT as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(DWT_Type),
            "::",
            stringify!(EXCCNT)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<DWT_Type>())).SLEEPCNT as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DWT_Type),
            "::",
            stringify!(SLEEPCNT)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<DWT_Type>())).LSUCNT as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(DWT_Type),
            "::",
            stringify!(LSUCNT)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<DWT_Type>())).FOLDCNT as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DWT_Type),
            "::",
            stringify!(FOLDCNT)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<DWT_Type>())).PCSR as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(DWT_Type),
            "::",
            stringify!(PCSR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<DWT_Type>())).COMP0 as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(DWT_Type),
            "::",
            stringify!(COMP0)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<DWT_Type>())).MASK0 as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(DWT_Type),
            "::",
            stringify!(MASK0)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<DWT_Type>())).FUNCTION0 as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(DWT_Type),
            "::",
            stringify!(FUNCTION0)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<DWT_Type>())).RESERVED0 as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(DWT_Type),
            "::",
            stringify!(RESERVED0)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<DWT_Type>())).COMP1 as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(DWT_Type),
            "::",
            stringify!(COMP1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<DWT_Type>())).MASK1 as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(DWT_Type),
            "::",
            stringify!(MASK1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<DWT_Type>())).FUNCTION1 as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(DWT_Type),
            "::",
            stringify!(FUNCTION1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<DWT_Type>())).RESERVED1 as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(DWT_Type),
            "::",
            stringify!(RESERVED1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<DWT_Type>())).COMP2 as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(DWT_Type),
            "::",
            stringify!(COMP2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<DWT_Type>())).MASK2 as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(DWT_Type),
            "::",
            stringify!(MASK2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<DWT_Type>())).FUNCTION2 as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(DWT_Type),
            "::",
            stringify!(FUNCTION2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<DWT_Type>())).RESERVED2 as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(DWT_Type),
            "::",
            stringify!(RESERVED2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<DWT_Type>())).COMP3 as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(DWT_Type),
            "::",
            stringify!(COMP3)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<DWT_Type>())).MASK3 as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(DWT_Type),
            "::",
            stringify!(MASK3)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<DWT_Type>())).FUNCTION3 as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(DWT_Type),
            "::",
            stringify!(FUNCTION3)
        )
    );
}
/// \brief  Structure type to access the Trace Port Interface Register (TPI).
#[repr(C)]
pub struct TPI_Type {
    /// < Offset: 0x000 (R/ )  Supported Parallel Port Size Register
    pub SSPSR: u32,
    /// < Offset: 0x004 (R/W)  Current Parallel Port Size Register
    pub CSPSR: u32,
    pub RESERVED0: [u32; 2usize],
    /// < Offset: 0x010 (R/W)  Asynchronous Clock Prescaler Register
    pub ACPR: u32,
    pub RESERVED1: [u32; 55usize],
    /// < Offset: 0x0F0 (R/W)  Selected Pin Protocol Register
    pub SPPR: u32,
    pub RESERVED2: [u32; 131usize],
    /// < Offset: 0x300 (R/ )  Formatter and Flush Status Register
    pub FFSR: u32,
    /// < Offset: 0x304 (R/W)  Formatter and Flush Control Register
    pub FFCR: u32,
    /// < Offset: 0x308 (R/ )  Formatter Synchronization Counter Register
    pub FSCR: u32,
    pub RESERVED3: [u32; 759usize],
    /// < Offset: 0xEE8 (R/ )  TRIGGER
    pub TRIGGER: u32,
    /// < Offset: 0xEEC (R/ )  Integration ETM Data
    pub FIFO0: u32,
    /// < Offset: 0xEF0 (R/ )  ITATBCTR2
    pub ITATBCTR2: u32,
    pub RESERVED4: [u32; 1usize],
    /// < Offset: 0xEF8 (R/ )  ITATBCTR0
    pub ITATBCTR0: u32,
    /// < Offset: 0xEFC (R/ )  Integration ITM Data
    pub FIFO1: u32,
    /// < Offset: 0xF00 (R/W)  Integration Mode Control
    pub ITCTRL: u32,
    pub RESERVED5: [u32; 39usize],
    /// < Offset: 0xFA0 (R/W)  Claim tag set
    pub CLAIMSET: u32,
    /// < Offset: 0xFA4 (R/W)  Claim tag clear
    pub CLAIMCLR: u32,
    pub RESERVED7: [u32; 8usize],
    /// < Offset: 0xFC8 (R/ )  TPIU_DEVID
    pub DEVID: u32,
    /// < Offset: 0xFCC (R/ )  TPIU_DEVTYPE
    pub DEVTYPE: u32,
}
#[test]
fn bindgen_test_layout_TPI_Type() {
    assert_eq!(
        ::core::mem::size_of::<TPI_Type>(),
        4048usize,
        concat!("Size of: ", stringify!(TPI_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<TPI_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(TPI_Type))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<TPI_Type>())).SSPSR as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TPI_Type),
            "::",
            stringify!(SSPSR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<TPI_Type>())).CSPSR as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(TPI_Type),
            "::",
            stringify!(CSPSR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<TPI_Type>())).RESERVED0 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TPI_Type),
            "::",
            stringify!(RESERVED0)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<TPI_Type>())).ACPR as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TPI_Type),
            "::",
            stringify!(ACPR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<TPI_Type>())).RESERVED1 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(TPI_Type),
            "::",
            stringify!(RESERVED1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<TPI_Type>())).SPPR as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(TPI_Type),
            "::",
            stringify!(SPPR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<TPI_Type>())).RESERVED2 as *const _ as usize },
        244usize,
        concat!(
            "Offset of field: ",
            stringify!(TPI_Type),
            "::",
            stringify!(RESERVED2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<TPI_Type>())).FFSR as *const _ as usize },
        768usize,
        concat!(
            "Offset of field: ",
            stringify!(TPI_Type),
            "::",
            stringify!(FFSR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<TPI_Type>())).FFCR as *const _ as usize },
        772usize,
        concat!(
            "Offset of field: ",
            stringify!(TPI_Type),
            "::",
            stringify!(FFCR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<TPI_Type>())).FSCR as *const _ as usize },
        776usize,
        concat!(
            "Offset of field: ",
            stringify!(TPI_Type),
            "::",
            stringify!(FSCR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<TPI_Type>())).RESERVED3 as *const _ as usize },
        780usize,
        concat!(
            "Offset of field: ",
            stringify!(TPI_Type),
            "::",
            stringify!(RESERVED3)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<TPI_Type>())).TRIGGER as *const _ as usize },
        3816usize,
        concat!(
            "Offset of field: ",
            stringify!(TPI_Type),
            "::",
            stringify!(TRIGGER)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<TPI_Type>())).FIFO0 as *const _ as usize },
        3820usize,
        concat!(
            "Offset of field: ",
            stringify!(TPI_Type),
            "::",
            stringify!(FIFO0)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<TPI_Type>())).ITATBCTR2 as *const _ as usize },
        3824usize,
        concat!(
            "Offset of field: ",
            stringify!(TPI_Type),
            "::",
            stringify!(ITATBCTR2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<TPI_Type>())).RESERVED4 as *const _ as usize },
        3828usize,
        concat!(
            "Offset of field: ",
            stringify!(TPI_Type),
            "::",
            stringify!(RESERVED4)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<TPI_Type>())).ITATBCTR0 as *const _ as usize },
        3832usize,
        concat!(
            "Offset of field: ",
            stringify!(TPI_Type),
            "::",
            stringify!(ITATBCTR0)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<TPI_Type>())).FIFO1 as *const _ as usize },
        3836usize,
        concat!(
            "Offset of field: ",
            stringify!(TPI_Type),
            "::",
            stringify!(FIFO1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<TPI_Type>())).ITCTRL as *const _ as usize },
        3840usize,
        concat!(
            "Offset of field: ",
            stringify!(TPI_Type),
            "::",
            stringify!(ITCTRL)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<TPI_Type>())).RESERVED5 as *const _ as usize },
        3844usize,
        concat!(
            "Offset of field: ",
            stringify!(TPI_Type),
            "::",
            stringify!(RESERVED5)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<TPI_Type>())).CLAIMSET as *const _ as usize },
        4000usize,
        concat!(
            "Offset of field: ",
            stringify!(TPI_Type),
            "::",
            stringify!(CLAIMSET)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<TPI_Type>())).CLAIMCLR as *const _ as usize },
        4004usize,
        concat!(
            "Offset of field: ",
            stringify!(TPI_Type),
            "::",
            stringify!(CLAIMCLR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<TPI_Type>())).RESERVED7 as *const _ as usize },
        4008usize,
        concat!(
            "Offset of field: ",
            stringify!(TPI_Type),
            "::",
            stringify!(RESERVED7)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<TPI_Type>())).DEVID as *const _ as usize },
        4040usize,
        concat!(
            "Offset of field: ",
            stringify!(TPI_Type),
            "::",
            stringify!(DEVID)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<TPI_Type>())).DEVTYPE as *const _ as usize },
        4044usize,
        concat!(
            "Offset of field: ",
            stringify!(TPI_Type),
            "::",
            stringify!(DEVTYPE)
        )
    );
}
/// \brief  Structure type to access the Memory Protection Unit (MPU).
#[repr(C)]
pub struct MPU_Type {
    /// < Offset: 0x000 (R/ )  MPU Type Register
    pub TYPE: u32,
    /// < Offset: 0x004 (R/W)  MPU Control Register
    pub CTRL: u32,
    /// < Offset: 0x008 (R/W)  MPU Region RNRber Register
    pub RNR: u32,
    /// < Offset: 0x00C (R/W)  MPU Region Base Address Register
    pub RBAR: u32,
    /// < Offset: 0x010 (R/W)  MPU Region Attribute and Size Register
    pub RASR: u32,
    /// < Offset: 0x014 (R/W)  MPU Alias 1 Region Base Address Register
    pub RBAR_A1: u32,
    /// < Offset: 0x018 (R/W)  MPU Alias 1 Region Attribute and Size Register
    pub RASR_A1: u32,
    /// < Offset: 0x01C (R/W)  MPU Alias 2 Region Base Address Register
    pub RBAR_A2: u32,
    /// < Offset: 0x020 (R/W)  MPU Alias 2 Region Attribute and Size Register
    pub RASR_A2: u32,
    /// < Offset: 0x024 (R/W)  MPU Alias 3 Region Base Address Register
    pub RBAR_A3: u32,
    /// < Offset: 0x028 (R/W)  MPU Alias 3 Region Attribute and Size Register
    pub RASR_A3: u32,
}
#[test]
fn bindgen_test_layout_MPU_Type() {
    assert_eq!(
        ::core::mem::size_of::<MPU_Type>(),
        44usize,
        concat!("Size of: ", stringify!(MPU_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<MPU_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(MPU_Type))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<MPU_Type>())).TYPE as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MPU_Type),
            "::",
            stringify!(TYPE)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<MPU_Type>())).CTRL as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(MPU_Type),
            "::",
            stringify!(CTRL)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<MPU_Type>())).RNR as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(MPU_Type),
            "::",
            stringify!(RNR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<MPU_Type>())).RBAR as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(MPU_Type),
            "::",
            stringify!(RBAR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<MPU_Type>())).RASR as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(MPU_Type),
            "::",
            stringify!(RASR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<MPU_Type>())).RBAR_A1 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(MPU_Type),
            "::",
            stringify!(RBAR_A1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<MPU_Type>())).RASR_A1 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(MPU_Type),
            "::",
            stringify!(RASR_A1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<MPU_Type>())).RBAR_A2 as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(MPU_Type),
            "::",
            stringify!(RBAR_A2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<MPU_Type>())).RASR_A2 as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(MPU_Type),
            "::",
            stringify!(RASR_A2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<MPU_Type>())).RBAR_A3 as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(MPU_Type),
            "::",
            stringify!(RBAR_A3)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<MPU_Type>())).RASR_A3 as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(MPU_Type),
            "::",
            stringify!(RASR_A3)
        )
    );
}
/// \brief  Structure type to access the Floating Point Unit (FPU).
#[repr(C)]
pub struct FPU_Type {
    pub RESERVED0: [u32; 1usize],
    /// < Offset: 0x004 (R/W)  Floating-Point Context Control Register
    pub FPCCR: u32,
    /// < Offset: 0x008 (R/W)  Floating-Point Context Address Register
    pub FPCAR: u32,
    /// < Offset: 0x00C (R/W)  Floating-Point Default Status Control Register
    pub FPDSCR: u32,
    /// < Offset: 0x010 (R/ )  Media and FP Feature Register 0
    pub MVFR0: u32,
    /// < Offset: 0x014 (R/ )  Media and FP Feature Register 1
    pub MVFR1: u32,
}
#[test]
fn bindgen_test_layout_FPU_Type() {
    assert_eq!(
        ::core::mem::size_of::<FPU_Type>(),
        24usize,
        concat!("Size of: ", stringify!(FPU_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<FPU_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(FPU_Type))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<FPU_Type>())).RESERVED0 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FPU_Type),
            "::",
            stringify!(RESERVED0)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<FPU_Type>())).FPCCR as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FPU_Type),
            "::",
            stringify!(FPCCR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<FPU_Type>())).FPCAR as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FPU_Type),
            "::",
            stringify!(FPCAR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<FPU_Type>())).FPDSCR as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(FPU_Type),
            "::",
            stringify!(FPDSCR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<FPU_Type>())).MVFR0 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FPU_Type),
            "::",
            stringify!(MVFR0)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<FPU_Type>())).MVFR1 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(FPU_Type),
            "::",
            stringify!(MVFR1)
        )
    );
}
/// \brief  Structure type to access the Core Debug Register (CoreDebug).
#[repr(C)]
pub struct CoreDebug_Type {
    /// < Offset: 0x000 (R/W)  Debug Halting Control and Status Register
    pub DHCSR: u32,
    /// < Offset: 0x004 ( /W)  Debug Core Register Selector Register
    pub DCRSR: u32,
    /// < Offset: 0x008 (R/W)  Debug Core Register Data Register
    pub DCRDR: u32,
    /// < Offset: 0x00C (R/W)  Debug Exception and Monitor Control Register
    pub DEMCR: u32,
}
#[test]
fn bindgen_test_layout_CoreDebug_Type() {
    assert_eq!(
        ::core::mem::size_of::<CoreDebug_Type>(),
        16usize,
        concat!("Size of: ", stringify!(CoreDebug_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<CoreDebug_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(CoreDebug_Type))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<CoreDebug_Type>())).DHCSR as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CoreDebug_Type),
            "::",
            stringify!(DHCSR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<CoreDebug_Type>())).DCRSR as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CoreDebug_Type),
            "::",
            stringify!(DCRSR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<CoreDebug_Type>())).DCRDR as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CoreDebug_Type),
            "::",
            stringify!(DCRDR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<CoreDebug_Type>())).DEMCR as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(CoreDebug_Type),
            "::",
            stringify!(DEMCR)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}ITM_RxBuffer"]
    pub static mut ITM_RxBuffer: i32;
}
extern "C" {
    #[link_name = "\u{1}SystemCoreClock"]
    pub static mut SystemCoreClock: u32;
}
extern "C" {
    #[link_name = "\u{1}AHBPrescTable"]
    pub static mut AHBPrescTable: [u8; 16usize];
}
extern "C" {
    #[link_name = "\u{1}APBPrescTable"]
    pub static mut APBPrescTable: [u8; 8usize];
}
extern "C" {
    /// @addtogroup STM32F4xx_System_Exported_Functions
    /// @{
    pub fn SystemInit();
}
extern "C" {
    pub fn SystemCoreClockUpdate();
}
/// @brief Analog to Digital Converter
#[repr(C)]
pub struct ADC_TypeDef {
    /// < ADC status register,                         Address offset: 0x00
    pub SR: u32,
    /// < ADC control register 1,                      Address offset: 0x04
    pub CR1: u32,
    /// < ADC control register 2,                      Address offset: 0x08
    pub CR2: u32,
    /// < ADC sample time register 1,                  Address offset: 0x0C
    pub SMPR1: u32,
    /// < ADC sample time register 2,                  Address offset: 0x10
    pub SMPR2: u32,
    /// < ADC injected channel data offset register 1, Address offset: 0x14
    pub JOFR1: u32,
    /// < ADC injected channel data offset register 2, Address offset: 0x18
    pub JOFR2: u32,
    /// < ADC injected channel data offset register 3, Address offset: 0x1C
    pub JOFR3: u32,
    /// < ADC injected channel data offset register 4, Address offset: 0x20
    pub JOFR4: u32,
    /// < ADC watchdog higher threshold register,      Address offset: 0x24
    pub HTR: u32,
    /// < ADC watchdog lower threshold register,       Address offset: 0x28
    pub LTR: u32,
    /// < ADC regular sequence register 1,             Address offset: 0x2C
    pub SQR1: u32,
    /// < ADC regular sequence register 2,             Address offset: 0x30
    pub SQR2: u32,
    /// < ADC regular sequence register 3,             Address offset: 0x34
    pub SQR3: u32,
    /// < ADC injected sequence register,              Address offset: 0x38
    pub JSQR: u32,
    /// < ADC injected data register 1,                Address offset: 0x3C
    pub JDR1: u32,
    /// < ADC injected data register 2,                Address offset: 0x40
    pub JDR2: u32,
    /// < ADC injected data register 3,                Address offset: 0x44
    pub JDR3: u32,
    /// < ADC injected data register 4,                Address offset: 0x48
    pub JDR4: u32,
    /// < ADC regular data register,                   Address offset: 0x4C
    pub DR: u32,
}
#[test]
fn bindgen_test_layout_ADC_TypeDef() {
    assert_eq!(
        ::core::mem::size_of::<ADC_TypeDef>(),
        80usize,
        concat!("Size of: ", stringify!(ADC_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<ADC_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(ADC_TypeDef))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ADC_TypeDef>())).SR as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(SR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ADC_TypeDef>())).CR1 as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(CR1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ADC_TypeDef>())).CR2 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(CR2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ADC_TypeDef>())).SMPR1 as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(SMPR1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ADC_TypeDef>())).SMPR2 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(SMPR2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ADC_TypeDef>())).JOFR1 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(JOFR1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ADC_TypeDef>())).JOFR2 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(JOFR2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ADC_TypeDef>())).JOFR3 as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(JOFR3)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ADC_TypeDef>())).JOFR4 as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(JOFR4)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ADC_TypeDef>())).HTR as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(HTR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ADC_TypeDef>())).LTR as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(LTR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ADC_TypeDef>())).SQR1 as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(SQR1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ADC_TypeDef>())).SQR2 as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(SQR2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ADC_TypeDef>())).SQR3 as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(SQR3)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ADC_TypeDef>())).JSQR as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(JSQR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ADC_TypeDef>())).JDR1 as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(JDR1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ADC_TypeDef>())).JDR2 as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(JDR2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ADC_TypeDef>())).JDR3 as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(JDR3)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ADC_TypeDef>())).JDR4 as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(JDR4)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ADC_TypeDef>())).DR as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(DR)
        )
    );
}
#[repr(C)]
pub struct ADC_Common_TypeDef {
    /// < ADC Common status register,                  Address offset: ADC1 base address + 0x300
    pub CSR: u32,
    /// < ADC common control register,                 Address offset: ADC1 base address + 0x304
    pub CCR: u32,
    /// < ADC common regular data register for dual
    /// AND triple modes,                            Address offset: ADC1 base address + 0x308
    pub CDR: u32,
}
#[test]
fn bindgen_test_layout_ADC_Common_TypeDef() {
    assert_eq!(
        ::core::mem::size_of::<ADC_Common_TypeDef>(),
        12usize,
        concat!("Size of: ", stringify!(ADC_Common_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<ADC_Common_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(ADC_Common_TypeDef))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ADC_Common_TypeDef>())).CSR as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_Common_TypeDef),
            "::",
            stringify!(CSR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ADC_Common_TypeDef>())).CCR as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_Common_TypeDef),
            "::",
            stringify!(CCR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ADC_Common_TypeDef>())).CDR as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_Common_TypeDef),
            "::",
            stringify!(CDR)
        )
    );
}
/// @brief CRC calculation unit
#[repr(C)]
pub struct CRC_TypeDef {
    /// < CRC Data register,             Address offset: 0x00
    pub DR: u32,
    /// < CRC Independent data register, Address offset: 0x04
    pub IDR: u8,
    /// < Reserved, 0x05
    pub RESERVED0: u8,
    /// < Reserved, 0x06
    pub RESERVED1: u16,
    /// < CRC Control register,          Address offset: 0x08
    pub CR: u32,
}
#[test]
fn bindgen_test_layout_CRC_TypeDef() {
    assert_eq!(
        ::core::mem::size_of::<CRC_TypeDef>(),
        12usize,
        concat!("Size of: ", stringify!(CRC_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<CRC_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(CRC_TypeDef))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<CRC_TypeDef>())).DR as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CRC_TypeDef),
            "::",
            stringify!(DR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<CRC_TypeDef>())).IDR as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CRC_TypeDef),
            "::",
            stringify!(IDR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<CRC_TypeDef>())).RESERVED0 as *const _ as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(CRC_TypeDef),
            "::",
            stringify!(RESERVED0)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<CRC_TypeDef>())).RESERVED1 as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(CRC_TypeDef),
            "::",
            stringify!(RESERVED1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<CRC_TypeDef>())).CR as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CRC_TypeDef),
            "::",
            stringify!(CR)
        )
    );
}
/// @brief Debug MCU
#[repr(C)]
pub struct DBGMCU_TypeDef {
    /// < MCU device ID code,               Address offset: 0x00
    pub IDCODE: u32,
    /// < Debug MCU configuration register, Address offset: 0x04
    pub CR: u32,
    /// < Debug MCU APB1 freeze register,   Address offset: 0x08
    pub APB1FZ: u32,
    /// < Debug MCU APB2 freeze register,   Address offset: 0x0C
    pub APB2FZ: u32,
}
#[test]
fn bindgen_test_layout_DBGMCU_TypeDef() {
    assert_eq!(
        ::core::mem::size_of::<DBGMCU_TypeDef>(),
        16usize,
        concat!("Size of: ", stringify!(DBGMCU_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<DBGMCU_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(DBGMCU_TypeDef))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<DBGMCU_TypeDef>())).IDCODE as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DBGMCU_TypeDef),
            "::",
            stringify!(IDCODE)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<DBGMCU_TypeDef>())).CR as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DBGMCU_TypeDef),
            "::",
            stringify!(CR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<DBGMCU_TypeDef>())).APB1FZ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DBGMCU_TypeDef),
            "::",
            stringify!(APB1FZ)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<DBGMCU_TypeDef>())).APB2FZ as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(DBGMCU_TypeDef),
            "::",
            stringify!(APB2FZ)
        )
    );
}
/// @brief DMA Controller
#[repr(C)]
pub struct DMA_Stream_TypeDef {
    /// < DMA stream x configuration register
    pub CR: u32,
    /// < DMA stream x number of data register
    pub NDTR: u32,
    /// < DMA stream x peripheral address register
    pub PAR: u32,
    /// < DMA stream x memory 0 address register
    pub M0AR: u32,
    /// < DMA stream x memory 1 address register
    pub M1AR: u32,
    /// < DMA stream x FIFO control register
    pub FCR: u32,
}
#[test]
fn bindgen_test_layout_DMA_Stream_TypeDef() {
    assert_eq!(
        ::core::mem::size_of::<DMA_Stream_TypeDef>(),
        24usize,
        concat!("Size of: ", stringify!(DMA_Stream_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<DMA_Stream_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(DMA_Stream_TypeDef))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<DMA_Stream_TypeDef>())).CR as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_Stream_TypeDef),
            "::",
            stringify!(CR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<DMA_Stream_TypeDef>())).NDTR as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_Stream_TypeDef),
            "::",
            stringify!(NDTR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<DMA_Stream_TypeDef>())).PAR as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_Stream_TypeDef),
            "::",
            stringify!(PAR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<DMA_Stream_TypeDef>())).M0AR as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_Stream_TypeDef),
            "::",
            stringify!(M0AR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<DMA_Stream_TypeDef>())).M1AR as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_Stream_TypeDef),
            "::",
            stringify!(M1AR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<DMA_Stream_TypeDef>())).FCR as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_Stream_TypeDef),
            "::",
            stringify!(FCR)
        )
    );
}
#[repr(C)]
pub struct DMA_TypeDef {
    /// < DMA low interrupt status register,      Address offset: 0x00
    pub LISR: u32,
    /// < DMA high interrupt status register,     Address offset: 0x04
    pub HISR: u32,
    /// < DMA low interrupt flag clear register,  Address offset: 0x08
    pub LIFCR: u32,
    /// < DMA high interrupt flag clear register, Address offset: 0x0C
    pub HIFCR: u32,
}
#[test]
fn bindgen_test_layout_DMA_TypeDef() {
    assert_eq!(
        ::core::mem::size_of::<DMA_TypeDef>(),
        16usize,
        concat!("Size of: ", stringify!(DMA_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<DMA_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(DMA_TypeDef))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<DMA_TypeDef>())).LISR as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_TypeDef),
            "::",
            stringify!(LISR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<DMA_TypeDef>())).HISR as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_TypeDef),
            "::",
            stringify!(HISR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<DMA_TypeDef>())).LIFCR as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_TypeDef),
            "::",
            stringify!(LIFCR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<DMA_TypeDef>())).HIFCR as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_TypeDef),
            "::",
            stringify!(HIFCR)
        )
    );
}
/// @brief External Interrupt/Event Controller
#[repr(C)]
pub struct EXTI_TypeDef {
    /// < EXTI Interrupt mask register,            Address offset: 0x00
    pub IMR: u32,
    /// < EXTI Event mask register,                Address offset: 0x04
    pub EMR: u32,
    /// < EXTI Rising trigger selection register,  Address offset: 0x08
    pub RTSR: u32,
    /// < EXTI Falling trigger selection register, Address offset: 0x0C
    pub FTSR: u32,
    /// < EXTI Software interrupt event register,  Address offset: 0x10
    pub SWIER: u32,
    /// < EXTI Pending register,                   Address offset: 0x14
    pub PR: u32,
}
#[test]
fn bindgen_test_layout_EXTI_TypeDef() {
    assert_eq!(
        ::core::mem::size_of::<EXTI_TypeDef>(),
        24usize,
        concat!("Size of: ", stringify!(EXTI_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<EXTI_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(EXTI_TypeDef))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<EXTI_TypeDef>())).IMR as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(EXTI_TypeDef),
            "::",
            stringify!(IMR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<EXTI_TypeDef>())).EMR as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(EXTI_TypeDef),
            "::",
            stringify!(EMR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<EXTI_TypeDef>())).RTSR as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(EXTI_TypeDef),
            "::",
            stringify!(RTSR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<EXTI_TypeDef>())).FTSR as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(EXTI_TypeDef),
            "::",
            stringify!(FTSR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<EXTI_TypeDef>())).SWIER as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(EXTI_TypeDef),
            "::",
            stringify!(SWIER)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<EXTI_TypeDef>())).PR as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(EXTI_TypeDef),
            "::",
            stringify!(PR)
        )
    );
}
/// @brief FLASH Registers
#[repr(C)]
pub struct FLASH_TypeDef {
    /// < FLASH access control register,   Address offset: 0x00
    pub ACR: u32,
    /// < FLASH key register,              Address offset: 0x04
    pub KEYR: u32,
    /// < FLASH option key register,       Address offset: 0x08
    pub OPTKEYR: u32,
    /// < FLASH status register,           Address offset: 0x0C
    pub SR: u32,
    /// < FLASH control register,          Address offset: 0x10
    pub CR: u32,
    /// < FLASH option control register ,  Address offset: 0x14
    pub OPTCR: u32,
    /// < FLASH option control register 1, Address offset: 0x18
    pub OPTCR1: u32,
}
#[test]
fn bindgen_test_layout_FLASH_TypeDef() {
    assert_eq!(
        ::core::mem::size_of::<FLASH_TypeDef>(),
        28usize,
        concat!("Size of: ", stringify!(FLASH_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<FLASH_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(FLASH_TypeDef))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<FLASH_TypeDef>())).ACR as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FLASH_TypeDef),
            "::",
            stringify!(ACR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<FLASH_TypeDef>())).KEYR as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FLASH_TypeDef),
            "::",
            stringify!(KEYR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<FLASH_TypeDef>())).OPTKEYR as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FLASH_TypeDef),
            "::",
            stringify!(OPTKEYR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<FLASH_TypeDef>())).SR as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(FLASH_TypeDef),
            "::",
            stringify!(SR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<FLASH_TypeDef>())).CR as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FLASH_TypeDef),
            "::",
            stringify!(CR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<FLASH_TypeDef>())).OPTCR as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(FLASH_TypeDef),
            "::",
            stringify!(OPTCR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<FLASH_TypeDef>())).OPTCR1 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FLASH_TypeDef),
            "::",
            stringify!(OPTCR1)
        )
    );
}
/// @brief General Purpose I/O
#[repr(C)]
pub struct GPIO_TypeDef {
    /// < GPIO port mode register,               Address offset: 0x00
    pub MODER: u32,
    /// < GPIO port output type register,        Address offset: 0x04
    pub OTYPER: u32,
    /// < GPIO port output speed register,       Address offset: 0x08
    pub OSPEEDR: u32,
    /// < GPIO port pull-up/pull-down register,  Address offset: 0x0C
    pub PUPDR: u32,
    /// < GPIO port input data register,         Address offset: 0x10
    pub IDR: u32,
    /// < GPIO port output data register,        Address offset: 0x14
    pub ODR: u32,
    /// < GPIO port bit set/reset register,      Address offset: 0x18
    pub BSRR: u32,
    /// < GPIO port configuration lock register, Address offset: 0x1C
    pub LCKR: u32,
    /// < GPIO alternate function registers,     Address offset: 0x20-0x24
    pub AFR: [u32; 2usize],
}
#[test]
fn bindgen_test_layout_GPIO_TypeDef() {
    assert_eq!(
        ::core::mem::size_of::<GPIO_TypeDef>(),
        40usize,
        concat!("Size of: ", stringify!(GPIO_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<GPIO_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(GPIO_TypeDef))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<GPIO_TypeDef>())).MODER as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GPIO_TypeDef),
            "::",
            stringify!(MODER)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<GPIO_TypeDef>())).OTYPER as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(GPIO_TypeDef),
            "::",
            stringify!(OTYPER)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<GPIO_TypeDef>())).OSPEEDR as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GPIO_TypeDef),
            "::",
            stringify!(OSPEEDR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<GPIO_TypeDef>())).PUPDR as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(GPIO_TypeDef),
            "::",
            stringify!(PUPDR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<GPIO_TypeDef>())).IDR as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(GPIO_TypeDef),
            "::",
            stringify!(IDR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<GPIO_TypeDef>())).ODR as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(GPIO_TypeDef),
            "::",
            stringify!(ODR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<GPIO_TypeDef>())).BSRR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(GPIO_TypeDef),
            "::",
            stringify!(BSRR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<GPIO_TypeDef>())).LCKR as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(GPIO_TypeDef),
            "::",
            stringify!(LCKR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<GPIO_TypeDef>())).AFR as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(GPIO_TypeDef),
            "::",
            stringify!(AFR)
        )
    );
}
/// @brief System configuration controller
#[repr(C)]
pub struct SYSCFG_TypeDef {
    /// < SYSCFG memory remap register,                      Address offset: 0x00
    pub MEMRMP: u32,
    /// < SYSCFG peripheral mode configuration register,     Address offset: 0x04
    pub PMC: u32,
    /// < SYSCFG external interrupt configuration registers, Address offset: 0x08-0x14
    pub EXTICR: [u32; 4usize],
    /// < Reserved, 0x18-0x1C
    pub RESERVED: [u32; 2usize],
    /// < SYSCFG Compensation cell control register,         Address offset: 0x20
    pub CMPCR: u32,
}
#[test]
fn bindgen_test_layout_SYSCFG_TypeDef() {
    assert_eq!(
        ::core::mem::size_of::<SYSCFG_TypeDef>(),
        36usize,
        concat!("Size of: ", stringify!(SYSCFG_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<SYSCFG_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(SYSCFG_TypeDef))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SYSCFG_TypeDef>())).MEMRMP as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SYSCFG_TypeDef),
            "::",
            stringify!(MEMRMP)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SYSCFG_TypeDef>())).PMC as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SYSCFG_TypeDef),
            "::",
            stringify!(PMC)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SYSCFG_TypeDef>())).EXTICR as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SYSCFG_TypeDef),
            "::",
            stringify!(EXTICR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SYSCFG_TypeDef>())).RESERVED as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SYSCFG_TypeDef),
            "::",
            stringify!(RESERVED)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SYSCFG_TypeDef>())).CMPCR as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SYSCFG_TypeDef),
            "::",
            stringify!(CMPCR)
        )
    );
}
/// @brief Inter-integrated Circuit Interface
#[repr(C)]
pub struct I2C_TypeDef {
    /// < I2C Control register 1,     Address offset: 0x00
    pub CR1: u32,
    /// < I2C Control register 2,     Address offset: 0x04
    pub CR2: u32,
    /// < I2C Own address register 1, Address offset: 0x08
    pub OAR1: u32,
    /// < I2C Own address register 2, Address offset: 0x0C
    pub OAR2: u32,
    /// < I2C Data register,          Address offset: 0x10
    pub DR: u32,
    /// < I2C Status register 1,      Address offset: 0x14
    pub SR1: u32,
    /// < I2C Status register 2,      Address offset: 0x18
    pub SR2: u32,
    /// < I2C Clock control register, Address offset: 0x1C
    pub CCR: u32,
    /// < I2C TRISE register,         Address offset: 0x20
    pub TRISE: u32,
    /// < I2C FLTR register,          Address offset: 0x24
    pub FLTR: u32,
}
#[test]
fn bindgen_test_layout_I2C_TypeDef() {
    assert_eq!(
        ::core::mem::size_of::<I2C_TypeDef>(),
        40usize,
        concat!("Size of: ", stringify!(I2C_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<I2C_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(I2C_TypeDef))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<I2C_TypeDef>())).CR1 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(I2C_TypeDef),
            "::",
            stringify!(CR1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<I2C_TypeDef>())).CR2 as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(I2C_TypeDef),
            "::",
            stringify!(CR2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<I2C_TypeDef>())).OAR1 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(I2C_TypeDef),
            "::",
            stringify!(OAR1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<I2C_TypeDef>())).OAR2 as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(I2C_TypeDef),
            "::",
            stringify!(OAR2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<I2C_TypeDef>())).DR as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(I2C_TypeDef),
            "::",
            stringify!(DR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<I2C_TypeDef>())).SR1 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(I2C_TypeDef),
            "::",
            stringify!(SR1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<I2C_TypeDef>())).SR2 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(I2C_TypeDef),
            "::",
            stringify!(SR2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<I2C_TypeDef>())).CCR as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(I2C_TypeDef),
            "::",
            stringify!(CCR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<I2C_TypeDef>())).TRISE as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(I2C_TypeDef),
            "::",
            stringify!(TRISE)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<I2C_TypeDef>())).FLTR as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(I2C_TypeDef),
            "::",
            stringify!(FLTR)
        )
    );
}
/// @brief Independent WATCHDOG
#[repr(C)]
pub struct IWDG_TypeDef {
    /// < IWDG Key register,       Address offset: 0x00
    pub KR: u32,
    /// < IWDG Prescaler register, Address offset: 0x04
    pub PR: u32,
    /// < IWDG Reload register,    Address offset: 0x08
    pub RLR: u32,
    /// < IWDG Status register,    Address offset: 0x0C
    pub SR: u32,
}
#[test]
fn bindgen_test_layout_IWDG_TypeDef() {
    assert_eq!(
        ::core::mem::size_of::<IWDG_TypeDef>(),
        16usize,
        concat!("Size of: ", stringify!(IWDG_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<IWDG_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(IWDG_TypeDef))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<IWDG_TypeDef>())).KR as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IWDG_TypeDef),
            "::",
            stringify!(KR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<IWDG_TypeDef>())).PR as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(IWDG_TypeDef),
            "::",
            stringify!(PR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<IWDG_TypeDef>())).RLR as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IWDG_TypeDef),
            "::",
            stringify!(RLR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<IWDG_TypeDef>())).SR as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(IWDG_TypeDef),
            "::",
            stringify!(SR)
        )
    );
}
/// @brief Power Control
#[repr(C)]
pub struct PWR_TypeDef {
    /// < PWR power control register,        Address offset: 0x00
    pub CR: u32,
    /// < PWR power control/status register, Address offset: 0x04
    pub CSR: u32,
}
#[test]
fn bindgen_test_layout_PWR_TypeDef() {
    assert_eq!(
        ::core::mem::size_of::<PWR_TypeDef>(),
        8usize,
        concat!("Size of: ", stringify!(PWR_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<PWR_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(PWR_TypeDef))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<PWR_TypeDef>())).CR as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PWR_TypeDef),
            "::",
            stringify!(CR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<PWR_TypeDef>())).CSR as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(PWR_TypeDef),
            "::",
            stringify!(CSR)
        )
    );
}
/// @brief Reset and Clock Control
#[repr(C)]
pub struct RCC_TypeDef {
    /// < RCC clock control register,                                  Address offset: 0x00
    pub CR: u32,
    /// < RCC PLL configuration register,                              Address offset: 0x04
    pub PLLCFGR: u32,
    /// < RCC clock configuration register,                            Address offset: 0x08
    pub CFGR: u32,
    /// < RCC clock interrupt register,                                Address offset: 0x0C
    pub CIR: u32,
    /// < RCC AHB1 peripheral reset register,                          Address offset: 0x10
    pub AHB1RSTR: u32,
    /// < RCC AHB2 peripheral reset register,                          Address offset: 0x14
    pub AHB2RSTR: u32,
    /// < RCC AHB3 peripheral reset register,                          Address offset: 0x18
    pub AHB3RSTR: u32,
    /// < Reserved, 0x1C
    pub RESERVED0: u32,
    /// < RCC APB1 peripheral reset register,                          Address offset: 0x20
    pub APB1RSTR: u32,
    /// < RCC APB2 peripheral reset register,                          Address offset: 0x24
    pub APB2RSTR: u32,
    /// < Reserved, 0x28-0x2C
    pub RESERVED1: [u32; 2usize],
    /// < RCC AHB1 peripheral clock register,                          Address offset: 0x30
    pub AHB1ENR: u32,
    /// < RCC AHB2 peripheral clock register,                          Address offset: 0x34
    pub AHB2ENR: u32,
    /// < RCC AHB3 peripheral clock register,                          Address offset: 0x38
    pub AHB3ENR: u32,
    /// < Reserved, 0x3C
    pub RESERVED2: u32,
    /// < RCC APB1 peripheral clock enable register,                   Address offset: 0x40
    pub APB1ENR: u32,
    /// < RCC APB2 peripheral clock enable register,                   Address offset: 0x44
    pub APB2ENR: u32,
    /// < Reserved, 0x48-0x4C
    pub RESERVED3: [u32; 2usize],
    /// < RCC AHB1 peripheral clock enable in low power mode register, Address offset: 0x50
    pub AHB1LPENR: u32,
    /// < RCC AHB2 peripheral clock enable in low power mode register, Address offset: 0x54
    pub AHB2LPENR: u32,
    /// < RCC AHB3 peripheral clock enable in low power mode register, Address offset: 0x58
    pub AHB3LPENR: u32,
    /// < Reserved, 0x5C
    pub RESERVED4: u32,
    /// < RCC APB1 peripheral clock enable in low power mode register, Address offset: 0x60
    pub APB1LPENR: u32,
    /// < RCC APB2 peripheral clock enable in low power mode register, Address offset: 0x64
    pub APB2LPENR: u32,
    /// < Reserved, 0x68-0x6C
    pub RESERVED5: [u32; 2usize],
    /// < RCC Backup domain control register,                          Address offset: 0x70
    pub BDCR: u32,
    /// < RCC clock control & status register,                         Address offset: 0x74
    pub CSR: u32,
    /// < Reserved, 0x78-0x7C
    pub RESERVED6: [u32; 2usize],
    /// < RCC spread spectrum clock generation register,               Address offset: 0x80
    pub SSCGR: u32,
    /// < RCC PLLI2S configuration register,                           Address offset: 0x84
    pub PLLI2SCFGR: u32,
    /// < Reserved, 0x88
    pub RESERVED7: [u32; 1usize],
    /// < RCC Dedicated Clocks configuration register,                 Address offset: 0x8C
    pub DCKCFGR: u32,
}
#[test]
fn bindgen_test_layout_RCC_TypeDef() {
    assert_eq!(
        ::core::mem::size_of::<RCC_TypeDef>(),
        144usize,
        concat!("Size of: ", stringify!(RCC_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<RCC_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(RCC_TypeDef))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RCC_TypeDef>())).CR as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(CR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RCC_TypeDef>())).PLLCFGR as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(PLLCFGR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RCC_TypeDef>())).CFGR as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(CFGR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RCC_TypeDef>())).CIR as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(CIR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RCC_TypeDef>())).AHB1RSTR as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(AHB1RSTR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RCC_TypeDef>())).AHB2RSTR as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(AHB2RSTR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RCC_TypeDef>())).AHB3RSTR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(AHB3RSTR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RCC_TypeDef>())).RESERVED0 as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(RESERVED0)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RCC_TypeDef>())).APB1RSTR as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(APB1RSTR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RCC_TypeDef>())).APB2RSTR as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(APB2RSTR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RCC_TypeDef>())).RESERVED1 as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(RESERVED1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RCC_TypeDef>())).AHB1ENR as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(AHB1ENR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RCC_TypeDef>())).AHB2ENR as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(AHB2ENR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RCC_TypeDef>())).AHB3ENR as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(AHB3ENR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RCC_TypeDef>())).RESERVED2 as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(RESERVED2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RCC_TypeDef>())).APB1ENR as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(APB1ENR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RCC_TypeDef>())).APB2ENR as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(APB2ENR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RCC_TypeDef>())).RESERVED3 as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(RESERVED3)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RCC_TypeDef>())).AHB1LPENR as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(AHB1LPENR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RCC_TypeDef>())).AHB2LPENR as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(AHB2LPENR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RCC_TypeDef>())).AHB3LPENR as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(AHB3LPENR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RCC_TypeDef>())).RESERVED4 as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(RESERVED4)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RCC_TypeDef>())).APB1LPENR as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(APB1LPENR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RCC_TypeDef>())).APB2LPENR as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(APB2LPENR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RCC_TypeDef>())).RESERVED5 as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(RESERVED5)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RCC_TypeDef>())).BDCR as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(BDCR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RCC_TypeDef>())).CSR as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(CSR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RCC_TypeDef>())).RESERVED6 as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(RESERVED6)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RCC_TypeDef>())).SSCGR as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(SSCGR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RCC_TypeDef>())).PLLI2SCFGR as *const _ as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(PLLI2SCFGR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RCC_TypeDef>())).RESERVED7 as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(RESERVED7)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RCC_TypeDef>())).DCKCFGR as *const _ as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(DCKCFGR)
        )
    );
}
/// @brief Real-Time Clock
#[repr(C)]
pub struct RTC_TypeDef {
    /// < RTC time register,                                        Address offset: 0x00
    pub TR: u32,
    /// < RTC date register,                                        Address offset: 0x04
    pub DR: u32,
    /// < RTC control register,                                     Address offset: 0x08
    pub CR: u32,
    /// < RTC initialization and status register,                   Address offset: 0x0C
    pub ISR: u32,
    /// < RTC prescaler register,                                   Address offset: 0x10
    pub PRER: u32,
    /// < RTC wakeup timer register,                                Address offset: 0x14
    pub WUTR: u32,
    /// < RTC calibration register,                                 Address offset: 0x18
    pub CALIBR: u32,
    /// < RTC alarm A register,                                     Address offset: 0x1C
    pub ALRMAR: u32,
    /// < RTC alarm B register,                                     Address offset: 0x20
    pub ALRMBR: u32,
    /// < RTC write protection register,                            Address offset: 0x24
    pub WPR: u32,
    /// < RTC sub second register,                                  Address offset: 0x28
    pub SSR: u32,
    /// < RTC shift control register,                               Address offset: 0x2C
    pub SHIFTR: u32,
    /// < RTC time stamp time register,                             Address offset: 0x30
    pub TSTR: u32,
    /// < RTC time stamp date register,                             Address offset: 0x34
    pub TSDR: u32,
    /// < RTC time-stamp sub second register,                       Address offset: 0x38
    pub TSSSR: u32,
    /// < RTC calibration register,                                 Address offset: 0x3C
    pub CALR: u32,
    /// < RTC tamper and alternate function configuration register, Address offset: 0x40
    pub TAFCR: u32,
    /// < RTC alarm A sub second register,                          Address offset: 0x44
    pub ALRMASSR: u32,
    /// < RTC alarm B sub second register,                          Address offset: 0x48
    pub ALRMBSSR: u32,
    /// < Reserved, 0x4C
    pub RESERVED7: u32,
    /// < RTC backup register 1,                                    Address offset: 0x50
    pub BKP0R: u32,
    /// < RTC backup register 1,                                    Address offset: 0x54
    pub BKP1R: u32,
    /// < RTC backup register 2,                                    Address offset: 0x58
    pub BKP2R: u32,
    /// < RTC backup register 3,                                    Address offset: 0x5C
    pub BKP3R: u32,
    /// < RTC backup register 4,                                    Address offset: 0x60
    pub BKP4R: u32,
    /// < RTC backup register 5,                                    Address offset: 0x64
    pub BKP5R: u32,
    /// < RTC backup register 6,                                    Address offset: 0x68
    pub BKP6R: u32,
    /// < RTC backup register 7,                                    Address offset: 0x6C
    pub BKP7R: u32,
    /// < RTC backup register 8,                                    Address offset: 0x70
    pub BKP8R: u32,
    /// < RTC backup register 9,                                    Address offset: 0x74
    pub BKP9R: u32,
    /// < RTC backup register 10,                                   Address offset: 0x78
    pub BKP10R: u32,
    /// < RTC backup register 11,                                   Address offset: 0x7C
    pub BKP11R: u32,
    /// < RTC backup register 12,                                   Address offset: 0x80
    pub BKP12R: u32,
    /// < RTC backup register 13,                                   Address offset: 0x84
    pub BKP13R: u32,
    /// < RTC backup register 14,                                   Address offset: 0x88
    pub BKP14R: u32,
    /// < RTC backup register 15,                                   Address offset: 0x8C
    pub BKP15R: u32,
    /// < RTC backup register 16,                                   Address offset: 0x90
    pub BKP16R: u32,
    /// < RTC backup register 17,                                   Address offset: 0x94
    pub BKP17R: u32,
    /// < RTC backup register 18,                                   Address offset: 0x98
    pub BKP18R: u32,
    /// < RTC backup register 19,                                   Address offset: 0x9C
    pub BKP19R: u32,
}
#[test]
fn bindgen_test_layout_RTC_TypeDef() {
    assert_eq!(
        ::core::mem::size_of::<RTC_TypeDef>(),
        160usize,
        concat!("Size of: ", stringify!(RTC_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<RTC_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(RTC_TypeDef))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RTC_TypeDef>())).TR as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(TR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RTC_TypeDef>())).DR as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(DR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RTC_TypeDef>())).CR as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(CR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RTC_TypeDef>())).ISR as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(ISR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RTC_TypeDef>())).PRER as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(PRER)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RTC_TypeDef>())).WUTR as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(WUTR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RTC_TypeDef>())).CALIBR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(CALIBR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RTC_TypeDef>())).ALRMAR as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(ALRMAR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RTC_TypeDef>())).ALRMBR as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(ALRMBR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RTC_TypeDef>())).WPR as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(WPR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RTC_TypeDef>())).SSR as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(SSR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RTC_TypeDef>())).SHIFTR as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(SHIFTR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RTC_TypeDef>())).TSTR as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(TSTR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RTC_TypeDef>())).TSDR as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(TSDR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RTC_TypeDef>())).TSSSR as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(TSSSR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RTC_TypeDef>())).CALR as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(CALR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RTC_TypeDef>())).TAFCR as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(TAFCR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RTC_TypeDef>())).ALRMASSR as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(ALRMASSR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RTC_TypeDef>())).ALRMBSSR as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(ALRMBSSR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RTC_TypeDef>())).RESERVED7 as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(RESERVED7)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RTC_TypeDef>())).BKP0R as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(BKP0R)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RTC_TypeDef>())).BKP1R as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(BKP1R)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RTC_TypeDef>())).BKP2R as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(BKP2R)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RTC_TypeDef>())).BKP3R as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(BKP3R)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RTC_TypeDef>())).BKP4R as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(BKP4R)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RTC_TypeDef>())).BKP5R as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(BKP5R)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RTC_TypeDef>())).BKP6R as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(BKP6R)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RTC_TypeDef>())).BKP7R as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(BKP7R)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RTC_TypeDef>())).BKP8R as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(BKP8R)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RTC_TypeDef>())).BKP9R as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(BKP9R)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RTC_TypeDef>())).BKP10R as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(BKP10R)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RTC_TypeDef>())).BKP11R as *const _ as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(BKP11R)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RTC_TypeDef>())).BKP12R as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(BKP12R)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RTC_TypeDef>())).BKP13R as *const _ as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(BKP13R)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RTC_TypeDef>())).BKP14R as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(BKP14R)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RTC_TypeDef>())).BKP15R as *const _ as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(BKP15R)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RTC_TypeDef>())).BKP16R as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(BKP16R)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RTC_TypeDef>())).BKP17R as *const _ as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(BKP17R)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RTC_TypeDef>())).BKP18R as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(BKP18R)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<RTC_TypeDef>())).BKP19R as *const _ as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(BKP19R)
        )
    );
}
/// @brief SD host Interface
#[repr(C)]
pub struct SDIO_TypeDef {
    /// < SDIO power control register,    Address offset: 0x00
    pub POWER: u32,
    /// < SDI clock control register,     Address offset: 0x04
    pub CLKCR: u32,
    /// < SDIO argument register,         Address offset: 0x08
    pub ARG: u32,
    /// < SDIO command register,          Address offset: 0x0C
    pub CMD: u32,
    /// < SDIO command response register, Address offset: 0x10
    pub RESPCMD: u32,
    /// < SDIO response 1 register,       Address offset: 0x14
    pub RESP1: u32,
    /// < SDIO response 2 register,       Address offset: 0x18
    pub RESP2: u32,
    /// < SDIO response 3 register,       Address offset: 0x1C
    pub RESP3: u32,
    /// < SDIO response 4 register,       Address offset: 0x20
    pub RESP4: u32,
    /// < SDIO data timer register,       Address offset: 0x24
    pub DTIMER: u32,
    /// < SDIO data length register,      Address offset: 0x28
    pub DLEN: u32,
    /// < SDIO data control register,     Address offset: 0x2C
    pub DCTRL: u32,
    /// < SDIO data counter register,     Address offset: 0x30
    pub DCOUNT: u32,
    /// < SDIO status register,           Address offset: 0x34
    pub STA: u32,
    /// < SDIO interrupt clear register,  Address offset: 0x38
    pub ICR: u32,
    /// < SDIO mask register,             Address offset: 0x3C
    pub MASK: u32,
    /// < Reserved, 0x40-0x44
    pub RESERVED0: [u32; 2usize],
    /// < SDIO FIFO counter register,     Address offset: 0x48
    pub FIFOCNT: u32,
    /// < Reserved, 0x4C-0x7C
    pub RESERVED1: [u32; 13usize],
    /// < SDIO data FIFO register,        Address offset: 0x80
    pub FIFO: u32,
}
#[test]
fn bindgen_test_layout_SDIO_TypeDef() {
    assert_eq!(
        ::core::mem::size_of::<SDIO_TypeDef>(),
        132usize,
        concat!("Size of: ", stringify!(SDIO_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<SDIO_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(SDIO_TypeDef))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDIO_TypeDef>())).POWER as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDIO_TypeDef),
            "::",
            stringify!(POWER)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDIO_TypeDef>())).CLKCR as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SDIO_TypeDef),
            "::",
            stringify!(CLKCR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDIO_TypeDef>())).ARG as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDIO_TypeDef),
            "::",
            stringify!(ARG)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDIO_TypeDef>())).CMD as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SDIO_TypeDef),
            "::",
            stringify!(CMD)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDIO_TypeDef>())).RESPCMD as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDIO_TypeDef),
            "::",
            stringify!(RESPCMD)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDIO_TypeDef>())).RESP1 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SDIO_TypeDef),
            "::",
            stringify!(RESP1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDIO_TypeDef>())).RESP2 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SDIO_TypeDef),
            "::",
            stringify!(RESP2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDIO_TypeDef>())).RESP3 as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(SDIO_TypeDef),
            "::",
            stringify!(RESP3)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDIO_TypeDef>())).RESP4 as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SDIO_TypeDef),
            "::",
            stringify!(RESP4)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDIO_TypeDef>())).DTIMER as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(SDIO_TypeDef),
            "::",
            stringify!(DTIMER)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDIO_TypeDef>())).DLEN as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SDIO_TypeDef),
            "::",
            stringify!(DLEN)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDIO_TypeDef>())).DCTRL as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(SDIO_TypeDef),
            "::",
            stringify!(DCTRL)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDIO_TypeDef>())).DCOUNT as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(SDIO_TypeDef),
            "::",
            stringify!(DCOUNT)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDIO_TypeDef>())).STA as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(SDIO_TypeDef),
            "::",
            stringify!(STA)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDIO_TypeDef>())).ICR as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(SDIO_TypeDef),
            "::",
            stringify!(ICR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDIO_TypeDef>())).MASK as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(SDIO_TypeDef),
            "::",
            stringify!(MASK)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDIO_TypeDef>())).RESERVED0 as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(SDIO_TypeDef),
            "::",
            stringify!(RESERVED0)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDIO_TypeDef>())).FIFOCNT as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(SDIO_TypeDef),
            "::",
            stringify!(FIFOCNT)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDIO_TypeDef>())).RESERVED1 as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(SDIO_TypeDef),
            "::",
            stringify!(RESERVED1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SDIO_TypeDef>())).FIFO as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(SDIO_TypeDef),
            "::",
            stringify!(FIFO)
        )
    );
}
/// @brief Serial Peripheral Interface
#[repr(C)]
pub struct SPI_TypeDef {
    /// < SPI control register 1 (not used in I2S mode),      Address offset: 0x00
    pub CR1: u32,
    /// < SPI control register 2,                             Address offset: 0x04
    pub CR2: u32,
    /// < SPI status register,                                Address offset: 0x08
    pub SR: u32,
    /// < SPI data register,                                  Address offset: 0x0C
    pub DR: u32,
    /// < SPI CRC polynomial register (not used in I2S mode), Address offset: 0x10
    pub CRCPR: u32,
    /// < SPI RX CRC register (not used in I2S mode),         Address offset: 0x14
    pub RXCRCR: u32,
    /// < SPI TX CRC register (not used in I2S mode),         Address offset: 0x18
    pub TXCRCR: u32,
    /// < SPI_I2S configuration register,                     Address offset: 0x1C
    pub I2SCFGR: u32,
    /// < SPI_I2S prescaler register,                         Address offset: 0x20
    pub I2SPR: u32,
}
#[test]
fn bindgen_test_layout_SPI_TypeDef() {
    assert_eq!(
        ::core::mem::size_of::<SPI_TypeDef>(),
        36usize,
        concat!("Size of: ", stringify!(SPI_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<SPI_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(SPI_TypeDef))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SPI_TypeDef>())).CR1 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SPI_TypeDef),
            "::",
            stringify!(CR1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SPI_TypeDef>())).CR2 as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SPI_TypeDef),
            "::",
            stringify!(CR2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SPI_TypeDef>())).SR as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SPI_TypeDef),
            "::",
            stringify!(SR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SPI_TypeDef>())).DR as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SPI_TypeDef),
            "::",
            stringify!(DR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SPI_TypeDef>())).CRCPR as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SPI_TypeDef),
            "::",
            stringify!(CRCPR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SPI_TypeDef>())).RXCRCR as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SPI_TypeDef),
            "::",
            stringify!(RXCRCR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SPI_TypeDef>())).TXCRCR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SPI_TypeDef),
            "::",
            stringify!(TXCRCR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SPI_TypeDef>())).I2SCFGR as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(SPI_TypeDef),
            "::",
            stringify!(I2SCFGR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SPI_TypeDef>())).I2SPR as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SPI_TypeDef),
            "::",
            stringify!(I2SPR)
        )
    );
}
/// @brief TIM
#[repr(C)]
pub struct TIM_TypeDef {
    /// < TIM control register 1,              Address offset: 0x00
    pub CR1: u32,
    /// < TIM control register 2,              Address offset: 0x04
    pub CR2: u32,
    /// < TIM slave mode control register,     Address offset: 0x08
    pub SMCR: u32,
    /// < TIM DMA/interrupt enable register,   Address offset: 0x0C
    pub DIER: u32,
    /// < TIM status register,                 Address offset: 0x10
    pub SR: u32,
    /// < TIM event generation register,       Address offset: 0x14
    pub EGR: u32,
    /// < TIM capture/compare mode register 1, Address offset: 0x18
    pub CCMR1: u32,
    /// < TIM capture/compare mode register 2, Address offset: 0x1C
    pub CCMR2: u32,
    /// < TIM capture/compare enable register, Address offset: 0x20
    pub CCER: u32,
    /// < TIM counter register,                Address offset: 0x24
    pub CNT: u32,
    /// < TIM prescaler,                       Address offset: 0x28
    pub PSC: u32,
    /// < TIM auto-reload register,            Address offset: 0x2C
    pub ARR: u32,
    /// < TIM repetition counter register,     Address offset: 0x30
    pub RCR: u32,
    /// < TIM capture/compare register 1,      Address offset: 0x34
    pub CCR1: u32,
    /// < TIM capture/compare register 2,      Address offset: 0x38
    pub CCR2: u32,
    /// < TIM capture/compare register 3,      Address offset: 0x3C
    pub CCR3: u32,
    /// < TIM capture/compare register 4,      Address offset: 0x40
    pub CCR4: u32,
    /// < TIM break and dead-time register,    Address offset: 0x44
    pub BDTR: u32,
    /// < TIM DMA control register,            Address offset: 0x48
    pub DCR: u32,
    /// < TIM DMA address for full transfer,   Address offset: 0x4C
    pub DMAR: u32,
    /// < TIM option register,                 Address offset: 0x50
    pub OR: u32,
}
#[test]
fn bindgen_test_layout_TIM_TypeDef() {
    assert_eq!(
        ::core::mem::size_of::<TIM_TypeDef>(),
        84usize,
        concat!("Size of: ", stringify!(TIM_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<TIM_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(TIM_TypeDef))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<TIM_TypeDef>())).CR1 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(CR1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<TIM_TypeDef>())).CR2 as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(CR2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<TIM_TypeDef>())).SMCR as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(SMCR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<TIM_TypeDef>())).DIER as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(DIER)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<TIM_TypeDef>())).SR as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(SR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<TIM_TypeDef>())).EGR as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(EGR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<TIM_TypeDef>())).CCMR1 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(CCMR1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<TIM_TypeDef>())).CCMR2 as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(CCMR2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<TIM_TypeDef>())).CCER as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(CCER)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<TIM_TypeDef>())).CNT as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(CNT)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<TIM_TypeDef>())).PSC as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(PSC)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<TIM_TypeDef>())).ARR as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(ARR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<TIM_TypeDef>())).RCR as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(RCR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<TIM_TypeDef>())).CCR1 as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(CCR1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<TIM_TypeDef>())).CCR2 as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(CCR2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<TIM_TypeDef>())).CCR3 as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(CCR3)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<TIM_TypeDef>())).CCR4 as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(CCR4)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<TIM_TypeDef>())).BDTR as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(BDTR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<TIM_TypeDef>())).DCR as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(DCR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<TIM_TypeDef>())).DMAR as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(DMAR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<TIM_TypeDef>())).OR as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(OR)
        )
    );
}
/// @brief Universal Synchronous Asynchronous Receiver Transmitter
#[repr(C)]
pub struct USART_TypeDef {
    /// < USART Status register,                   Address offset: 0x00
    pub SR: u32,
    /// < USART Data register,                     Address offset: 0x04
    pub DR: u32,
    /// < USART Baud rate register,                Address offset: 0x08
    pub BRR: u32,
    /// < USART Control register 1,                Address offset: 0x0C
    pub CR1: u32,
    /// < USART Control register 2,                Address offset: 0x10
    pub CR2: u32,
    /// < USART Control register 3,                Address offset: 0x14
    pub CR3: u32,
    /// < USART Guard time and prescaler register, Address offset: 0x18
    pub GTPR: u32,
}
#[test]
fn bindgen_test_layout_USART_TypeDef() {
    assert_eq!(
        ::core::mem::size_of::<USART_TypeDef>(),
        28usize,
        concat!("Size of: ", stringify!(USART_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<USART_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(USART_TypeDef))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<USART_TypeDef>())).SR as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(USART_TypeDef),
            "::",
            stringify!(SR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<USART_TypeDef>())).DR as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(USART_TypeDef),
            "::",
            stringify!(DR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<USART_TypeDef>())).BRR as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(USART_TypeDef),
            "::",
            stringify!(BRR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<USART_TypeDef>())).CR1 as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(USART_TypeDef),
            "::",
            stringify!(CR1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<USART_TypeDef>())).CR2 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(USART_TypeDef),
            "::",
            stringify!(CR2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<USART_TypeDef>())).CR3 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(USART_TypeDef),
            "::",
            stringify!(CR3)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<USART_TypeDef>())).GTPR as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(USART_TypeDef),
            "::",
            stringify!(GTPR)
        )
    );
}
/// @brief Window WATCHDOG
#[repr(C)]
pub struct WWDG_TypeDef {
    /// < WWDG Control register,       Address offset: 0x00
    pub CR: u32,
    /// < WWDG Configuration register, Address offset: 0x04
    pub CFR: u32,
    /// < WWDG Status register,        Address offset: 0x08
    pub SR: u32,
}
#[test]
fn bindgen_test_layout_WWDG_TypeDef() {
    assert_eq!(
        ::core::mem::size_of::<WWDG_TypeDef>(),
        12usize,
        concat!("Size of: ", stringify!(WWDG_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<WWDG_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(WWDG_TypeDef))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<WWDG_TypeDef>())).CR as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WWDG_TypeDef),
            "::",
            stringify!(CR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<WWDG_TypeDef>())).CFR as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(WWDG_TypeDef),
            "::",
            stringify!(CFR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<WWDG_TypeDef>())).SR as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WWDG_TypeDef),
            "::",
            stringify!(SR)
        )
    );
}
/// @brief USB_OTG_Core_Registers
#[repr(C)]
pub struct USB_OTG_GlobalTypeDef {
    /// < USB_OTG Control and Status Register          000h
    pub GOTGCTL: u32,
    /// < USB_OTG Interrupt Register                   004h
    pub GOTGINT: u32,
    /// < Core AHB Configuration Register              008h
    pub GAHBCFG: u32,
    /// < Core USB Configuration Register              00Ch
    pub GUSBCFG: u32,
    /// < Core Reset Register                          010h
    pub GRSTCTL: u32,
    /// < Core Interrupt Register                      014h
    pub GINTSTS: u32,
    /// < Core Interrupt Mask Register                 018h
    pub GINTMSK: u32,
    /// < Receive Sts Q Read Register                  01Ch
    pub GRXSTSR: u32,
    /// < Receive Sts Q Read & POP Register            020h
    pub GRXSTSP: u32,
    /// < Receive FIFO Size Register                   024h
    pub GRXFSIZ: u32,
    /// < EP0 / Non Periodic Tx FIFO Size Register     028h
    pub DIEPTXF0_HNPTXFSIZ: u32,
    /// < Non Periodic Tx FIFO/Queue Sts reg           02Ch
    pub HNPTXSTS: u32,
    /// < Reserved                                     030h
    pub Reserved30: [u32; 2usize],
    /// < General Purpose IO Register                  038h
    pub GCCFG: u32,
    /// < User ID Register                             03Ch
    pub CID: u32,
    /// < Reserved                                0x40-0xFF
    pub Reserved40: [u32; 48usize],
    /// < Host Periodic Tx FIFO Size Reg               100h
    pub HPTXFSIZ: u32,
    /// < dev Periodic Transmit FIFO
    pub DIEPTXF: [u32; 15usize],
}
#[test]
fn bindgen_test_layout_USB_OTG_GlobalTypeDef() {
    assert_eq!(
        ::core::mem::size_of::<USB_OTG_GlobalTypeDef>(),
        320usize,
        concat!("Size of: ", stringify!(USB_OTG_GlobalTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<USB_OTG_GlobalTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(USB_OTG_GlobalTypeDef))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<USB_OTG_GlobalTypeDef>())).GOTGCTL as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_GlobalTypeDef),
            "::",
            stringify!(GOTGCTL)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<USB_OTG_GlobalTypeDef>())).GOTGINT as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_GlobalTypeDef),
            "::",
            stringify!(GOTGINT)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<USB_OTG_GlobalTypeDef>())).GAHBCFG as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_GlobalTypeDef),
            "::",
            stringify!(GAHBCFG)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<USB_OTG_GlobalTypeDef>())).GUSBCFG as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_GlobalTypeDef),
            "::",
            stringify!(GUSBCFG)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<USB_OTG_GlobalTypeDef>())).GRSTCTL as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_GlobalTypeDef),
            "::",
            stringify!(GRSTCTL)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<USB_OTG_GlobalTypeDef>())).GINTSTS as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_GlobalTypeDef),
            "::",
            stringify!(GINTSTS)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<USB_OTG_GlobalTypeDef>())).GINTMSK as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_GlobalTypeDef),
            "::",
            stringify!(GINTMSK)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<USB_OTG_GlobalTypeDef>())).GRXSTSR as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_GlobalTypeDef),
            "::",
            stringify!(GRXSTSR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<USB_OTG_GlobalTypeDef>())).GRXSTSP as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_GlobalTypeDef),
            "::",
            stringify!(GRXSTSP)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<USB_OTG_GlobalTypeDef>())).GRXFSIZ as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_GlobalTypeDef),
            "::",
            stringify!(GRXFSIZ)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<USB_OTG_GlobalTypeDef>())).DIEPTXF0_HNPTXFSIZ as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_GlobalTypeDef),
            "::",
            stringify!(DIEPTXF0_HNPTXFSIZ)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<USB_OTG_GlobalTypeDef>())).HNPTXSTS as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_GlobalTypeDef),
            "::",
            stringify!(HNPTXSTS)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<USB_OTG_GlobalTypeDef>())).Reserved30 as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_GlobalTypeDef),
            "::",
            stringify!(Reserved30)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<USB_OTG_GlobalTypeDef>())).GCCFG as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_GlobalTypeDef),
            "::",
            stringify!(GCCFG)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<USB_OTG_GlobalTypeDef>())).CID as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_GlobalTypeDef),
            "::",
            stringify!(CID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<USB_OTG_GlobalTypeDef>())).Reserved40 as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_GlobalTypeDef),
            "::",
            stringify!(Reserved40)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<USB_OTG_GlobalTypeDef>())).HPTXFSIZ as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_GlobalTypeDef),
            "::",
            stringify!(HPTXFSIZ)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<USB_OTG_GlobalTypeDef>())).DIEPTXF as *const _ as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_GlobalTypeDef),
            "::",
            stringify!(DIEPTXF)
        )
    );
}
/// @brief USB_OTG_device_Registers
#[repr(C)]
pub struct USB_OTG_DeviceTypeDef {
    /// < dev Configuration Register   800h
    pub DCFG: u32,
    /// < dev Control Register         804h
    pub DCTL: u32,
    /// < dev Status Register (RO)     808h
    pub DSTS: u32,
    /// < Reserved                     80Ch
    pub Reserved0C: u32,
    /// < dev IN Endpoint Mask         810h
    pub DIEPMSK: u32,
    /// < dev OUT Endpoint Mask        814h
    pub DOEPMSK: u32,
    /// < dev All Endpoints Itr Reg    818h
    pub DAINT: u32,
    /// < dev All Endpoints Itr Mask   81Ch
    pub DAINTMSK: u32,
    /// < Reserved                     820h
    pub Reserved20: u32,
    /// < Reserved                     824h
    pub Reserved9: u32,
    /// < dev VBUS discharge Register  828h
    pub DVBUSDIS: u32,
    /// < dev VBUS Pulse Register      82Ch
    pub DVBUSPULSE: u32,
    /// < dev threshold                830h
    pub DTHRCTL: u32,
    /// < dev empty msk                834h
    pub DIEPEMPMSK: u32,
    /// < dedicated EP interrupt       838h
    pub DEACHINT: u32,
    /// < dedicated EP msk             83Ch
    pub DEACHMSK: u32,
    /// < dedicated EP mask            840h
    pub Reserved40: u32,
    /// < dedicated EP mask            844h
    pub DINEP1MSK: u32,
    /// < Reserved                 844-87Ch
    pub Reserved44: [u32; 15usize],
    /// < dedicated EP msk             884h
    pub DOUTEP1MSK: u32,
}
#[test]
fn bindgen_test_layout_USB_OTG_DeviceTypeDef() {
    assert_eq!(
        ::core::mem::size_of::<USB_OTG_DeviceTypeDef>(),
        136usize,
        concat!("Size of: ", stringify!(USB_OTG_DeviceTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<USB_OTG_DeviceTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(USB_OTG_DeviceTypeDef))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<USB_OTG_DeviceTypeDef>())).DCFG as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_DeviceTypeDef),
            "::",
            stringify!(DCFG)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<USB_OTG_DeviceTypeDef>())).DCTL as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_DeviceTypeDef),
            "::",
            stringify!(DCTL)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<USB_OTG_DeviceTypeDef>())).DSTS as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_DeviceTypeDef),
            "::",
            stringify!(DSTS)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<USB_OTG_DeviceTypeDef>())).Reserved0C as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_DeviceTypeDef),
            "::",
            stringify!(Reserved0C)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<USB_OTG_DeviceTypeDef>())).DIEPMSK as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_DeviceTypeDef),
            "::",
            stringify!(DIEPMSK)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<USB_OTG_DeviceTypeDef>())).DOEPMSK as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_DeviceTypeDef),
            "::",
            stringify!(DOEPMSK)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<USB_OTG_DeviceTypeDef>())).DAINT as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_DeviceTypeDef),
            "::",
            stringify!(DAINT)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<USB_OTG_DeviceTypeDef>())).DAINTMSK as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_DeviceTypeDef),
            "::",
            stringify!(DAINTMSK)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<USB_OTG_DeviceTypeDef>())).Reserved20 as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_DeviceTypeDef),
            "::",
            stringify!(Reserved20)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<USB_OTG_DeviceTypeDef>())).Reserved9 as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_DeviceTypeDef),
            "::",
            stringify!(Reserved9)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<USB_OTG_DeviceTypeDef>())).DVBUSDIS as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_DeviceTypeDef),
            "::",
            stringify!(DVBUSDIS)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<USB_OTG_DeviceTypeDef>())).DVBUSPULSE as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_DeviceTypeDef),
            "::",
            stringify!(DVBUSPULSE)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<USB_OTG_DeviceTypeDef>())).DTHRCTL as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_DeviceTypeDef),
            "::",
            stringify!(DTHRCTL)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<USB_OTG_DeviceTypeDef>())).DIEPEMPMSK as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_DeviceTypeDef),
            "::",
            stringify!(DIEPEMPMSK)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<USB_OTG_DeviceTypeDef>())).DEACHINT as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_DeviceTypeDef),
            "::",
            stringify!(DEACHINT)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<USB_OTG_DeviceTypeDef>())).DEACHMSK as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_DeviceTypeDef),
            "::",
            stringify!(DEACHMSK)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<USB_OTG_DeviceTypeDef>())).Reserved40 as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_DeviceTypeDef),
            "::",
            stringify!(Reserved40)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<USB_OTG_DeviceTypeDef>())).DINEP1MSK as *const _ as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_DeviceTypeDef),
            "::",
            stringify!(DINEP1MSK)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<USB_OTG_DeviceTypeDef>())).Reserved44 as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_DeviceTypeDef),
            "::",
            stringify!(Reserved44)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<USB_OTG_DeviceTypeDef>())).DOUTEP1MSK as *const _ as usize
        },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_DeviceTypeDef),
            "::",
            stringify!(DOUTEP1MSK)
        )
    );
}
/// @brief USB_OTG_IN_Endpoint-Specific_Register
#[repr(C)]
pub struct USB_OTG_INEndpointTypeDef {
    /// < dev IN Endpoint Control Reg    900h + (ep_num * 20h) + 00h
    pub DIEPCTL: u32,
    /// < Reserved                       900h + (ep_num * 20h) + 04h
    pub Reserved04: u32,
    /// < dev IN Endpoint Itr Reg        900h + (ep_num * 20h) + 08h
    pub DIEPINT: u32,
    /// < Reserved                       900h + (ep_num * 20h) + 0Ch
    pub Reserved0C: u32,
    /// < IN Endpoint Txfer Size         900h + (ep_num * 20h) + 10h
    pub DIEPTSIZ: u32,
    /// < IN Endpoint DMA Address Reg    900h + (ep_num * 20h) + 14h
    pub DIEPDMA: u32,
    /// < IN Endpoint Tx FIFO Status Reg 900h + (ep_num * 20h) + 18h
    pub DTXFSTS: u32,
    /// < Reserved  900h+(ep_num*20h)+1Ch-900h+ (ep_num * 20h) + 1Ch
    pub Reserved18: u32,
}
#[test]
fn bindgen_test_layout_USB_OTG_INEndpointTypeDef() {
    assert_eq!(
        ::core::mem::size_of::<USB_OTG_INEndpointTypeDef>(),
        32usize,
        concat!("Size of: ", stringify!(USB_OTG_INEndpointTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<USB_OTG_INEndpointTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(USB_OTG_INEndpointTypeDef))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<USB_OTG_INEndpointTypeDef>())).DIEPCTL as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_INEndpointTypeDef),
            "::",
            stringify!(DIEPCTL)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<USB_OTG_INEndpointTypeDef>())).Reserved04 as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_INEndpointTypeDef),
            "::",
            stringify!(Reserved04)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<USB_OTG_INEndpointTypeDef>())).DIEPINT as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_INEndpointTypeDef),
            "::",
            stringify!(DIEPINT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<USB_OTG_INEndpointTypeDef>())).Reserved0C as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_INEndpointTypeDef),
            "::",
            stringify!(Reserved0C)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<USB_OTG_INEndpointTypeDef>())).DIEPTSIZ as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_INEndpointTypeDef),
            "::",
            stringify!(DIEPTSIZ)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<USB_OTG_INEndpointTypeDef>())).DIEPDMA as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_INEndpointTypeDef),
            "::",
            stringify!(DIEPDMA)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<USB_OTG_INEndpointTypeDef>())).DTXFSTS as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_INEndpointTypeDef),
            "::",
            stringify!(DTXFSTS)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<USB_OTG_INEndpointTypeDef>())).Reserved18 as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_INEndpointTypeDef),
            "::",
            stringify!(Reserved18)
        )
    );
}
/// @brief USB_OTG_OUT_Endpoint-Specific_Registers
#[repr(C)]
pub struct USB_OTG_OUTEndpointTypeDef {
    /// < dev OUT Endpoint Control Reg           B00h + (ep_num * 20h) + 00h
    pub DOEPCTL: u32,
    /// < Reserved                               B00h + (ep_num * 20h) + 04h
    pub Reserved04: u32,
    /// < dev OUT Endpoint Itr Reg               B00h + (ep_num * 20h) + 08h
    pub DOEPINT: u32,
    /// < Reserved                               B00h + (ep_num * 20h) + 0Ch
    pub Reserved0C: u32,
    /// < dev OUT Endpoint Txfer Size            B00h + (ep_num * 20h) + 10h
    pub DOEPTSIZ: u32,
    /// < dev OUT Endpoint DMA Address           B00h + (ep_num * 20h) + 14h
    pub DOEPDMA: u32,
    /// < Reserved B00h + (ep_num * 20h) + 18h - B00h + (ep_num * 20h) + 1Ch
    pub Reserved18: [u32; 2usize],
}
#[test]
fn bindgen_test_layout_USB_OTG_OUTEndpointTypeDef() {
    assert_eq!(
        ::core::mem::size_of::<USB_OTG_OUTEndpointTypeDef>(),
        32usize,
        concat!("Size of: ", stringify!(USB_OTG_OUTEndpointTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<USB_OTG_OUTEndpointTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(USB_OTG_OUTEndpointTypeDef))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<USB_OTG_OUTEndpointTypeDef>())).DOEPCTL as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_OUTEndpointTypeDef),
            "::",
            stringify!(DOEPCTL)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<USB_OTG_OUTEndpointTypeDef>())).Reserved04 as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_OUTEndpointTypeDef),
            "::",
            stringify!(Reserved04)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<USB_OTG_OUTEndpointTypeDef>())).DOEPINT as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_OUTEndpointTypeDef),
            "::",
            stringify!(DOEPINT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<USB_OTG_OUTEndpointTypeDef>())).Reserved0C as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_OUTEndpointTypeDef),
            "::",
            stringify!(Reserved0C)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<USB_OTG_OUTEndpointTypeDef>())).DOEPTSIZ as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_OUTEndpointTypeDef),
            "::",
            stringify!(DOEPTSIZ)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<USB_OTG_OUTEndpointTypeDef>())).DOEPDMA as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_OUTEndpointTypeDef),
            "::",
            stringify!(DOEPDMA)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<USB_OTG_OUTEndpointTypeDef>())).Reserved18 as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_OUTEndpointTypeDef),
            "::",
            stringify!(Reserved18)
        )
    );
}
/// @brief USB_OTG_Host_Mode_Register_Structures
#[repr(C)]
pub struct USB_OTG_HostTypeDef {
    /// < Host Configuration Register          400h
    pub HCFG: u32,
    /// < Host Frame Interval Register         404h
    pub HFIR: u32,
    /// < Host Frame Nbr/Frame Remaining       408h
    pub HFNUM: u32,
    /// < Reserved                             40Ch
    pub Reserved40C: u32,
    /// < Host Periodic Tx FIFO/ Queue Status  410h
    pub HPTXSTS: u32,
    /// < Host All Channels Interrupt Register 414h
    pub HAINT: u32,
    /// < Host All Channels Interrupt Mask     418h
    pub HAINTMSK: u32,
}
#[test]
fn bindgen_test_layout_USB_OTG_HostTypeDef() {
    assert_eq!(
        ::core::mem::size_of::<USB_OTG_HostTypeDef>(),
        28usize,
        concat!("Size of: ", stringify!(USB_OTG_HostTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<USB_OTG_HostTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(USB_OTG_HostTypeDef))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<USB_OTG_HostTypeDef>())).HCFG as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_HostTypeDef),
            "::",
            stringify!(HCFG)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<USB_OTG_HostTypeDef>())).HFIR as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_HostTypeDef),
            "::",
            stringify!(HFIR)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<USB_OTG_HostTypeDef>())).HFNUM as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_HostTypeDef),
            "::",
            stringify!(HFNUM)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<USB_OTG_HostTypeDef>())).Reserved40C as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_HostTypeDef),
            "::",
            stringify!(Reserved40C)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<USB_OTG_HostTypeDef>())).HPTXSTS as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_HostTypeDef),
            "::",
            stringify!(HPTXSTS)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<USB_OTG_HostTypeDef>())).HAINT as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_HostTypeDef),
            "::",
            stringify!(HAINT)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<USB_OTG_HostTypeDef>())).HAINTMSK as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_HostTypeDef),
            "::",
            stringify!(HAINTMSK)
        )
    );
}
/// @brief USB_OTG_Host_Channel_Specific_Registers
#[repr(C)]
pub struct USB_OTG_HostChannelTypeDef {
    /// < Host Channel Characteristics Register    500h
    pub HCCHAR: u32,
    /// < Host Channel Split Control Register      504h
    pub HCSPLT: u32,
    /// < Host Channel Interrupt Register          508h
    pub HCINT: u32,
    /// < Host Channel Interrupt Mask Register     50Ch
    pub HCINTMSK: u32,
    /// < Host Channel Transfer Size Register      510h
    pub HCTSIZ: u32,
    /// < Host Channel DMA Address Register        514h
    pub HCDMA: u32,
    /// < Reserved
    pub Reserved: [u32; 2usize],
}
#[test]
fn bindgen_test_layout_USB_OTG_HostChannelTypeDef() {
    assert_eq!(
        ::core::mem::size_of::<USB_OTG_HostChannelTypeDef>(),
        32usize,
        concat!("Size of: ", stringify!(USB_OTG_HostChannelTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<USB_OTG_HostChannelTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(USB_OTG_HostChannelTypeDef))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<USB_OTG_HostChannelTypeDef>())).HCCHAR as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_HostChannelTypeDef),
            "::",
            stringify!(HCCHAR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<USB_OTG_HostChannelTypeDef>())).HCSPLT as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_HostChannelTypeDef),
            "::",
            stringify!(HCSPLT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<USB_OTG_HostChannelTypeDef>())).HCINT as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_HostChannelTypeDef),
            "::",
            stringify!(HCINT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<USB_OTG_HostChannelTypeDef>())).HCINTMSK as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_HostChannelTypeDef),
            "::",
            stringify!(HCINTMSK)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<USB_OTG_HostChannelTypeDef>())).HCTSIZ as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_HostChannelTypeDef),
            "::",
            stringify!(HCTSIZ)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<USB_OTG_HostChannelTypeDef>())).HCDMA as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_HostChannelTypeDef),
            "::",
            stringify!(HCDMA)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<USB_OTG_HostChannelTypeDef>())).Reserved as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_OTG_HostChannelTypeDef),
            "::",
            stringify!(Reserved)
        )
    );
}
